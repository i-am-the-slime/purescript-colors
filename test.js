// Generated by psc-bundle 0.11.3
var PS = {};
(function(exports) {
    "use strict";

  exports.arrayApply = function (fs) {
    return function (xs) {
      var result = [];
      var n = 0;
      for (var i = 0, l = fs.length; i < l; i++) {
        for (var j = 0, k = xs.length; j < k; j++) {
          result[n++] = fs[i](xs[j]);
        }
      }
      return result;
    };
  };
})(PS["Control.Apply"] = PS["Control.Apply"] || {});
(function(exports) {
  // Generated by purs version 0.11.3
  "use strict";
  var Semigroupoid = function (compose) {
      this.compose = compose;
  };
  var semigroupoidFn = new Semigroupoid(function (f) {
      return function (g) {
          return function (x) {
              return f(g(x));
          };
      };
  });
  var compose = function (dict) {
      return dict.compose;
  };
  exports["Semigroupoid"] = Semigroupoid;
  exports["compose"] = compose;
  exports["semigroupoidFn"] = semigroupoidFn;
})(PS["Control.Semigroupoid"] = PS["Control.Semigroupoid"] || {});
(function(exports) {
  // Generated by purs version 0.11.3
  "use strict";
  var Control_Semigroupoid = PS["Control.Semigroupoid"];        
  var Category = function (Semigroupoid0, id) {
      this.Semigroupoid0 = Semigroupoid0;
      this.id = id;
  };
  var id = function (dict) {
      return dict.id;
  };
  var categoryFn = new Category(function () {
      return Control_Semigroupoid.semigroupoidFn;
  }, function (x) {
      return x;
  });
  exports["Category"] = Category;
  exports["id"] = id;
  exports["categoryFn"] = categoryFn;
})(PS["Control.Category"] = PS["Control.Category"] || {});
(function(exports) {
  // Generated by purs version 0.11.3
  "use strict";
  var Control_Category = PS["Control.Category"];        
  var on = function (f) {
      return function (g) {
          return function (x) {
              return function (y) {
                  return f(g(x))(g(y));
              };
          };
      };
  };
  var flip = function (f) {
      return function (b) {
          return function (a) {
              return f(a)(b);
          };
      };
  };
  var $$const = function (a) {
      return function (v) {
          return a;
      };
  };
  exports["const"] = $$const;
  exports["flip"] = flip;
  exports["on"] = on;
})(PS["Data.Function"] = PS["Data.Function"] || {});
(function(exports) {
    "use strict";

  exports.arrayMap = function (f) {
    return function (arr) {
      var l = arr.length;
      var result = new Array(l);
      for (var i = 0; i < l; i++) {
        result[i] = f(arr[i]);
      }
      return result;
    };
  };
})(PS["Data.Functor"] = PS["Data.Functor"] || {});
(function(exports) {
    "use strict";

  exports.unit = {};
})(PS["Data.Unit"] = PS["Data.Unit"] || {});
(function(exports) {
    "use strict";

  exports.showIntImpl = function (n) {
    return n.toString();
  };

  exports.showNumberImpl = function (n) {
    var str = n.toString();
    return isNaN(str + ".0") ? str : str + ".0";
  };

  exports.showCharImpl = function (c) {
    var code = c.charCodeAt(0);
    if (code < 0x20 || code === 0x7F) {
      switch (c) {
        case "\x07": return "'\\a'";
        case "\b": return "'\\b'";
        case "\f": return "'\\f'";
        case "\n": return "'\\n'";
        case "\r": return "'\\r'";
        case "\t": return "'\\t'";
        case "\v": return "'\\v'";
      }
      return "'\\" + code.toString(10) + "'";
    }
    return c === "'" || c === "\\" ? "'\\" + c + "'" : "'" + c + "'";
  };

  exports.showStringImpl = function (s) {
    var l = s.length;
    return "\"" + s.replace(
      /[\0-\x1F\x7F"\\]/g, // eslint-disable-line no-control-regex
      function (c, i) {
        switch (c) {
          case "\"":
          case "\\":
            return "\\" + c;
          case "\x07": return "\\a";
          case "\b": return "\\b";
          case "\f": return "\\f";
          case "\n": return "\\n";
          case "\r": return "\\r";
          case "\t": return "\\t";
          case "\v": return "\\v";
        }
        var k = i + 1;
        var empty = k < l && s[k] >= "0" && s[k] <= "9" ? "\\&" : "";
        return "\\" + c.charCodeAt(0).toString(10) + empty;
      }
    ) + "\"";
  };

  exports.showArrayImpl = function (f) {
    return function (xs) {
      var ss = [];
      for (var i = 0, l = xs.length; i < l; i++) {
        ss[i] = f(xs[i]);
      }
      return "[" + ss.join(",") + "]";
    };
  };
})(PS["Data.Show"] = PS["Data.Show"] || {});
(function(exports) {
  // Generated by purs version 0.11.3
  "use strict";
  var $foreign = PS["Data.Show"];     
  var Show = function (show) {
      this.show = show;
  };
  var showString = new Show($foreign.showStringImpl);
  var showNumber = new Show($foreign.showNumberImpl);
  var showInt = new Show($foreign.showIntImpl);
  var showChar = new Show($foreign.showCharImpl);
  var showBoolean = new Show(function (v) {
      if (v) {
          return "true";
      };
      if (!v) {
          return "false";
      };
      throw new Error("Failed pattern match at Data.Show line 13, column 3 - line 14, column 3: " + [ v.constructor.name ]);
  });
  var show = function (dict) {
      return dict.show;
  };
  var showArray = function (dictShow) {
      return new Show($foreign.showArrayImpl(show(dictShow)));
  };
  exports["Show"] = Show;
  exports["show"] = show;
  exports["showBoolean"] = showBoolean;
  exports["showInt"] = showInt;
  exports["showNumber"] = showNumber;
  exports["showChar"] = showChar;
  exports["showString"] = showString;
  exports["showArray"] = showArray;
})(PS["Data.Show"] = PS["Data.Show"] || {});
(function(exports) {
  // Generated by purs version 0.11.3
  "use strict";
  var $foreign = PS["Data.Unit"];
  var Data_Show = PS["Data.Show"];        
  var showUnit = new Data_Show.Show(function (v) {
      return "unit";
  });
  exports["showUnit"] = showUnit;
  exports["unit"] = $foreign.unit;
})(PS["Data.Unit"] = PS["Data.Unit"] || {});
(function(exports) {
  // Generated by purs version 0.11.3
  "use strict";
  var $foreign = PS["Data.Functor"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Function = PS["Data.Function"];
  var Data_Unit = PS["Data.Unit"];        
  var Functor = function (map) {
      this.map = map;
  };
  var map = function (dict) {
      return dict.map;
  };
  var mapFlipped = function (dictFunctor) {
      return function (fa) {
          return function (f) {
              return map(dictFunctor)(f)(fa);
          };
      };
  };
  var $$void = function (dictFunctor) {
      return map(dictFunctor)(Data_Function["const"](Data_Unit.unit));
  };
  var voidLeft = function (dictFunctor) {
      return function (f) {
          return function (x) {
              return map(dictFunctor)(Data_Function["const"](x))(f);
          };
      };
  };
  var voidRight = function (dictFunctor) {
      return function (x) {
          return map(dictFunctor)(Data_Function["const"](x));
      };
  };
  var functorFn = new Functor(Control_Semigroupoid.compose(Control_Semigroupoid.semigroupoidFn));
  var functorArray = new Functor($foreign.arrayMap);
  exports["Functor"] = Functor;
  exports["map"] = map;
  exports["mapFlipped"] = mapFlipped;
  exports["void"] = $$void;
  exports["voidLeft"] = voidLeft;
  exports["voidRight"] = voidRight;
  exports["functorFn"] = functorFn;
  exports["functorArray"] = functorArray;
})(PS["Data.Functor"] = PS["Data.Functor"] || {});
(function(exports) {
  // Generated by purs version 0.11.3
  "use strict";
  var $foreign = PS["Control.Apply"];
  var Control_Category = PS["Control.Category"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];        
  var Apply = function (Functor0, apply) {
      this.Functor0 = Functor0;
      this.apply = apply;
  }; 
  var applyArray = new Apply(function () {
      return Data_Functor.functorArray;
  }, $foreign.arrayApply);
  var apply = function (dict) {
      return dict.apply;
  };
  var applyFirst = function (dictApply) {
      return function (a) {
          return function (b) {
              return apply(dictApply)(Data_Functor.map(dictApply.Functor0())(Data_Function["const"])(a))(b);
          };
      };
  };
  var applySecond = function (dictApply) {
      return function (a) {
          return function (b) {
              return apply(dictApply)(Data_Functor.map(dictApply.Functor0())(Data_Function["const"](Control_Category.id(Control_Category.categoryFn)))(a))(b);
          };
      };
  };
  var lift2 = function (dictApply) {
      return function (f) {
          return function (a) {
              return function (b) {
                  return apply(dictApply)(Data_Functor.map(dictApply.Functor0())(f)(a))(b);
              };
          };
      };
  };
  exports["Apply"] = Apply;
  exports["apply"] = apply;
  exports["applyFirst"] = applyFirst;
  exports["applySecond"] = applySecond;
  exports["lift2"] = lift2;
  exports["applyArray"] = applyArray;
})(PS["Control.Apply"] = PS["Control.Apply"] || {});
(function(exports) {
  // Generated by purs version 0.11.3
  "use strict";
  var Control_Apply = PS["Control.Apply"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Unit = PS["Data.Unit"];        
  var Applicative = function (Apply0, pure) {
      this.Apply0 = Apply0;
      this.pure = pure;
  };
  var pure = function (dict) {
      return dict.pure;
  };
  var unless = function (dictApplicative) {
      return function (v) {
          return function (v1) {
              if (!v) {
                  return v1;
              };
              if (v) {
                  return pure(dictApplicative)(Data_Unit.unit);
              };
              throw new Error("Failed pattern match at Control.Applicative line 63, column 1 - line 63, column 19: " + [ v.constructor.name, v1.constructor.name ]);
          };
      };
  };
  var when = function (dictApplicative) {
      return function (v) {
          return function (v1) {
              if (v) {
                  return v1;
              };
              if (!v) {
                  return pure(dictApplicative)(Data_Unit.unit);
              };
              throw new Error("Failed pattern match at Control.Applicative line 58, column 1 - line 58, column 16: " + [ v.constructor.name, v1.constructor.name ]);
          };
      };
  };
  var liftA1 = function (dictApplicative) {
      return function (f) {
          return function (a) {
              return Control_Apply.apply(dictApplicative.Apply0())(pure(dictApplicative)(f))(a);
          };
      };
  }; 
  var applicativeArray = new Applicative(function () {
      return Control_Apply.applyArray;
  }, function (x) {
      return [ x ];
  });
  exports["Applicative"] = Applicative;
  exports["liftA1"] = liftA1;
  exports["pure"] = pure;
  exports["unless"] = unless;
  exports["when"] = when;
  exports["applicativeArray"] = applicativeArray;
})(PS["Control.Applicative"] = PS["Control.Applicative"] || {});
(function(exports) {
  // Generated by purs version 0.11.3
  "use strict";
  var $foreign = PS["Control.Bind"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Category = PS["Control.Category"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Unit = PS["Data.Unit"];        
  var Bind = function (Apply0, bind) {
      this.Apply0 = Apply0;
      this.bind = bind;
  };
  var Discard = function (discard) {
      this.discard = discard;
  };
  var discard = function (dict) {
      return dict.discard;
  };                     
  var bind = function (dict) {
      return dict.bind;
  };
  var bindFlipped = function (dictBind) {
      return Data_Function.flip(bind(dictBind));
  };
  var composeKleisliFlipped = function (dictBind) {
      return function (f) {
          return function (g) {
              return function (a) {
                  return bindFlipped(dictBind)(f)(g(a));
              };
          };
      };
  };
  var discardUnit = new Discard(function (dictBind) {
      return bind(dictBind);
  });
  var join = function (dictBind) {
      return function (m) {
          return bind(dictBind)(m)(Control_Category.id(Control_Category.categoryFn));
      };
  };
  exports["Bind"] = Bind;
  exports["Discard"] = Discard;
  exports["bind"] = bind;
  exports["bindFlipped"] = bindFlipped;
  exports["composeKleisliFlipped"] = composeKleisliFlipped;
  exports["discard"] = discard;
  exports["join"] = join;
  exports["discardUnit"] = discardUnit;
})(PS["Control.Bind"] = PS["Control.Bind"] || {});
(function(exports) {
    "use strict";       

  exports.fromFoldableImpl = (function () {
    // jshint maxparams: 2
    function Cons(head, tail) {
      this.head = head;
      this.tail = tail;
    }
    var emptyList = {};

    function curryCons(head) {
      return function (tail) {
        return new Cons(head, tail);
      };
    }

    function listToArray(list) {
      var result = [];
      var count = 0;
      var xs = list;
      while (xs !== emptyList) {
        result[count++] = xs.head;
        xs = xs.tail;
      }
      return result;
    }

    return function (foldr) {
      return function (xs) {
        return listToArray(foldr(curryCons)(emptyList)(xs));
      };
    };
  })();

  //------------------------------------------------------------------------------
  // Array size ------------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.length = function (xs) {
    return xs.length;
  };

  exports.snoc = function (l) {
    return function (e) {
      var l1 = l.slice();
      l1.push(e);
      return l1;
    };
  };

  //------------------------------------------------------------------------------
  // Indexed operations ----------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.indexImpl = function (just) {
    return function (nothing) {
      return function (xs) {
        return function (i) {
          return i < 0 || i >= xs.length ? nothing :  just(xs[i]);
        };
      };
    };
  };

  //------------------------------------------------------------------------------
  // Sorting ---------------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.sortImpl = function (f) {
    return function (l) {
      // jshint maxparams: 2
      return l.slice().sort(function (x, y) {
        return f(x)(y);
      });
    };
  };

  //------------------------------------------------------------------------------
  // Subarrays -------------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.slice = function (s) {
    return function (e) {
      return function (l) {
        return l.slice(s, e);
      };
    };
  };

  exports.take = function (n) {
    return function (l) {
      return n < 1 ? [] : l.slice(0, n);
    };
  };
})(PS["Data.Array"] = PS["Data.Array"] || {});
(function(exports) {
    "use strict";

  exports.concatString = function (s1) {
    return function (s2) {
      return s1 + s2;
    };
  };

  exports.concatArray = function (xs) {
    return function (ys) {
      if (xs.length === 0) return ys;
      if (ys.length === 0) return xs;
      return xs.concat(ys);
    };
  };
})(PS["Data.Semigroup"] = PS["Data.Semigroup"] || {});
(function(exports) {
  // Generated by purs version 0.11.3
  "use strict";
  var $foreign = PS["Data.Semigroup"];
  var Data_Unit = PS["Data.Unit"];
  var Data_Void = PS["Data.Void"];        
  var Semigroup = function (append) {
      this.append = append;
  }; 
  var semigroupString = new Semigroup($foreign.concatString);
  var semigroupArray = new Semigroup($foreign.concatArray);
  var append = function (dict) {
      return dict.append;
  };
  exports["Semigroup"] = Semigroup;
  exports["append"] = append;
  exports["semigroupString"] = semigroupString;
  exports["semigroupArray"] = semigroupArray;
})(PS["Data.Semigroup"] = PS["Data.Semigroup"] || {});
(function(exports) {
  // Generated by purs version 0.11.3
  "use strict";
  var Data_Functor = PS["Data.Functor"];
  var Data_Semigroup = PS["Data.Semigroup"];        
  var Alt = function (Functor0, alt) {
      this.Functor0 = Functor0;
      this.alt = alt;
  };                                                       
  var alt = function (dict) {
      return dict.alt;
  };
  exports["Alt"] = Alt;
  exports["alt"] = alt;
})(PS["Control.Alt"] = PS["Control.Alt"] || {});
(function(exports) {
  // Generated by purs version 0.11.3
  "use strict";
  var Control_Alt = PS["Control.Alt"];
  var Data_Functor = PS["Data.Functor"];        
  var Plus = function (Alt0, empty) {
      this.Alt0 = Alt0;
      this.empty = empty;
  };       
  var empty = function (dict) {
      return dict.empty;
  };
  exports["Plus"] = Plus;
  exports["empty"] = empty;
})(PS["Control.Plus"] = PS["Control.Plus"] || {});
(function(exports) {
  // Generated by purs version 0.11.3
  "use strict";
  var Control_Alt = PS["Control.Alt"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Plus = PS["Control.Plus"];
  var Data_Functor = PS["Data.Functor"];        
  var Alternative = function (Applicative0, Plus1) {
      this.Applicative0 = Applicative0;
      this.Plus1 = Plus1;
  };
  exports["Alternative"] = Alternative;
})(PS["Control.Alternative"] = PS["Control.Alternative"] || {});
(function(exports) {
  // Generated by purs version 0.11.3
  "use strict";
  var Data_Unit = PS["Data.Unit"];        
  var Lazy = function (defer) {
      this.defer = defer;
  }; 
  var defer = function (dict) {
      return dict.defer;
  };
  var fix = function (dictLazy) {
      return function (f) {
          return defer(dictLazy)(function (v) {
              return f(fix(dictLazy)(f));
          });
      };
  };
  exports["Lazy"] = Lazy;
  exports["defer"] = defer;
  exports["fix"] = fix;
})(PS["Control.Lazy"] = PS["Control.Lazy"] || {});
(function(exports) {
    "use strict";

  exports.pureE = function (a) {
    return function () {
      return a;
    };
  };

  exports.bindE = function (a) {
    return function (f) {
      return function () {
        return f(a())();
      };
    };
  };

  exports.runPure = function (f) {
    return f();
  };

  exports.foreachE = function (as) {
    return function (f) {
      return function () {
        for (var i = 0, l = as.length; i < l; i++) {
          f(as[i])();
        }
      };
    };
  };
})(PS["Control.Monad.Eff"] = PS["Control.Monad.Eff"] || {});
(function(exports) {
  // Generated by purs version 0.11.3
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Unit = PS["Data.Unit"];        
  var Monad = function (Applicative0, Bind1) {
      this.Applicative0 = Applicative0;
      this.Bind1 = Bind1;
  };
  var ap = function (dictMonad) {
      return function (f) {
          return function (a) {
              return Control_Bind.bind(dictMonad.Bind1())(f)(function (v) {
                  return Control_Bind.bind(dictMonad.Bind1())(a)(function (v1) {
                      return Control_Applicative.pure(dictMonad.Applicative0())(v(v1));
                  });
              });
          };
      };
  };
  exports["Monad"] = Monad;
  exports["ap"] = ap;
})(PS["Control.Monad"] = PS["Control.Monad"] || {});
(function(exports) {
  // Generated by purs version 0.11.3
  "use strict";
  var $foreign = PS["Control.Monad.Eff"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad = PS["Control.Monad"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Unit = PS["Data.Unit"];        
  var monadEff = new Control_Monad.Monad(function () {
      return applicativeEff;
  }, function () {
      return bindEff;
  });
  var bindEff = new Control_Bind.Bind(function () {
      return applyEff;
  }, $foreign.bindE);
  var applyEff = new Control_Apply.Apply(function () {
      return functorEff;
  }, Control_Monad.ap(monadEff));
  var applicativeEff = new Control_Applicative.Applicative(function () {
      return applyEff;
  }, $foreign.pureE);
  var functorEff = new Data_Functor.Functor(Control_Applicative.liftA1(applicativeEff));
  exports["functorEff"] = functorEff;
  exports["applyEff"] = applyEff;
  exports["applicativeEff"] = applicativeEff;
  exports["bindEff"] = bindEff;
  exports["monadEff"] = monadEff;
  exports["foreachE"] = $foreign.foreachE;
  exports["runPure"] = $foreign.runPure;
})(PS["Control.Monad.Eff"] = PS["Control.Monad.Eff"] || {});
(function(exports) {
  // Generated by purs version 0.11.3
  "use strict";
  var otherwise = true;
  exports["otherwise"] = otherwise;
})(PS["Data.Boolean"] = PS["Data.Boolean"] || {});
(function(exports) {
    "use strict";

  exports.refEq = function (r1) {
    return function (r2) {
      return r1 === r2;
    };
  };
})(PS["Data.Eq"] = PS["Data.Eq"] || {});
(function(exports) {
  // Generated by purs version 0.11.3
  "use strict";
  var $foreign = PS["Data.Eq"];
  var Data_Unit = PS["Data.Unit"];
  var Data_Void = PS["Data.Void"];        
  var Eq = function (eq) {
      this.eq = eq;
  }; 
  var eqString = new Eq($foreign.refEq);
  var eqNumber = new Eq($foreign.refEq);
  var eqInt = new Eq($foreign.refEq);
  var eqChar = new Eq($foreign.refEq);
  var eq = function (dict) {
      return dict.eq;
  };
  exports["Eq"] = Eq;
  exports["eq"] = eq;
  exports["eqInt"] = eqInt;
  exports["eqNumber"] = eqNumber;
  exports["eqChar"] = eqChar;
  exports["eqString"] = eqString;
})(PS["Data.Eq"] = PS["Data.Eq"] || {});
(function(exports) {
    "use strict";

  exports.foldrArray = function (f) {
    return function (init) {
      return function (xs) {
        var acc = init;
        var len = xs.length;
        for (var i = len - 1; i >= 0; i--) {
          acc = f(xs[i])(acc);
        }
        return acc;
      };
    };
  };

  exports.foldlArray = function (f) {
    return function (init) {
      return function (xs) {
        var acc = init;
        var len = xs.length;
        for (var i = 0; i < len; i++) {
          acc = f(acc)(xs[i]);
        }
        return acc;
      };
    };
  };
})(PS["Data.Foldable"] = PS["Data.Foldable"] || {});
(function(exports) {
    "use strict";

  exports.boolConj = function (b1) {
    return function (b2) {
      return b1 && b2;
    };
  };

  exports.boolDisj = function (b1) {
    return function (b2) {
      return b1 || b2;
    };
  };

  exports.boolNot = function (b) {
    return !b;
  };
})(PS["Data.HeytingAlgebra"] = PS["Data.HeytingAlgebra"] || {});
(function(exports) {
  // Generated by purs version 0.11.3
  "use strict";
  var $foreign = PS["Data.HeytingAlgebra"];
  var Data_Unit = PS["Data.Unit"];        
  var HeytingAlgebra = function (conj, disj, ff, implies, not, tt) {
      this.conj = conj;
      this.disj = disj;
      this.ff = ff;
      this.implies = implies;
      this.not = not;
      this.tt = tt;
  };
  var tt = function (dict) {
      return dict.tt;
  };
  var not = function (dict) {
      return dict.not;
  };
  var implies = function (dict) {
      return dict.implies;
  };                 
  var ff = function (dict) {
      return dict.ff;
  };
  var disj = function (dict) {
      return dict.disj;
  };
  var heytingAlgebraBoolean = new HeytingAlgebra($foreign.boolConj, $foreign.boolDisj, false, function (a) {
      return function (b) {
          return disj(heytingAlgebraBoolean)(not(heytingAlgebraBoolean)(a))(b);
      };
  }, $foreign.boolNot, true);
  var conj = function (dict) {
      return dict.conj;
  };
  exports["HeytingAlgebra"] = HeytingAlgebra;
  exports["conj"] = conj;
  exports["disj"] = disj;
  exports["ff"] = ff;
  exports["implies"] = implies;
  exports["not"] = not;
  exports["tt"] = tt;
  exports["heytingAlgebraBoolean"] = heytingAlgebraBoolean;
})(PS["Data.HeytingAlgebra"] = PS["Data.HeytingAlgebra"] || {});
(function(exports) {
    "use strict";

  exports.topInt = 2147483647;
  exports.bottomInt = -2147483648;
})(PS["Data.Bounded"] = PS["Data.Bounded"] || {});
(function(exports) {
    "use strict";

  exports.unsafeCompareImpl = function (lt) {
    return function (eq) {
      return function (gt) {
        return function (x) {
          return function (y) {
            return x < y ? lt : x === y ? eq : gt;
          };
        };
      };
    };
  };
})(PS["Data.Ord.Unsafe"] = PS["Data.Ord.Unsafe"] || {});
(function(exports) {
  // Generated by purs version 0.11.3
  "use strict";
  var Data_Eq = PS["Data.Eq"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];        
  var LT = (function () {
      function LT() {

      };
      LT.value = new LT();
      return LT;
  })();
  var GT = (function () {
      function GT() {

      };
      GT.value = new GT();
      return GT;
  })();
  var EQ = (function () {
      function EQ() {

      };
      EQ.value = new EQ();
      return EQ;
  })();
  var eqOrdering = new Data_Eq.Eq(function (v) {
      return function (v1) {
          if (v instanceof LT && v1 instanceof LT) {
              return true;
          };
          if (v instanceof GT && v1 instanceof GT) {
              return true;
          };
          if (v instanceof EQ && v1 instanceof EQ) {
              return true;
          };
          return false;
      };
  });
  exports["LT"] = LT;
  exports["GT"] = GT;
  exports["EQ"] = EQ;
  exports["eqOrdering"] = eqOrdering;
})(PS["Data.Ordering"] = PS["Data.Ordering"] || {});
(function(exports) {
  // Generated by purs version 0.11.3
  "use strict";
  var $foreign = PS["Data.Ord.Unsafe"];
  var Data_Ordering = PS["Data.Ordering"];        
  var unsafeCompare = $foreign.unsafeCompareImpl(Data_Ordering.LT.value)(Data_Ordering.EQ.value)(Data_Ordering.GT.value);
  exports["unsafeCompare"] = unsafeCompare;
})(PS["Data.Ord.Unsafe"] = PS["Data.Ord.Unsafe"] || {});
(function(exports) {
  // Generated by purs version 0.11.3
  "use strict";
  var $foreign = PS["Data.Ord"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Function = PS["Data.Function"];
  var Data_Ord_Unsafe = PS["Data.Ord.Unsafe"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Unit = PS["Data.Unit"];
  var Data_Void = PS["Data.Void"];        
  var Ord = function (Eq0, compare) {
      this.Eq0 = Eq0;
      this.compare = compare;
  }; 
  var ordString = new Ord(function () {
      return Data_Eq.eqString;
  }, Data_Ord_Unsafe.unsafeCompare);
  var ordNumber = new Ord(function () {
      return Data_Eq.eqNumber;
  }, Data_Ord_Unsafe.unsafeCompare);
  var ordInt = new Ord(function () {
      return Data_Eq.eqInt;
  }, Data_Ord_Unsafe.unsafeCompare);
  var compare = function (dict) {
      return dict.compare;
  };
  var comparing = function (dictOrd) {
      return function (f) {
          return Data_Function.on(compare(dictOrd))(f);
      };
  };
  var greaterThan = function (dictOrd) {
      return function (a1) {
          return function (a2) {
              var v = compare(dictOrd)(a1)(a2);
              if (v instanceof Data_Ordering.GT) {
                  return true;
              };
              return false;
          };
      };
  };
  var lessThan = function (dictOrd) {
      return function (a1) {
          return function (a2) {
              var v = compare(dictOrd)(a1)(a2);
              if (v instanceof Data_Ordering.LT) {
                  return true;
              };
              return false;
          };
      };
  };
  var max = function (dictOrd) {
      return function (x) {
          return function (y) {
              var v = compare(dictOrd)(x)(y);
              if (v instanceof Data_Ordering.LT) {
                  return y;
              };
              if (v instanceof Data_Ordering.EQ) {
                  return x;
              };
              if (v instanceof Data_Ordering.GT) {
                  return x;
              };
              throw new Error("Failed pattern match at Data.Ord line 123, column 3 - line 126, column 12: " + [ v.constructor.name ]);
          };
      };
  };
  var min = function (dictOrd) {
      return function (x) {
          return function (y) {
              var v = compare(dictOrd)(x)(y);
              if (v instanceof Data_Ordering.LT) {
                  return x;
              };
              if (v instanceof Data_Ordering.EQ) {
                  return x;
              };
              if (v instanceof Data_Ordering.GT) {
                  return y;
              };
              throw new Error("Failed pattern match at Data.Ord line 114, column 3 - line 117, column 12: " + [ v.constructor.name ]);
          };
      };
  }; 
  var clamp = function (dictOrd) {
      return function (low) {
          return function (hi) {
              return function (x) {
                  return min(dictOrd)(hi)(max(dictOrd)(low)(x));
              };
          };
      };
  };
  var between = function (dictOrd) {
      return function (low) {
          return function (hi) {
              return function (x) {
                  if (lessThan(dictOrd)(x)(low)) {
                      return false;
                  };
                  if (greaterThan(dictOrd)(x)(hi)) {
                      return false;
                  };
                  return true;
              };
          };
      };
  };
  exports["Ord"] = Ord;
  exports["between"] = between;
  exports["clamp"] = clamp;
  exports["compare"] = compare;
  exports["comparing"] = comparing;
  exports["greaterThan"] = greaterThan;
  exports["lessThan"] = lessThan;
  exports["max"] = max;
  exports["min"] = min;
  exports["ordInt"] = ordInt;
  exports["ordNumber"] = ordNumber;
  exports["ordString"] = ordString;
})(PS["Data.Ord"] = PS["Data.Ord"] || {});
(function(exports) {
  // Generated by purs version 0.11.3
  "use strict";
  var $foreign = PS["Data.Bounded"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Unit = PS["Data.Unit"];        
  var Bounded = function (Ord0, bottom, top) {
      this.Ord0 = Ord0;
      this.bottom = bottom;
      this.top = top;
  };
  var top = function (dict) {
      return dict.top;
  };                                                 
  var boundedInt = new Bounded(function () {
      return Data_Ord.ordInt;
  }, $foreign.bottomInt, $foreign.topInt);
  var bottom = function (dict) {
      return dict.bottom;
  };
  exports["Bounded"] = Bounded;
  exports["bottom"] = bottom;
  exports["top"] = top;
  exports["boundedInt"] = boundedInt;
})(PS["Data.Bounded"] = PS["Data.Bounded"] || {});
(function(exports) {
  // Generated by purs version 0.11.3
  "use strict";
  var Data_Boolean = PS["Data.Boolean"];
  var Data_Eq = PS["Data.Eq"];
  var Data_EuclideanRing = PS["Data.EuclideanRing"];
  var Data_Function = PS["Data.Function"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];        
  var Monoid = function (Semigroup0, mempty) {
      this.Semigroup0 = Semigroup0;
      this.mempty = mempty;
  };                 
  var monoidString = new Monoid(function () {
      return Data_Semigroup.semigroupString;
  }, "");  
  var mempty = function (dict) {
      return dict.mempty;
  };
  exports["Monoid"] = Monoid;
  exports["mempty"] = mempty;
  exports["monoidString"] = monoidString;
})(PS["Data.Monoid"] = PS["Data.Monoid"] || {});
(function(exports) {
  // Generated by purs version 0.11.3
  "use strict";
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Category = PS["Control.Category"];
  var Control_Extend = PS["Control.Extend"];
  var Control_Monad = PS["Control.Monad"];
  var Control_MonadZero = PS["Control.MonadZero"];
  var Control_Plus = PS["Control.Plus"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Functor_Invariant = PS["Data.Functor.Invariant"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];        
  var Nothing = (function () {
      function Nothing() {

      };
      Nothing.value = new Nothing();
      return Nothing;
  })();
  var Just = (function () {
      function Just(value0) {
          this.value0 = value0;
      };
      Just.create = function (value0) {
          return new Just(value0);
      };
      return Just;
  })();
  var maybe = function (v) {
      return function (v1) {
          return function (v2) {
              if (v2 instanceof Nothing) {
                  return v;
              };
              if (v2 instanceof Just) {
                  return v1(v2.value0);
              };
              throw new Error("Failed pattern match at Data.Maybe line 220, column 1 - line 220, column 22: " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
          };
      };
  };                                                         
  var isJust = maybe(false)(Data_Function["const"](true));
  var functorMaybe = new Data_Functor.Functor(function (v) {
      return function (v1) {
          if (v1 instanceof Just) {
              return new Just(v(v1.value0));
          };
          return Nothing.value;
      };
  });
  var fromMaybe = function (a) {
      return maybe(a)(Control_Category.id(Control_Category.categoryFn));
  };
  var fromJust = function (dictPartial) {
      return function (v) {
          var __unused = function (dictPartial1) {
              return function ($dollar34) {
                  return $dollar34;
              };
          };
          return __unused(dictPartial)((function () {
              if (v instanceof Just) {
                  return v.value0;
              };
              throw new Error("Failed pattern match at Data.Maybe line 271, column 1 - line 271, column 21: " + [ v.constructor.name ]);
          })());
      };
  };
  var applyMaybe = new Control_Apply.Apply(function () {
      return functorMaybe;
  }, function (v) {
      return function (v1) {
          if (v instanceof Just) {
              return Data_Functor.map(functorMaybe)(v.value0)(v1);
          };
          if (v instanceof Nothing) {
              return Nothing.value;
          };
          throw new Error("Failed pattern match at Data.Maybe line 69, column 3 - line 69, column 31: " + [ v.constructor.name, v1.constructor.name ]);
      };
  });
  var bindMaybe = new Control_Bind.Bind(function () {
      return applyMaybe;
  }, function (v) {
      return function (v1) {
          if (v instanceof Just) {
              return v1(v.value0);
          };
          if (v instanceof Nothing) {
              return Nothing.value;
          };
          throw new Error("Failed pattern match at Data.Maybe line 128, column 3 - line 128, column 24: " + [ v.constructor.name, v1.constructor.name ]);
      };
  });
  var applicativeMaybe = new Control_Applicative.Applicative(function () {
      return applyMaybe;
  }, Just.create);
  exports["Nothing"] = Nothing;
  exports["Just"] = Just;
  exports["fromJust"] = fromJust;
  exports["fromMaybe"] = fromMaybe;
  exports["isJust"] = isJust;
  exports["maybe"] = maybe;
  exports["functorMaybe"] = functorMaybe;
  exports["applyMaybe"] = applyMaybe;
  exports["applicativeMaybe"] = applicativeMaybe;
  exports["bindMaybe"] = bindMaybe;
})(PS["Data.Maybe"] = PS["Data.Maybe"] || {});
(function(exports) {
  // Generated by purs version 0.11.3
  "use strict";
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Prelude = PS["Prelude"];        
  var Newtype = function (unwrap, wrap) {
      this.unwrap = unwrap;
      this.wrap = wrap;
  };
  var wrap = function (dict) {
      return dict.wrap;
  };
  var unwrap = function (dict) {
      return dict.unwrap;
  };
  var alaF = function (dictFunctor) {
      return function (dictFunctor1) {
          return function (dictNewtype) {
              return function (dictNewtype1) {
                  return function (v) {
                      return function (f) {
                          return function ($64) {
                              return Data_Functor.map(dictFunctor1)(unwrap(dictNewtype1))(f(Data_Functor.map(dictFunctor)(wrap(dictNewtype))($64)));
                          };
                      };
                  };
              };
          };
      };
  };
  exports["Newtype"] = Newtype;
  exports["alaF"] = alaF;
  exports["unwrap"] = unwrap;
  exports["wrap"] = wrap;
})(PS["Data.Newtype"] = PS["Data.Newtype"] || {});
(function(exports) {
  // Generated by purs version 0.11.3
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Comonad = PS["Control.Comonad"];
  var Control_Extend = PS["Control.Extend"];
  var Control_Monad = PS["Control.Monad"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Functor_Invariant = PS["Data.Functor.Invariant"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var Prelude = PS["Prelude"];        
  var Conj = function (x) {
      return x;
  };
  var semigroupConj = function (dictHeytingAlgebra) {
      return new Data_Semigroup.Semigroup(function (v) {
          return function (v1) {
              return Data_HeytingAlgebra.conj(dictHeytingAlgebra)(v)(v1);
          };
      });
  };
  var newtypeConj = new Data_Newtype.Newtype(function (n) {
      return n;
  }, Conj);
  var monoidConj = function (dictHeytingAlgebra) {
      return new Data_Monoid.Monoid(function () {
          return semigroupConj(dictHeytingAlgebra);
      }, Data_HeytingAlgebra.tt(dictHeytingAlgebra));
  };
  exports["Conj"] = Conj;
  exports["newtypeConj"] = newtypeConj;
  exports["semigroupConj"] = semigroupConj;
  exports["monoidConj"] = monoidConj;
})(PS["Data.Monoid.Conj"] = PS["Data.Monoid.Conj"] || {});
(function(exports) {
  // Generated by purs version 0.11.3
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Comonad = PS["Control.Comonad"];
  var Control_Extend = PS["Control.Extend"];
  var Control_Monad = PS["Control.Monad"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Functor_Invariant = PS["Data.Functor.Invariant"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var Prelude = PS["Prelude"];        
  var Disj = function (x) {
      return x;
  };
  var semigroupDisj = function (dictHeytingAlgebra) {
      return new Data_Semigroup.Semigroup(function (v) {
          return function (v1) {
              return Data_HeytingAlgebra.disj(dictHeytingAlgebra)(v)(v1);
          };
      });
  };
  var newtypeDisj = new Data_Newtype.Newtype(function (n) {
      return n;
  }, Disj);
  var monoidDisj = function (dictHeytingAlgebra) {
      return new Data_Monoid.Monoid(function () {
          return semigroupDisj(dictHeytingAlgebra);
      }, Data_HeytingAlgebra.ff(dictHeytingAlgebra));
  };
  exports["Disj"] = Disj;
  exports["newtypeDisj"] = newtypeDisj;
  exports["semigroupDisj"] = semigroupDisj;
  exports["monoidDisj"] = monoidDisj;
})(PS["Data.Monoid.Disj"] = PS["Data.Monoid.Disj"] || {});
(function(exports) {
  // Generated by purs version 0.11.3
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Comonad = PS["Control.Comonad"];
  var Control_Extend = PS["Control.Extend"];
  var Control_Monad = PS["Control.Monad"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Functor_Invariant = PS["Data.Functor.Invariant"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];
  var Prelude = PS["Prelude"];        
  var Dual = function (x) {
      return x;
  };
  var semigroupDual = function (dictSemigroup) {
      return new Data_Semigroup.Semigroup(function (v) {
          return function (v1) {
              return Data_Semigroup.append(dictSemigroup)(v1)(v);
          };
      });
  };
  var newtypeDual = new Data_Newtype.Newtype(function (n) {
      return n;
  }, Dual);
  var monoidDual = function (dictMonoid) {
      return new Data_Monoid.Monoid(function () {
          return semigroupDual(dictMonoid.Semigroup0());
      }, Data_Monoid.mempty(dictMonoid));
  };
  exports["Dual"] = Dual;
  exports["newtypeDual"] = newtypeDual;
  exports["semigroupDual"] = semigroupDual;
  exports["monoidDual"] = monoidDual;
})(PS["Data.Monoid.Dual"] = PS["Data.Monoid.Dual"] || {});
(function(exports) {
  // Generated by purs version 0.11.3
  "use strict";
  var Control_Category = PS["Control.Category"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Functor_Invariant = PS["Data.Functor.Invariant"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Prelude = PS["Prelude"];        
  var Endo = function (x) {
      return x;
  };
  var semigroupEndo = new Data_Semigroup.Semigroup(function (v) {
      return function (v1) {
          return function ($11) {
              return v(v1($11));
          };
      };
  });
  var newtypeEndo = new Data_Newtype.Newtype(function (n) {
      return n;
  }, Endo);
  var monoidEndo = new Data_Monoid.Monoid(function () {
      return semigroupEndo;
  }, Control_Category.id(Control_Category.categoryFn));
  exports["Endo"] = Endo;
  exports["newtypeEndo"] = newtypeEndo;
  exports["semigroupEndo"] = semigroupEndo;
  exports["monoidEndo"] = monoidEndo;
})(PS["Data.Monoid.Endo"] = PS["Data.Monoid.Endo"] || {});
(function(exports) {
  // Generated by purs version 0.11.3
  "use strict";
  var $foreign = PS["Data.Foldable"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Category = PS["Control.Category"];
  var Control_Plus = PS["Control.Plus"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Maybe_First = PS["Data.Maybe.First"];
  var Data_Maybe_Last = PS["Data.Maybe.Last"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Monoid_Additive = PS["Data.Monoid.Additive"];
  var Data_Monoid_Conj = PS["Data.Monoid.Conj"];
  var Data_Monoid_Disj = PS["Data.Monoid.Disj"];
  var Data_Monoid_Dual = PS["Data.Monoid.Dual"];
  var Data_Monoid_Endo = PS["Data.Monoid.Endo"];
  var Data_Monoid_Multiplicative = PS["Data.Monoid.Multiplicative"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];        
  var Foldable = function (foldMap, foldl, foldr) {
      this.foldMap = foldMap;
      this.foldl = foldl;
      this.foldr = foldr;
  };
  var foldr = function (dict) {
      return dict.foldr;
  };
  var traverse_ = function (dictApplicative) {
      return function (dictFoldable) {
          return function (f) {
              return foldr(dictFoldable)(function ($181) {
                  return Control_Apply.applySecond(dictApplicative.Apply0())(f($181));
              })(Control_Applicative.pure(dictApplicative)(Data_Unit.unit));
          };
      };
  };
  var for_ = function (dictApplicative) {
      return function (dictFoldable) {
          return Data_Function.flip(traverse_(dictApplicative)(dictFoldable));
      };
  };
  var foldl = function (dict) {
      return dict.foldl;
  };
  var intercalate = function (dictFoldable) {
      return function (dictMonoid) {
          return function (sep) {
              return function (xs) {
                  var go = function (v) {
                      return function (x) {
                          if (v.init) {
                              return {
                                  init: false, 
                                  acc: x
                              };
                          };
                          return {
                              init: false, 
                              acc: Data_Semigroup.append(dictMonoid.Semigroup0())(v.acc)(Data_Semigroup.append(dictMonoid.Semigroup0())(sep)(x))
                          };
                      };
                  };
                  return (foldl(dictFoldable)(go)({
                      init: true, 
                      acc: Data_Monoid.mempty(dictMonoid)
                  })(xs)).acc;
              };
          };
      };
  };
  var minimumBy = function (dictFoldable) {
      return function (cmp) {
          var min$prime = function (v) {
              return function (v1) {
                  if (v instanceof Data_Maybe.Nothing) {
                      return new Data_Maybe.Just(v1);
                  };
                  if (v instanceof Data_Maybe.Just) {
                      return new Data_Maybe.Just((function () {
                          var $108 = Data_Eq.eq(Data_Ordering.eqOrdering)(cmp(v.value0)(v1))(Data_Ordering.LT.value);
                          if ($108) {
                              return v.value0;
                          };
                          return v1;
                      })());
                  };
                  throw new Error("Failed pattern match at Data.Foldable line 360, column 3 - line 360, column 27: " + [ v.constructor.name, v1.constructor.name ]);
              };
          };
          return foldl(dictFoldable)(min$prime)(Data_Maybe.Nothing.value);
      };
  }; 
  var foldableMaybe = new Foldable(function (dictMonoid) {
      return function (f) {
          return function (v) {
              if (v instanceof Data_Maybe.Nothing) {
                  return Data_Monoid.mempty(dictMonoid);
              };
              if (v instanceof Data_Maybe.Just) {
                  return f(v.value0);
              };
              throw new Error("Failed pattern match at Data.Foldable line 133, column 3 - line 133, column 30: " + [ f.constructor.name, v.constructor.name ]);
          };
      };
  }, function (v) {
      return function (z) {
          return function (v1) {
              if (v1 instanceof Data_Maybe.Nothing) {
                  return z;
              };
              if (v1 instanceof Data_Maybe.Just) {
                  return v(z)(v1.value0);
              };
              throw new Error("Failed pattern match at Data.Foldable line 131, column 3 - line 131, column 25: " + [ v.constructor.name, z.constructor.name, v1.constructor.name ]);
          };
      };
  }, function (v) {
      return function (z) {
          return function (v1) {
              if (v1 instanceof Data_Maybe.Nothing) {
                  return z;
              };
              if (v1 instanceof Data_Maybe.Just) {
                  return v(v1.value0)(z);
              };
              throw new Error("Failed pattern match at Data.Foldable line 129, column 3 - line 129, column 25: " + [ v.constructor.name, z.constructor.name, v1.constructor.name ]);
          };
      };
  });
  var foldMapDefaultR = function (dictFoldable) {
      return function (dictMonoid) {
          return function (f) {
              return foldr(dictFoldable)(function (x) {
                  return function (acc) {
                      return Data_Semigroup.append(dictMonoid.Semigroup0())(f(x))(acc);
                  };
              })(Data_Monoid.mempty(dictMonoid));
          };
      };
  };
  var foldableArray = new Foldable(function (dictMonoid) {
      return foldMapDefaultR(foldableArray)(dictMonoid);
  }, $foreign.foldlArray, $foreign.foldrArray);
  var foldMap = function (dict) {
      return dict.foldMap;
  }; 
  var foldlDefault = function (dictFoldable) {
      return function (c) {
          return function (u) {
              return function (xs) {
                  return Data_Newtype.unwrap(Data_Monoid_Endo.newtypeEndo)(Data_Newtype.unwrap(Data_Monoid_Dual.newtypeDual)(foldMap(dictFoldable)(Data_Monoid_Dual.monoidDual(Data_Monoid_Endo.monoidEndo))(function ($182) {
                      return Data_Monoid_Dual.Dual(Data_Monoid_Endo.Endo(Data_Function.flip(c)($182)));
                  })(xs)))(u);
              };
          };
      };
  };
  var foldrDefault = function (dictFoldable) {
      return function (c) {
          return function (u) {
              return function (xs) {
                  return Data_Newtype.unwrap(Data_Monoid_Endo.newtypeEndo)(foldMap(dictFoldable)(Data_Monoid_Endo.monoidEndo)(function ($183) {
                      return Data_Monoid_Endo.Endo(c($183));
                  })(xs))(u);
              };
          };
      };
  };
  var fold = function (dictFoldable) {
      return function (dictMonoid) {
          return foldMap(dictFoldable)(dictMonoid)(Control_Category.id(Control_Category.categoryFn));
      };
  };
  var any = function (dictFoldable) {
      return function (dictHeytingAlgebra) {
          return Data_Newtype.alaF(Data_Functor.functorFn)(Data_Functor.functorFn)(Data_Monoid_Disj.newtypeDisj)(Data_Monoid_Disj.newtypeDisj)(Data_Monoid_Disj.Disj)(foldMap(dictFoldable)(Data_Monoid_Disj.monoidDisj(dictHeytingAlgebra)));
      };
  };
  var elem = function (dictFoldable) {
      return function (dictEq) {
          return function ($184) {
              return any(dictFoldable)(Data_HeytingAlgebra.heytingAlgebraBoolean)(Data_Eq.eq(dictEq)($184));
          };
      };
  };
  var notElem = function (dictFoldable) {
      return function (dictEq) {
          return function (x) {
              return function ($185) {
                  return !elem(dictFoldable)(dictEq)(x)($185);
              };
          };
      };
  };
  var all = function (dictFoldable) {
      return function (dictHeytingAlgebra) {
          return Data_Newtype.alaF(Data_Functor.functorFn)(Data_Functor.functorFn)(Data_Monoid_Conj.newtypeConj)(Data_Monoid_Conj.newtypeConj)(Data_Monoid_Conj.Conj)(foldMap(dictFoldable)(Data_Monoid_Conj.monoidConj(dictHeytingAlgebra)));
      };
  };
  exports["Foldable"] = Foldable;
  exports["all"] = all;
  exports["any"] = any;
  exports["elem"] = elem;
  exports["fold"] = fold;
  exports["foldMap"] = foldMap;
  exports["foldMapDefaultR"] = foldMapDefaultR;
  exports["foldl"] = foldl;
  exports["foldlDefault"] = foldlDefault;
  exports["foldr"] = foldr;
  exports["foldrDefault"] = foldrDefault;
  exports["for_"] = for_;
  exports["intercalate"] = intercalate;
  exports["minimumBy"] = minimumBy;
  exports["notElem"] = notElem;
  exports["traverse_"] = traverse_;
  exports["foldableArray"] = foldableArray;
  exports["foldableMaybe"] = foldableMaybe;
})(PS["Data.Foldable"] = PS["Data.Foldable"] || {});
(function(exports) {
    "use strict";

  // jshint maxparams: 3

  exports.traverseArrayImpl = function () {
    function Cont(fn) {
      this.fn = fn;
    }

    var emptyList = {};

    var ConsCell = function (head, tail) {
      this.head = head;
      this.tail = tail;
    };

    function consList(x) {
      return function (xs) {
        return new ConsCell(x, xs);
      };
    }

    function listToArray(list) {
      var arr = [];
      var xs = list;
      while (xs !== emptyList) {
        arr.push(xs.head);
        xs = xs.tail;
      }
      return arr;
    }

    return function (apply) {
      return function (map) {
        return function (pure) {
          return function (f) {
            var buildFrom = function (x, ys) {
              return apply(map(consList)(f(x)))(ys);
            };

            var go = function (acc, currentLen, xs) {
              if (currentLen === 0) {
                return acc;
              } else {
                var last = xs[currentLen - 1];
                return new Cont(function () {
                  return go(buildFrom(last, acc), currentLen - 1, xs);
                });
              }
            };

            return function (array) {
              var result = go(pure(emptyList), array.length, array);
              while (result instanceof Cont) {
                result = result.fn();
              }

              return map(listToArray)(result);
            };
          };
        };
      };
    };
  }();
})(PS["Data.Traversable"] = PS["Data.Traversable"] || {});
(function(exports) {
  // Generated by purs version 0.11.3
  "use strict";
  var $foreign = PS["Data.Traversable"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Category = PS["Control.Category"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Maybe_First = PS["Data.Maybe.First"];
  var Data_Maybe_Last = PS["Data.Maybe.Last"];
  var Data_Monoid_Additive = PS["Data.Monoid.Additive"];
  var Data_Monoid_Conj = PS["Data.Monoid.Conj"];
  var Data_Monoid_Disj = PS["Data.Monoid.Disj"];
  var Data_Monoid_Dual = PS["Data.Monoid.Dual"];
  var Data_Monoid_Multiplicative = PS["Data.Monoid.Multiplicative"];
  var Data_Traversable_Accum = PS["Data.Traversable.Accum"];
  var Data_Traversable_Accum_Internal = PS["Data.Traversable.Accum.Internal"];
  var Prelude = PS["Prelude"];        
  var Traversable = function (Foldable1, Functor0, sequence, traverse) {
      this.Foldable1 = Foldable1;
      this.Functor0 = Functor0;
      this.sequence = sequence;
      this.traverse = traverse;
  };
  var traverse = function (dict) {
      return dict.traverse;
  }; 
  var sequenceDefault = function (dictTraversable) {
      return function (dictApplicative) {
          return traverse(dictTraversable)(dictApplicative)(Control_Category.id(Control_Category.categoryFn));
      };
  };
  var traversableArray = new Traversable(function () {
      return Data_Foldable.foldableArray;
  }, function () {
      return Data_Functor.functorArray;
  }, function (dictApplicative) {
      return sequenceDefault(traversableArray)(dictApplicative);
  }, function (dictApplicative) {
      return $foreign.traverseArrayImpl(Control_Apply.apply(dictApplicative.Apply0()))(Data_Functor.map((dictApplicative.Apply0()).Functor0()))(Control_Applicative.pure(dictApplicative));
  });
  var sequence = function (dict) {
      return dict.sequence;
  };
  exports["Traversable"] = Traversable;
  exports["sequence"] = sequence;
  exports["sequenceDefault"] = sequenceDefault;
  exports["traverse"] = traverse;
  exports["traversableArray"] = traversableArray;
})(PS["Data.Traversable"] = PS["Data.Traversable"] || {});
(function(exports) {
  // Generated by purs version 0.11.3
  "use strict";
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Category = PS["Control.Category"];
  var Control_Plus = PS["Control.Plus"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Functor = PS["Data.Functor"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];
  var Data_Traversable = PS["Data.Traversable"];
  var Prelude = PS["Prelude"];        
  var NonEmpty = (function () {
      function NonEmpty(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      NonEmpty.create = function (value0) {
          return function (value1) {
              return new NonEmpty(value0, value1);
          };
      };
      return NonEmpty;
  })();
  var singleton = function (dictPlus) {
      return function (a) {
          return new NonEmpty(a, Control_Plus.empty(dictPlus));
      };
  };
  var showNonEmpty = function (dictShow) {
      return function (dictShow1) {
          return new Data_Show.Show(function (v) {
              return "(NonEmpty " + (Data_Show.show(dictShow)(v.value0) + (" " + (Data_Show.show(dictShow1)(v.value1) + ")")));
          });
      };
  };
  exports["NonEmpty"] = NonEmpty;
  exports["singleton"] = singleton;
  exports["showNonEmpty"] = showNonEmpty;
})(PS["Data.NonEmpty"] = PS["Data.NonEmpty"] || {});
(function(exports) {
  // Generated by purs version 0.11.3
  "use strict";
  var Control_Category = PS["Control.Category"];        
  var Bifunctor = function (bimap) {
      this.bimap = bimap;
  };
  var bimap = function (dict) {
      return dict.bimap;
  };
  var lmap = function (dictBifunctor) {
      return function (f) {
          return bimap(dictBifunctor)(f)(Control_Category.id(Control_Category.categoryFn));
      };
  };
  exports["Bifunctor"] = Bifunctor;
  exports["bimap"] = bimap;
  exports["lmap"] = lmap;
})(PS["Data.Bifunctor"] = PS["Data.Bifunctor"] || {});
(function(exports) {
  // Generated by purs version 0.11.3
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Biapplicative = PS["Control.Biapplicative"];
  var Control_Biapply = PS["Control.Biapply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Comonad = PS["Control.Comonad"];
  var Control_Extend = PS["Control.Extend"];
  var Control_Lazy = PS["Control.Lazy"];
  var Control_Monad = PS["Control.Monad"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Bifoldable = PS["Data.Bifoldable"];
  var Data_Bifunctor = PS["Data.Bifunctor"];
  var Data_Bitraversable = PS["Data.Bitraversable"];
  var Data_BooleanAlgebra = PS["Data.BooleanAlgebra"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_CommutativeRing = PS["Data.CommutativeRing"];
  var Data_Distributive = PS["Data.Distributive"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Functor_Invariant = PS["Data.Functor.Invariant"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Maybe_First = PS["Data.Maybe.First"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];
  var Type_Equality = PS["Type.Equality"];        
  var Tuple = (function () {
      function Tuple(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Tuple.create = function (value0) {
          return function (value1) {
              return new Tuple(value0, value1);
          };
      };
      return Tuple;
  })();
  var snd = function (v) {
      return v.value1;
  };                                                                                                    
  var fst = function (v) {
      return v.value0;
  };
  exports["Tuple"] = Tuple;
  exports["fst"] = fst;
  exports["snd"] = snd;
})(PS["Data.Tuple"] = PS["Data.Tuple"] || {});
(function(exports) {
  // Generated by purs version 0.11.3
  "use strict";
  var $foreign = PS["Data.Array"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Category = PS["Control.Category"];
  var Control_Lazy = PS["Control.Lazy"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_Rec_Class = PS["Control.Monad.Rec.Class"];
  var Control_Monad_ST = PS["Control.Monad.ST"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Array_ST = PS["Data.Array.ST"];
  var Data_Array_ST_Iterator = PS["Data.Array.ST.Iterator"];
  var Data_Boolean = PS["Data.Boolean"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_NonEmpty = PS["Data.NonEmpty"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unfoldable = PS["Data.Unfoldable"];
  var Partial_Unsafe = PS["Partial.Unsafe"];
  var Prelude = PS["Prelude"];
  var sortBy = function (comp) {
      return function (xs) {
          var comp$prime = function (x) {
              return function (y) {
                  var v = comp(x)(y);
                  if (v instanceof Data_Ordering.GT) {
                      return 1;
                  };
                  if (v instanceof Data_Ordering.EQ) {
                      return 0;
                  };
                  if (v instanceof Data_Ordering.LT) {
                      return -1 | 0;
                  };
                  throw new Error("Failed pattern match at Data.Array line 475, column 15 - line 480, column 1: " + [ v.constructor.name ]);
              };
          };
          return $foreign.sortImpl(comp$prime)(xs);
      };
  };
  var $$null = function (xs) {
      return $foreign.length(xs) === 0;
  };
  var index = $foreign.indexImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var fromFoldable = function (dictFoldable) {
      return $foreign.fromFoldableImpl(Data_Foldable.foldr(dictFoldable));
  };
  exports["fromFoldable"] = fromFoldable;
  exports["index"] = index;
  exports["null"] = $$null;
  exports["sortBy"] = sortBy;
  exports["length"] = $foreign.length;
  exports["slice"] = $foreign.slice;
  exports["snoc"] = $foreign.snoc;
  exports["take"] = $foreign.take;
})(PS["Data.Array"] = PS["Data.Array"] || {});
(function(exports) {
  // Generated by purs version 0.11.3
  "use strict";
  var Control_Alt = PS["Control.Alt"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Extend = PS["Control.Extend"];
  var Control_Monad = PS["Control.Monad"];
  var Data_Bifoldable = PS["Data.Bifoldable"];
  var Data_Bifunctor = PS["Data.Bifunctor"];
  var Data_Bitraversable = PS["Data.Bitraversable"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Functor_Invariant = PS["Data.Functor.Invariant"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var Data_Traversable = PS["Data.Traversable"];
  var Prelude = PS["Prelude"];        
  var Left = (function () {
      function Left(value0) {
          this.value0 = value0;
      };
      Left.create = function (value0) {
          return new Left(value0);
      };
      return Left;
  })();
  var Right = (function () {
      function Right(value0) {
          this.value0 = value0;
      };
      Right.create = function (value0) {
          return new Right(value0);
      };
      return Right;
  })();
  var functorEither = new Data_Functor.Functor(function (v) {
      return function (v1) {
          if (v1 instanceof Left) {
              return new Left(v1.value0);
          };
          if (v1 instanceof Right) {
              return new Right(v(v1.value0));
          };
          throw new Error("Failed pattern match at Data.Either line 37, column 3 - line 37, column 26: " + [ v.constructor.name, v1.constructor.name ]);
      };
  });                                                                                                     
  var fromRight = function (dictPartial) {
      return function (v) {
          var __unused = function (dictPartial1) {
              return function ($dollar62) {
                  return $dollar62;
              };
          };
          return __unused(dictPartial)((function () {
              if (v instanceof Right) {
                  return v.value0;
              };
              throw new Error("Failed pattern match at Data.Either line 253, column 1 - line 253, column 24: " + [ v.constructor.name ]);
          })());
      };
  };
  var either = function (v) {
      return function (v1) {
          return function (v2) {
              if (v2 instanceof Left) {
                  return v(v2.value0);
              };
              if (v2 instanceof Right) {
                  return v1(v2.value0);
              };
              throw new Error("Failed pattern match at Data.Either line 230, column 1 - line 230, column 26: " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
          };
      };
  };
  var bifunctorEither = new Data_Bifunctor.Bifunctor(function (v) {
      return function (v1) {
          return function (v2) {
              if (v2 instanceof Left) {
                  return new Left(v(v2.value0));
              };
              if (v2 instanceof Right) {
                  return new Right(v1(v2.value0));
              };
              throw new Error("Failed pattern match at Data.Either line 44, column 3 - line 44, column 34: " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
          };
      };
  });
  var applyEither = new Control_Apply.Apply(function () {
      return functorEither;
  }, function (v) {
      return function (v1) {
          if (v instanceof Left) {
              return new Left(v.value0);
          };
          if (v instanceof Right) {
              return Data_Functor.map(functorEither)(v.value0)(v1);
          };
          throw new Error("Failed pattern match at Data.Either line 80, column 3 - line 80, column 28: " + [ v.constructor.name, v1.constructor.name ]);
      };
  });
  var bindEither = new Control_Bind.Bind(function () {
      return applyEither;
  }, either(function (e) {
      return function (v) {
          return new Left(e);
      };
  })(function (a) {
      return function (f) {
          return f(a);
      };
  }));
  var applicativeEither = new Control_Applicative.Applicative(function () {
      return applyEither;
  }, Right.create);
  exports["Left"] = Left;
  exports["Right"] = Right;
  exports["either"] = either;
  exports["fromRight"] = fromRight;
  exports["functorEither"] = functorEither;
  exports["bifunctorEither"] = bifunctorEither;
  exports["applyEither"] = applyEither;
  exports["applicativeEither"] = applicativeEither;
  exports["bindEither"] = bindEither;
})(PS["Data.Either"] = PS["Data.Either"] || {});
(function(exports) {
    "use strict";

  // module Data.Int

  exports.fromNumberImpl = function (just) {
    return function (nothing) {
      return function (n) {
        /* jshint bitwise: false */
        return (n | 0) === n ? just(n) : nothing;
      };
    };
  };

  exports.toNumber = function (n) {
    return n;
  };

  exports.fromStringAsImpl = function (just) {
    return function (nothing) {
      return function (radix) {
        var digits;
        if (radix < 11) {
          digits = "[0-" + (radix - 1).toString() + "]";
        } else if (radix === 11) {
          digits = "[0-9a]";
        } else {
          digits = "[0-9a-" + String.fromCharCode(86 + radix) + "]";
        }
        var pattern = new RegExp("^[\\+\\-]?" + digits + "+$", "i");

        return function (s) {
          /* jshint bitwise: false */
          if (pattern.test(s)) {
            var i = parseInt(s, radix);
            return (i | 0) === i ? just(i) : nothing;
          } else {
            return nothing;
          }
        };
      };
    };
  };

  exports.toStringAs = function (radix) {
    return function (i) {
      return i.toString(radix);
    };
  };
})(PS["Data.Int"] = PS["Data.Int"] || {});
(function(exports) {
  /* globals exports */
  "use strict";         

  exports.infinity = Infinity;
})(PS["Global"] = PS["Global"] || {});
(function(exports) {
  // Generated by purs version 0.11.3
  "use strict";
  var $foreign = PS["Global"];
  exports["infinity"] = $foreign.infinity;
})(PS["Global"] = PS["Global"] || {});
(function(exports) {
    "use strict";

  // module Math

  exports.abs = Math.abs;  

  exports.atan2 = function (y) {
    return function (x) {
      return Math.atan2(y, x);
    };
  };                       

  exports.cos = Math.cos;

  exports.pow = function (n) {
    return function (p) {
      return Math.pow(n, p);
    };
  };

  exports.remainder = function (n) {
    return function (m) {
      return n % m;
    };
  };

  exports.round = Math.round;

  exports.sin = Math.sin;

  exports.sqrt = Math.sqrt;    

  exports.pi = Math.PI;
})(PS["Math"] = PS["Math"] || {});
(function(exports) {
  // Generated by purs version 0.11.3
  "use strict";
  var $foreign = PS["Math"];
  exports["abs"] = $foreign.abs;
  exports["atan2"] = $foreign.atan2;
  exports["cos"] = $foreign.cos;
  exports["pi"] = $foreign.pi;
  exports["pow"] = $foreign.pow;
  exports["remainder"] = $foreign.remainder;
  exports["round"] = $foreign.round;
  exports["sin"] = $foreign.sin;
  exports["sqrt"] = $foreign.sqrt;
})(PS["Math"] = PS["Math"] || {});
(function(exports) {
  // Generated by purs version 0.11.3
  "use strict";
  var $foreign = PS["Data.Int"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Boolean = PS["Data.Boolean"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_Eq = PS["Data.Eq"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Int_Bits = PS["Data.Int.Bits"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Show = PS["Data.Show"];
  var Global = PS["Global"];
  var $$Math = PS["Math"];
  var Prelude = PS["Prelude"];
  var hexadecimal = 16;
  var fromStringAs = $foreign.fromStringAsImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var fromString = fromStringAs(10);
  var fromNumber = $foreign.fromNumberImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var unsafeClamp = function (x) {
      if (x === Global.infinity) {
          return 0;
      };
      if (x === -Global.infinity) {
          return 0;
      };
      if (x >= $foreign.toNumber(Data_Bounded.top(Data_Bounded.boundedInt))) {
          return Data_Bounded.top(Data_Bounded.boundedInt);
      };
      if (x <= $foreign.toNumber(Data_Bounded.bottom(Data_Bounded.boundedInt))) {
          return Data_Bounded.bottom(Data_Bounded.boundedInt);
      };
      if (Data_Boolean.otherwise) {
          return Data_Maybe.fromMaybe(0)(fromNumber(x));
      };
      throw new Error("Failed pattern match at Data.Int line 65, column 1 - line 70, column 43: " + [ x.constructor.name ]);
  };
  var round = function ($13) {
      return unsafeClamp($$Math.round($13));
  };
  exports["fromNumber"] = fromNumber;
  exports["fromString"] = fromString;
  exports["fromStringAs"] = fromStringAs;
  exports["hexadecimal"] = hexadecimal;
  exports["round"] = round;
  exports["toNumber"] = $foreign.toNumber;
  exports["toStringAs"] = $foreign.toStringAs;
})(PS["Data.Int"] = PS["Data.Int"] || {});
(function(exports) {
    "use strict";

  exports._charAt = function (just) {
    return function (nothing) {
      return function (i) {
        return function (s) {
          return i >= 0 && i < s.length ? just(s.charAt(i)) : nothing;
        };
      };
    };
  };

  exports.singleton = function (c) {
    return c;
  };

  exports.fromCharArray = function (a) {
    return a.join("");
  };

  exports._indexOf = function (just) {
    return function (nothing) {
      return function (x) {
        return function (s) {
          var i = s.indexOf(x);
          return i === -1 ? nothing : just(i);
        };
      };
    };
  };

  exports.length = function (s) {
    return s.length;
  };

  exports.replace = function (s1) {
    return function (s2) {
      return function (s3) {
        return s3.replace(s1, s2);
      };
    };
  };

  exports.take = function (n) {
    return function (s) {
      return s.substr(0, n);
    };
  };

  exports.drop = function (n) {
    return function (s) {
      return s.substring(n);
    };
  };

  exports.count = function (p) {
    return function (s) {
      var i = 0;
      while (i < s.length && p(s.charAt(i))) i++;
      return i;
    };
  };

  exports.split = function (sep) {
    return function (s) {
      return s.split(sep);
    };
  };

  exports.toCharArray = function (s) {
    return s.split("");
  };

  exports.trim = function (s) {
    return s.trim();
  };

  exports.joinWith = function (s) {
    return function (xs) {
      return xs.join(s);
    };
  };
})(PS["Data.String"] = PS["Data.String"] || {});
(function(exports) {
    "use strict";

  exports.charAt = function (i) {
    return function (s) {
      if (i >= 0 && i < s.length) return s.charAt(i);
      throw new Error("Data.String.Unsafe.charAt: Invalid index.");
    };
  };
})(PS["Data.String.Unsafe"] = PS["Data.String.Unsafe"] || {});
(function(exports) {
  // Generated by purs version 0.11.3
  "use strict";
  var $foreign = PS["Data.String.Unsafe"];
  exports["charAt"] = $foreign.charAt;
})(PS["Data.String.Unsafe"] = PS["Data.String.Unsafe"] || {});
(function(exports) {
  // Generated by purs version 0.11.3
  "use strict";
  var $foreign = PS["Data.String"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Function = PS["Data.Function"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var Data_String_Unsafe = PS["Data.String.Unsafe"];
  var Prelude = PS["Prelude"];
  var Pattern = function (x) {
      return x;
  };
  var uncons = function (v) {
      if (v === "") {
          return Data_Maybe.Nothing.value;
      };
      return new Data_Maybe.Just({
          head: Data_String_Unsafe.charAt(0)(v), 
          tail: $foreign.drop(1)(v)
      });
  }; 
  var $$null = function (s) {
      return s === "";
  };              
  var newtypePattern = new Data_Newtype.Newtype(function (n) {
      return n;
  }, Pattern);                                                                                
  var indexOf = $foreign._indexOf(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var dropWhile = function (p) {
      return function (s) {
          return $foreign.drop($foreign.count(p)(s))(s);
      };
  };
  var contains = function (pat) {
      return function ($48) {
          return Data_Maybe.isJust(indexOf(pat)($48));
      };
  };                                                                                      
  var charAt = $foreign._charAt(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  exports["Pattern"] = Pattern;
  exports["charAt"] = charAt;
  exports["contains"] = contains;
  exports["dropWhile"] = dropWhile;
  exports["indexOf"] = indexOf;
  exports["null"] = $$null;
  exports["uncons"] = uncons;
  exports["newtypePattern"] = newtypePattern;
  exports["count"] = $foreign.count;
  exports["drop"] = $foreign.drop;
  exports["fromCharArray"] = $foreign.fromCharArray;
  exports["joinWith"] = $foreign.joinWith;
  exports["length"] = $foreign.length;
  exports["replace"] = $foreign.replace;
  exports["singleton"] = $foreign.singleton;
  exports["split"] = $foreign.split;
  exports["take"] = $foreign.take;
  exports["toCharArray"] = $foreign.toCharArray;
  exports["trim"] = $foreign.trim;
})(PS["Data.String"] = PS["Data.String"] || {});
(function(exports) {
    "use strict";

  exports["regex'"] = function (left) {
    return function (right) {
      return function (s1) {
        return function (s2) {
          try {
            return right(new RegExp(s1, s2));
          } catch (e) {
            return left(e.message);
          }
        };
      };
    };
  };

  exports.test = function (r) {
    return function (s) {
      var lastIndex = r.lastIndex;
      var result = r.test(s);
      r.lastIndex = lastIndex;
      return result;
    };
  };

  exports._match = function (just) {
    return function (nothing) {
      return function (r) {
        return function (s) {
          var m = s.match(r);
          if (m == null) {
            return nothing;
          } else {
            var list = [];
            for (var i = 0; i < m.length; i++) {
              list.push(m[i] == null ? nothing : just(m[i]));
            }
            return just(list);
          }
        };
      };
    };
  };
})(PS["Data.String.Regex"] = PS["Data.String.Regex"] || {});
(function(exports) {
  // Generated by purs version 0.11.3
  "use strict";
  var Control_MonadPlus = PS["Control.MonadPlus"];
  var Control_MonadZero = PS["Control.MonadZero"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Functor = PS["Data.Functor"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];
  var Data_String = PS["Data.String"];
  var Prelude = PS["Prelude"];        
  var RegexFlags = (function () {
      function RegexFlags(value0) {
          this.value0 = value0;
      };
      RegexFlags.create = function (value0) {
          return new RegexFlags(value0);
      };
      return RegexFlags;
  })();
  var noFlags = new RegexFlags({
      global: false, 
      ignoreCase: false, 
      multiline: false, 
      sticky: false, 
      unicode: false
  });
  exports["RegexFlags"] = RegexFlags;
  exports["noFlags"] = noFlags;
})(PS["Data.String.Regex.Flags"] = PS["Data.String.Regex.Flags"] || {});
(function(exports) {
  // Generated by purs version 0.11.3
  "use strict";
  var $foreign = PS["Data.String.Regex"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Either = PS["Data.Either"];
  var Data_Function = PS["Data.Function"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];
  var Data_String = PS["Data.String"];
  var Data_String_Regex_Flags = PS["Data.String.Regex.Flags"];
  var Prelude = PS["Prelude"];                                                    
  var renderFlags = function (v) {
      return (function () {
          if (v.value0.global) {
              return "g";
          };
          return "";
      })() + ((function () {
          if (v.value0.ignoreCase) {
              return "i";
          };
          return "";
      })() + ((function () {
          if (v.value0.multiline) {
              return "m";
          };
          return "";
      })() + ((function () {
          if (v.value0.sticky) {
              return "y";
          };
          return "";
      })() + (function () {
          if (v.value0.unicode) {
              return "u";
          };
          return "";
      })())));
  };
  var regex = function (s) {
      return function (f) {
          return $foreign["regex'"](Data_Either.Left.create)(Data_Either.Right.create)(s)(renderFlags(f));
      };
  };
  var parseFlags = function (s) {
      return new Data_String_Regex_Flags.RegexFlags({
          global: Data_String.contains("g")(s), 
          ignoreCase: Data_String.contains("i")(s), 
          multiline: Data_String.contains("m")(s), 
          sticky: Data_String.contains("y")(s), 
          unicode: Data_String.contains("u")(s)
      });
  };
  var match = $foreign._match(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  exports["match"] = match;
  exports["parseFlags"] = parseFlags;
  exports["regex"] = regex;
  exports["renderFlags"] = renderFlags;
  exports["test"] = $foreign.test;
})(PS["Data.String.Regex"] = PS["Data.String.Regex"] || {});
(function(exports) {
  // Generated by purs version 0.11.3
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Array = PS["Data.Array"];
  var Data_Boolean = PS["Data.Boolean"];
  var Data_Either = PS["Data.Either"];
  var Data_Eq = PS["Data.Eq"];
  var Data_EuclideanRing = PS["Data.EuclideanRing"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Int = PS["Data.Int"];
  var Data_Int_Bits = PS["Data.Int.Bits"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var Data_String = PS["Data.String"];
  var Data_String_Regex = PS["Data.String.Regex"];
  var $$Math = PS["Math"];
  var Partial_Unsafe = PS["Partial.Unsafe"];
  var Prelude = PS["Prelude"];
  var RGB = (function () {
      function RGB() {

      };
      RGB.value = new RGB();
      return RGB;
  })();
  var HSL = (function () {
      function HSL() {

      };
      HSL.value = new HSL();
      return HSL;
  })();
  var LCh = (function () {
      function LCh() {

      };
      LCh.value = new LCh();
      return LCh;
  })();
  var Lab = (function () {
      function Lab() {

      };
      Lab.value = new Lab();
      return Lab;
  })();
  var HSLA = (function () {
      function HSLA(value0, value1, value2, value3) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
      };
      HSLA.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return new HSLA(value0, value1, value2, value3);
                  };
              };
          };
      };
      return HSLA;
  })();
  var modPos = function (x) {
      return function (y) {
          return $$Math.remainder($$Math.remainder(x)(y) + y)(y);
      };
  };
  var rgba = function (red$prime) {
      return function (green$prime) {
          return function (blue$prime) {
              return function (alpha) {
                  var red = Data_Ord.clamp(Data_Ord.ordInt)(0)(255)(red$prime);
                  var r = Data_Int.toNumber(red) / 255.0;
                  var green = Data_Ord.clamp(Data_Ord.ordInt)(0)(255)(green$prime);
                  var g = Data_Int.toNumber(green) / 255.0;
                  var blue = Data_Ord.clamp(Data_Ord.ordInt)(0)(255)(blue$prime);
                  var maxChroma = Data_Ord.max(Data_Ord.ordInt)(Data_Ord.max(Data_Ord.ordInt)(red)(green))(blue);
                  var minChroma = Data_Ord.min(Data_Ord.ordInt)(Data_Ord.min(Data_Ord.ordInt)(red)(green))(blue);
                  var chroma = maxChroma - minChroma | 0;
                  var chroma$prime = Data_Int.toNumber(chroma) / 255.0;
                  var lightness = Data_Int.toNumber(maxChroma + minChroma | 0) / (255.0 * 2.0);
                  var saturation = (function () {
                      if (chroma === 0) {
                          return 0.0;
                      };
                      if (Data_Boolean.otherwise) {
                          return chroma$prime / (1.0 - $$Math.abs(2.0 * lightness - 1.0));
                      };
                      throw new Error("Failed pattern match at Color line 130, column 32 - line 158, column 75: " + [  ]);
                  })();
                  var b = Data_Int.toNumber(blue) / 255.0;
                  var hue$prime = function (v) {
                      if (v === 0) {
                          return 0.0;
                      };
                      if (maxChroma === red) {
                          return modPos((g - b) / chroma$prime)(6.0);
                      };
                      if (maxChroma === green) {
                          return (b - r) / chroma$prime + 2.0;
                      };
                      if (Data_Boolean.otherwise) {
                          return (r - g) / chroma$prime + 4.0;
                      };
                      throw new Error("Failed pattern match at Color line 130, column 32 - line 158, column 75: " + [ v.constructor.name ]);
                  };
                  var hue = 60.0 * hue$prime(chroma);
                  return new HSLA(hue, saturation, lightness, alpha);
              };
          };
      };
  };
  var rgb = function (r) {
      return function (g) {
          return function (b) {
              return rgba(r)(g)(b)(1.0);
          };
      };
  };
  var rgba$prime = function (r) {
      return function (g) {
          return function (b) {
              return function (a) {
                  return rgba(Data_Int.round(r * 255.0))(Data_Int.round(g * 255.0))(Data_Int.round(b * 255.0))(a);
              };
          };
      };
  };
  var rgb$prime = function (r) {
      return function (g) {
          return function (b) {
              return rgba$prime(r)(g)(b)(1.0);
          };
      };
  };
  var xyz = function (x) {
      return function (y) {
          return function (z) {
              var f = function (c) {
                  if (c <= 3.1308e-3) {
                      return 12.92 * c;
                  };
                  if (Data_Boolean.otherwise) {
                      return 1.055 * $$Math.pow(c)(1.0 / 2.4) - 5.5e-2;
                  };
                  throw new Error("Failed pattern match at Color line 222, column 5 - line 222, column 50: " + [ c.constructor.name ]);
              };
              var g = f(-0.9689 * x + 1.8758 * y + 4.15e-2 * z);
              var r = f(3.2406 * x - 1.5372 * y - 0.4986 * z);
              var b = f((5.57e-2 * x - 0.204 * y) + 1.057 * z);
              return rgb$prime(r)(g)(b);
          };
      };
  };
  var interpolate = function (fraction) {
      return function (a) {
          return function (b) {
              return a + fraction * (b - a);
          };
      };
  };
  var interpolateAngle = function (fraction) {
      return function (a) {
          return function (b) {
              var paths = [ {
                  from: a, 
                  to: b
              }, {
                  from: a, 
                  to: b + 360.0
              }, {
                  from: a + 360.0, 
                  to: b
              } ];
              var dist = function (v) {
                  return $$Math.abs(v.to - v.from);
              };
              var shortest = Data_Maybe.fromJust()(Data_Foldable.minimumBy(Data_Foldable.foldableArray)(Data_Ord.comparing(Data_Ord.ordNumber)(dist))(paths));
              return interpolate(fraction)(shortest.from)(shortest.to);
          };
      };
  };
  var mixCubehelix = function (gamma) {
      return function (v) {
          return function (v1) {
              var radians = $$Math.pi / 180.0;
              var bs = v1.value1 - v.value1;
              var bl = v1.value2 - v.value2;
              var ah = (v.value0 + 120.0) * radians;
              var bh = (v1.value0 + 120.0) * radians - ah;
              return function (t) {
                  var fract = $$Math.pow(v.value2 + bl * t)(gamma);
                  var angle = ah + bh * t;
                  var amp = (v.value1 + bs * t) * fract * (1.0 - fract);
                  var b = fract + amp * (1.97294 * $$Math.cos(angle));
                  var g = fract + amp * (-0.29227 * $$Math.cos(angle) - 0.90649 * $$Math.sin(angle));
                  var r = fract + amp * (-0.14861 * $$Math.cos(angle) + 1.78277 * $$Math.sin(angle));
                  var a = interpolate(t)(v.value3)(v1.value3);
                  return rgba$prime(r)(g)(b)(a);
              };
          };
      };
  };
  var hsla = function (h) {
      return function (s) {
          return function (l) {
              return function (a) {
                  var s$prime = Data_Ord.clamp(Data_Ord.ordNumber)(0.0)(1.0)(s);
                  var l$prime = Data_Ord.clamp(Data_Ord.ordNumber)(0.0)(1.0)(l);
                  var a$prime = Data_Ord.clamp(Data_Ord.ordNumber)(0.0)(1.0)(a);
                  return new HSLA(h, s$prime, l$prime, a$prime);
              };
          };
      };
  };
  var lighten = function (f) {
      return function (v) {
          return hsla(v.value0)(v.value1)(v.value2 + f)(v.value3);
      };
  };
  var rotateHue = function (angle) {
      return function (v) {
          return hsla(v.value0 + angle)(v.value1)(v.value2)(v.value3);
      };
  };
  var saturate = function (f) {
      return function (v) {
          return hsla(v.value0)(v.value1 + f)(v.value2)(v.value3);
      };
  };
  var hsl = function (h) {
      return function (s) {
          return function (l) {
              return hsla(h)(s)(l)(1.0);
          };
      };
  };
  var white = hsl(0.0)(0.0)(1.0);
  var graytone = function (l) {
      return hsl(0.0)(0.0)(l);
  };
  var fromInt = function (m) {
      var n = Data_Ord.clamp(Data_Ord.ordInt)(0)(16777215)(m);
      var r = n >> 16 & 255;
      var g = n >> 8 & 255;
      var b = n & 255;
      return rgb(r)(g)(b);
  };
  var fromHexString = function (str) {
      var parseHex = function ($111) {
          return Data_Maybe.fromMaybe(0)(Data_Int.fromStringAs(Data_Int.hexadecimal)($111));
      };
      var isShort = Data_String.length(str) === 4;
      var hush = Data_Either.either(Data_Function["const"](Data_Maybe.Nothing.value))(Data_Maybe.Just.create);
      var pair = "(" + ("[0-9a-f]" + ("[0-9a-f]" + ")"));
      var single = "(" + ("[0-9a-f]" + ")");
      var variant = (function () {
          if (isShort) {
              return single + (single + single);
          };
          return pair + (pair + pair);
      })();
      var mPattern = Data_String_Regex.regex("^#(?:" + (variant + ")$"))(Data_String_Regex.parseFlags("i"));
      return Control_Bind.bind(Data_Maybe.bindMaybe)(hush(mPattern))(function (v) {
          return Control_Bind.bind(Data_Maybe.bindMaybe)(Data_String_Regex.match(v)(str))(function (v1) {
              return Control_Bind.bind(Data_Maybe.bindMaybe)(Data_Functor.map(Data_Maybe.functorMaybe)(parseHex)(Control_Bind.join(Data_Maybe.bindMaybe)(Data_Array.index(v1)(1))))(function (v2) {
                  return Control_Bind.bind(Data_Maybe.bindMaybe)(Data_Functor.map(Data_Maybe.functorMaybe)(parseHex)(Control_Bind.join(Data_Maybe.bindMaybe)(Data_Array.index(v1)(2))))(function (v3) {
                      return Control_Bind.bind(Data_Maybe.bindMaybe)(Data_Functor.map(Data_Maybe.functorMaybe)(parseHex)(Control_Bind.join(Data_Maybe.bindMaybe)(Data_Array.index(v1)(3))))(function (v4) {
                          if (isShort) {
                              return Control_Applicative.pure(Data_Maybe.applicativeMaybe)(rgb((16 * v2 | 0) + v2 | 0)((16 * v3 | 0) + v3 | 0)((16 * v4 | 0) + v4 | 0));
                          };
                          return Control_Applicative.pure(Data_Maybe.applicativeMaybe)(rgb(v2)(v3)(v4));
                      });
                  });
              });
          });
      });
  };
  var desaturate = function (f) {
      return saturate(-f);
  };
  var darken = function (f) {
      return lighten(-f);
  };
  var d65 = {
      xn: 0.95047, 
      yn: 1.0, 
      zn: 1.08883
  };
  var lab = function (l) {
      return function (a) {
          return function (b) {
              var l$prime = (l + 16.0) / 116.0;
              var delta = 6.0 / 29.0;
              var finv = function (t) {
                  if (t > delta) {
                      return $$Math.pow(t)(3.0);
                  };
                  if (Data_Boolean.otherwise) {
                      return 3.0 * delta * delta * (t - 4.0 / 29.0);
                  };
                  throw new Error("Failed pattern match at Color line 241, column 13 - line 250, column 64: " + [ t.constructor.name ]);
              };
              var x = d65.xn * finv(l$prime + a / 500.0);
              var y = d65.yn * finv(l$prime);
              var z = d65.zn * finv(l$prime - b / 200.0);
              return xyz(x)(y)(z);
          };
      };
  };
  var lch = function (l) {
      return function (c) {
          return function (h) {
              var deg2rad = $$Math.pi / 180.0;
              var b = c * $$Math.sin(h * deg2rad);
              var a = c * $$Math.cos(h * deg2rad);
              return lab(l)(a)(b);
          };
      };
  };
  var cssStringHSLA = function (v) {
      var toString = function (n) {
          return Data_Show.show(Data_Show.showNumber)(Data_Int.toNumber(Data_Int.round(100.0 * n)) / 100.0);
      };
      var saturation = toString(v.value1 * 100.0) + "%";
      var lightness = toString(v.value2 * 100.0) + "%";
      var hue = toString(v.value0);
      var alpha = Data_Show.show(Data_Show.showNumber)(v.value3);
      var $69 = v.value3 === 1.0;
      if ($69) {
          return "hsl(" + (hue + (", " + (saturation + (", " + (lightness + ")")))));
      };
      return "hsla(" + (hue + (", " + (saturation + (", " + (lightness + (", " + (alpha + ")")))))));
  };
  var complementary = rotateHue(180.0);
  var clipHue = function (v) {
      var $75 = 360.0 === v;
      if ($75) {
          return v;
      };
      return modPos(v)(360.0);
  };
  var toHSLA = function (v) {
      return {
          h: clipHue(v.value0), 
          s: v.value1, 
          l: v.value2, 
          a: v.value3
      };
  };
  var toRGBA$prime = function (v) {
      var h$prime = clipHue(v.value0) / 60.0;
      var chr = (1.0 - $$Math.abs(2.0 * v.value2 - 1.0)) * v.value1;
      var m = v.value2 - chr / 2.0;
      var x = chr * (1.0 - $$Math.abs($$Math.remainder(h$prime)(2.0) - 1.0));
      var col = (function () {
          if (h$prime < 1.0) {
              return {
                  r: chr, 
                  g: x, 
                  b: 0.0
              };
          };
          if (1.0 <= h$prime && h$prime < 2.0) {
              return {
                  r: x, 
                  g: chr, 
                  b: 0.0
              };
          };
          if (2.0 <= h$prime && h$prime < 3.0) {
              return {
                  r: 0.0, 
                  g: chr, 
                  b: x
              };
          };
          if (3.0 <= h$prime && h$prime < 4.0) {
              return {
                  r: 0.0, 
                  g: x, 
                  b: chr
              };
          };
          if (4.0 <= h$prime && h$prime < 5.0) {
              return {
                  r: x, 
                  g: 0.0, 
                  b: chr
              };
          };
          if (Data_Boolean.otherwise) {
              return {
                  r: chr, 
                  g: 0.0, 
                  b: x
              };
          };
          throw new Error("Failed pattern match at Color line 335, column 26 - line 346, column 61: " + [  ]);
      })();
      return {
          r: col.r + m, 
          g: col.g + m, 
          b: col.b + m, 
          a: v.value3
      };
  };
  var luminance = function (col) {
      var val = toRGBA$prime(col);
      var f = function (c) {
          if (c <= 3.928e-2) {
              return c / 12.92;
          };
          if (Data_Boolean.otherwise) {
              return $$Math.pow((c + 5.5e-2) / 1.055)(2.4);
          };
          throw new Error("Failed pattern match at Color line 598, column 17 - line 606, column 26: " + [ c.constructor.name ]);
      };
      var g = f(val.g);
      var r = f(val.r);
      var b = f(val.b);
      return 0.2126 * r + 0.7152 * g + 7.22e-2 * b;
  };
  var contrast = function (c1) {
      return function (c2) {
          var l2 = luminance(c2);
          var l1 = luminance(c1);
          var $101 = l1 > l2;
          if ($101) {
              return (l1 + 5.0e-2) / (l2 + 5.0e-2);
          };
          return (l2 + 5.0e-2) / (l1 + 5.0e-2);
      };
  };
  var isReadable = function (c1) {
      return function (c2) {
          return contrast(c1)(c2) > 4.5;
      };
  };
  var toRGBA = function (col) {
      var c = toRGBA$prime(col);
      var g = Data_Int.round(255.0 * c.g);
      var r = Data_Int.round(255.0 * c.r);
      var b = Data_Int.round(255.0 * c.b);
      return {
          r: r, 
          g: g, 
          b: b, 
          a: c.a
      };
  }; 
  var toHexString = function (color) {
      var toHex = function (num) {
          var repr = Data_Int.toStringAs(Data_Int.hexadecimal)(num);
          var $103 = Data_String.length(repr) === 1;
          if ($103) {
              return "0" + repr;
          };
          return repr;
      };
      var c = toRGBA(color);
      return "#" + (toHex(c.r) + (toHex(c.g) + toHex(c.b)));
  };
  var toXYZ = function (c) {
      var rec = toRGBA$prime(c);
      var finv = function (c$prime) {
          if (c$prime <= 4.045e-2) {
              return c$prime / 12.92;
          };
          if (Data_Boolean.otherwise) {
              return $$Math.pow((c$prime + 5.5e-2) / 1.055)(2.4);
          };
          throw new Error("Failed pattern match at Color line 354, column 11 - line 368, column 1: " + [ c$prime.constructor.name ]);
      };
      var g = finv(rec.g);
      var r = finv(rec.r);
      var b = finv(rec.b);
      var x = 0.4124 * r + 0.3576 * g + 0.1805 * b;
      var y = 0.2126 * r + 0.7152 * g + 7.22e-2 * b;
      var z = 1.93e-2 * r + 0.1192 * g + 0.9505 * b;
      return {
          x: x, 
          y: y, 
          z: z
      };
  };
  var toLab = function (col) {
      var rec = toXYZ(col);
      var cut = $$Math.pow(6.0 / 29.0)(3.0);
      var f = function (t) {
          if (t > cut) {
              return $$Math.pow(t)(1.0 / 3.0);
          };
          if (Data_Boolean.otherwise) {
              return (1.0 / 3.0) * $$Math.pow(29.0 / 6.0)(2.0) * t + 4.0 / 29.0;
          };
          throw new Error("Failed pattern match at Color line 372, column 13 - line 386, column 1: " + [ t.constructor.name ]);
      };
      var fy = f(rec.y / d65.yn);
      var l = 116.0 * fy - 16.0;
      var b = 200.0 * (fy - f(rec.z / d65.zn));
      var a = 500.0 * (f(rec.x / d65.xn) - fy);
      return {
          l: l, 
          a: a, 
          b: b
      };
  };
  var distance = function (col1) {
      return function (col2) {
          var sq = function (x) {
              return $$Math.pow(x)(2.0);
          };
          var c2 = toLab(col2);
          var c1 = toLab(col1);
          return $$Math.sqrt(sq(c1.l - c2.l) + sq(c1.a - c2.a) + sq(c1.b - c2.b));
      };
  };
  var toLCh = function (col) {
      var rec = toLab(col);
      var rad2deg = 180.0 / $$Math.pi;
      var c = $$Math.sqrt(rec.a * rec.a + rec.b * rec.b);
      var h = modPos($$Math.atan2(rec.b)(rec.a) * rad2deg)(360.0);
      return {
          l: rec.l, 
          c: c, 
          h: h
      };
  };
  var mix = function (v) {
      return function (c1) {
          return function (c2) {
              return function (frac) {
                  if (v instanceof HSL) {
                      var t = toHSLA(c2);
                      var f = toHSLA(c1);
                      return hsla(interpolateAngle(frac)(f.h)(t.h))(interpolate(frac)(f.s)(t.s))(interpolate(frac)(f.l)(t.l))(interpolate(frac)(f.a)(t.a));
                  };
                  if (v instanceof RGB) {
                      var t = toRGBA$prime(c2);
                      var f = toRGBA$prime(c1);
                      return rgba$prime(interpolate(frac)(f.r)(t.r))(interpolate(frac)(f.g)(t.g))(interpolate(frac)(f.b)(t.b))(interpolate(frac)(f.a)(t.a));
                  };
                  if (v instanceof LCh) {
                      var t = toLCh(c2);
                      var f = toLCh(c1);
                      return lch(interpolate(frac)(f.l)(t.l))(interpolate(frac)(f.c)(t.c))(interpolateAngle(frac)(f.h)(t.h));
                  };
                  if (v instanceof Lab) {
                      var t = toLab(c2);
                      var f = toLab(c1);
                      return lab(interpolate(frac)(f.l)(t.l))(interpolate(frac)(f.a)(t.a))(interpolate(frac)(f.b)(t.b));
                  };
                  throw new Error("Failed pattern match at Color line 520, column 1 - line 527, column 18: " + [ v.constructor.name, c1.constructor.name, c2.constructor.name, frac.constructor.name ]);
              };
          };
      };
  };
  var toGray = function (col) {
      var res = toLCh(col);
      return desaturate(1.0)(lch(res.l)(0.0)(0.0));
  };
  var brightness = function (col) {
      var c = toRGBA$prime(col);
      return (299.0 * c.r + 587.0 * c.g + 114.0 * c.b) / 1000.0;
  };
  var isLight = function (c) {
      return brightness(c) > 0.5;
  };
  var black = hsl(0.0)(0.0)(0.0);
  var textColor = function (c) {
      if (isLight(c)) {
          return black;
      };
      if (Data_Boolean.otherwise) {
          return white;
      };
      throw new Error("Failed pattern match at Color line 643, column 1 - line 644, column 32: " + [ c.constructor.name ]);
  };
  exports["RGB"] = RGB;
  exports["HSL"] = HSL;
  exports["LCh"] = LCh;
  exports["Lab"] = Lab;
  exports["black"] = black;
  exports["brightness"] = brightness;
  exports["complementary"] = complementary;
  exports["contrast"] = contrast;
  exports["cssStringHSLA"] = cssStringHSLA;
  exports["darken"] = darken;
  exports["desaturate"] = desaturate;
  exports["distance"] = distance;
  exports["fromHexString"] = fromHexString;
  exports["fromInt"] = fromInt;
  exports["graytone"] = graytone;
  exports["hsl"] = hsl;
  exports["hsla"] = hsla;
  exports["isLight"] = isLight;
  exports["isReadable"] = isReadable;
  exports["lab"] = lab;
  exports["lch"] = lch;
  exports["lighten"] = lighten;
  exports["luminance"] = luminance;
  exports["mix"] = mix;
  exports["mixCubehelix"] = mixCubehelix;
  exports["rgb"] = rgb;
  exports["rgb'"] = rgb$prime;
  exports["rgba"] = rgba;
  exports["rgba'"] = rgba$prime;
  exports["rotateHue"] = rotateHue;
  exports["saturate"] = saturate;
  exports["textColor"] = textColor;
  exports["toGray"] = toGray;
  exports["toHSLA"] = toHSLA;
  exports["toHexString"] = toHexString;
  exports["toLCh"] = toLCh;
  exports["toLab"] = toLab;
  exports["toRGBA"] = toRGBA;
  exports["toRGBA'"] = toRGBA$prime;
  exports["toXYZ"] = toXYZ;
  exports["white"] = white;
  exports["xyz"] = xyz;
})(PS["Color"] = PS["Color"] || {});
(function(exports) {
  // Generated by purs version 0.11.3
  "use strict";
  var Color = PS["Color"];
  var Data_Boolean = PS["Data.Boolean"];
  var Data_EuclideanRing = PS["Data.EuclideanRing"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semiring = PS["Data.Semiring"];
  var Prelude = PS["Prelude"];        
  var Multiply = (function () {
      function Multiply() {

      };
      Multiply.value = new Multiply();
      return Multiply;
  })();
  var Screen = (function () {
      function Screen() {

      };
      Screen.value = new Screen();
      return Screen;
  })();
  var Overlay = (function () {
      function Overlay() {

      };
      Overlay.value = new Overlay();
      return Overlay;
  })();
  var blendChannel = function (v) {
      return function (b) {
          return function (f) {
              if (v instanceof Multiply) {
                  return b * f;
              };
              if (v instanceof Screen) {
                  return 1.0 - (1.0 - b) * (1.0 - f);
              };
              if (v instanceof Overlay) {
                  if (b < 0.5) {
                      return 2.0 * b * f;
                  };
                  if (Data_Boolean.otherwise) {
                      return 1.0 - 2.0 * (1.0 - b) * (1.0 - f);
                  };
              };
              throw new Error("Failed pattern match at Color.Blending line 14, column 1 - line 14, column 34: " + [ v.constructor.name, b.constructor.name, f.constructor.name ]);
          };
      };
  };
  var blend = function (mode) {
      return function (c1) {
          return function (c2) {
              var v2 = Color["toRGBA'"](c2);
              var v1 = Color["toRGBA'"](c1);
              var r = blendChannel(mode)(v1.r)(v2.r);
              var g = blendChannel(mode)(v1.g)(v2.g);
              var b = blendChannel(mode)(v1.b)(v2.b);
              var a = (v1.a + v2.a) / 2.0;
              return Color["rgba'"](r)(g)(b)(a);
          };
      };
  };
  exports["Multiply"] = Multiply;
  exports["Screen"] = Screen;
  exports["Overlay"] = Overlay;
  exports["blend"] = blend;
})(PS["Color.Blending"] = PS["Color.Blending"] || {});
(function(exports) {
  // Generated by purs version 0.11.3
  "use strict";
  var Color = PS["Color"];        
  var yellowgreen = Color.rgb(154)(205)(50);
  var yellow = Color.rgb(255)(255)(0);
  var whitesmoke = Color.rgb(245)(245)(245);
  var wheat = Color.rgb(245)(222)(179);
  var violet = Color.rgb(238)(130)(238);
  var turquoise = Color.rgb(64)(224)(208);
  var tomato = Color.rgb(255)(99)(71);
  var thistle = Color.rgb(216)(191)(216);
  var teal = Color.rgb(0)(128)(128);
  var tan = Color.rgb(210)(180)(140);
  var steelblue = Color.rgb(70)(130)(180);
  var springgreen = Color.rgb(0)(255)(127);
  var snow = Color.rgb(255)(250)(250);
  var slategrey = Color.rgb(112)(128)(144);
  var slategray = Color.rgb(112)(128)(144);
  var slateblue = Color.rgb(106)(90)(205);
  var skyblue = Color.rgb(135)(206)(235);
  var silver = Color.rgb(192)(192)(192);
  var sienna = Color.rgb(160)(82)(45);
  var seashell = Color.rgb(255)(245)(238);
  var seagreen = Color.rgb(46)(139)(87);
  var sandybrown = Color.rgb(244)(164)(96);
  var salmon = Color.rgb(250)(128)(114);
  var saddlebrown = Color.rgb(139)(69)(19);
  var royalblue = Color.rgb(65)(105)(225);
  var rosybrown = Color.rgb(188)(143)(143);
  var red = Color.rgb(255)(0)(0);
  var purple = Color.rgb(128)(0)(128);
  var powderblue = Color.rgb(176)(224)(230);
  var plum = Color.rgb(221)(160)(221);
  var pink = Color.rgb(255)(192)(203);
  var peru = Color.rgb(205)(133)(63);
  var peachpuff = Color.rgb(255)(218)(185);
  var papayawhip = Color.rgb(255)(239)(213);
  var palevioletred = Color.rgb(219)(112)(147);
  var paleturquoise = Color.rgb(175)(238)(238);
  var palegreen = Color.rgb(152)(251)(152);
  var palegoldenrod = Color.rgb(238)(232)(170);
  var orchid = Color.rgb(218)(112)(214);
  var orangered = Color.rgb(255)(69)(0);
  var orange = Color.rgb(255)(165)(0);
  var olivedrab = Color.rgb(107)(142)(35);
  var olive = Color.rgb(128)(128)(0);
  var oldlace = Color.rgb(253)(245)(230);
  var navy = Color.rgb(0)(0)(128);
  var navajowhite = Color.rgb(255)(222)(173);
  var moccasin = Color.rgb(255)(228)(181);
  var mistyrose = Color.rgb(255)(228)(225);
  var mintcream = Color.rgb(245)(255)(250);
  var midnightblue = Color.rgb(25)(25)(112);
  var mediumvioletred = Color.rgb(199)(21)(133);
  var mediumturquoise = Color.rgb(72)(209)(204);
  var mediumspringgreen = Color.rgb(0)(250)(154);
  var mediumslateblue = Color.rgb(123)(104)(238);
  var mediumseagreen = Color.rgb(60)(179)(113);
  var mediumpurple = Color.rgb(147)(112)(219);
  var mediumorchid = Color.rgb(186)(85)(211);
  var mediumblue = Color.rgb(0)(0)(205);
  var mediumaquamarine = Color.rgb(102)(205)(170);
  var maroon = Color.rgb(128)(0)(0);
  var magenta = Color.rgb(255)(0)(255);
  var linen = Color.rgb(250)(240)(230);
  var limegreen = Color.rgb(50)(205)(50);
  var lime = Color.rgb(0)(255)(0);
  var lightyellow = Color.rgb(255)(255)(224);
  var lightsteelblue = Color.rgb(176)(196)(222);
  var lightslategrey = Color.rgb(119)(136)(153);
  var lightslategray = Color.rgb(119)(136)(153);
  var lightskyblue = Color.rgb(135)(206)(250);
  var lightseagreen = Color.rgb(32)(178)(170);
  var lightsalmon = Color.rgb(255)(160)(122);
  var lightpink = Color.rgb(255)(182)(193);
  var lightgrey = Color.rgb(211)(211)(211);
  var lightgreen = Color.rgb(144)(238)(144);
  var lightgray = Color.rgb(211)(211)(211);
  var lightgoldenrodyellow = Color.rgb(250)(250)(210);
  var lightcyan = Color.rgb(224)(255)(255);
  var lightcoral = Color.rgb(240)(128)(128);
  var lightblue = Color.rgb(173)(216)(230);
  var lemonchiffon = Color.rgb(255)(250)(205);
  var lawngreen = Color.rgb(124)(252)(0);
  var lavenderblush = Color.rgb(255)(240)(245);
  var lavender = Color.rgb(230)(230)(250);
  var khaki = Color.rgb(240)(230)(140);
  var ivory = Color.rgb(255)(255)(240);
  var indigo = Color.rgb(75)(0)(130);
  var indianred = Color.rgb(205)(92)(92);
  var hotpink = Color.rgb(255)(105)(180);
  var honeydew = Color.rgb(240)(255)(240);
  var grey = Color.rgb(128)(128)(128);
  var greenyellow = Color.rgb(173)(255)(47);
  var green = Color.rgb(0)(128)(0);
  var gray = Color.rgb(128)(128)(128);
  var goldenrod = Color.rgb(218)(165)(32);
  var gold = Color.rgb(255)(215)(0);
  var ghostwhite = Color.rgb(248)(248)(255);
  var gainsboro = Color.rgb(220)(220)(220);
  var fuchsia = Color.rgb(255)(0)(255);
  var forestgreen = Color.rgb(34)(139)(34);
  var floralwhite = Color.rgb(255)(250)(240);
  var firebrick = Color.rgb(178)(34)(34);
  var dodgerblue = Color.rgb(30)(144)(255);
  var dimgrey = Color.rgb(105)(105)(105);
  var dimgray = Color.rgb(105)(105)(105);
  var deepskyblue = Color.rgb(0)(191)(255);
  var deeppink = Color.rgb(255)(20)(147);
  var darkviolet = Color.rgb(148)(0)(211);
  var darkturquoise = Color.rgb(0)(206)(209);
  var darkslategrey = Color.rgb(47)(79)(79);
  var darkslategray = Color.rgb(47)(79)(79);
  var darkslateblue = Color.rgb(72)(61)(139);
  var darkseagreen = Color.rgb(143)(188)(143);
  var darksalmon = Color.rgb(233)(150)(122);
  var darkred = Color.rgb(139)(0)(0);
  var darkorchid = Color.rgb(153)(50)(204);
  var darkorange = Color.rgb(255)(140)(0);
  var darkolivegreen = Color.rgb(85)(107)(47);
  var darkmagenta = Color.rgb(139)(0)(139);
  var darkkhaki = Color.rgb(189)(183)(107);
  var darkgrey = Color.rgb(169)(169)(169);
  var darkgreen = Color.rgb(0)(100)(0);
  var darkgray = Color.rgb(169)(169)(169);
  var darkgoldenrod = Color.rgb(184)(134)(11);
  var darkcyan = Color.rgb(0)(139)(139);
  var darkblue = Color.rgb(0)(0)(139);
  var cyan = Color.rgb(0)(255)(255);
  var crimson = Color.rgb(220)(20)(60);
  var cornsilk = Color.rgb(255)(248)(220);
  var cornflowerblue = Color.rgb(100)(149)(237);
  var coral = Color.rgb(255)(127)(80);
  var chocolate = Color.rgb(210)(105)(30);
  var chartreuse = Color.rgb(127)(255)(0);
  var cadetblue = Color.rgb(95)(158)(160);
  var burlywood = Color.rgb(222)(184)(135);
  var brown = Color.rgb(165)(42)(42);
  var blueviolet = Color.rgb(138)(43)(226);
  var blue = Color.rgb(0)(0)(255);
  var blanchedalmond = Color.rgb(255)(235)(205);
  var bisque = Color.rgb(255)(228)(196);
  var beige = Color.rgb(245)(245)(220);
  var azure = Color.rgb(240)(255)(255);
  var aquamarine = Color.rgb(127)(255)(212);
  var aqua = Color.rgb(0)(255)(255);
  var antiquewhite = Color.rgb(250)(235)(215);
  var aliceblue = Color.rgb(240)(248)(255);
  exports["aliceblue"] = aliceblue;
  exports["antiquewhite"] = antiquewhite;
  exports["aqua"] = aqua;
  exports["aquamarine"] = aquamarine;
  exports["azure"] = azure;
  exports["beige"] = beige;
  exports["bisque"] = bisque;
  exports["blanchedalmond"] = blanchedalmond;
  exports["blue"] = blue;
  exports["blueviolet"] = blueviolet;
  exports["brown"] = brown;
  exports["burlywood"] = burlywood;
  exports["cadetblue"] = cadetblue;
  exports["chartreuse"] = chartreuse;
  exports["chocolate"] = chocolate;
  exports["coral"] = coral;
  exports["cornflowerblue"] = cornflowerblue;
  exports["cornsilk"] = cornsilk;
  exports["crimson"] = crimson;
  exports["cyan"] = cyan;
  exports["darkblue"] = darkblue;
  exports["darkcyan"] = darkcyan;
  exports["darkgoldenrod"] = darkgoldenrod;
  exports["darkgray"] = darkgray;
  exports["darkgreen"] = darkgreen;
  exports["darkgrey"] = darkgrey;
  exports["darkkhaki"] = darkkhaki;
  exports["darkmagenta"] = darkmagenta;
  exports["darkolivegreen"] = darkolivegreen;
  exports["darkorange"] = darkorange;
  exports["darkorchid"] = darkorchid;
  exports["darkred"] = darkred;
  exports["darksalmon"] = darksalmon;
  exports["darkseagreen"] = darkseagreen;
  exports["darkslateblue"] = darkslateblue;
  exports["darkslategray"] = darkslategray;
  exports["darkslategrey"] = darkslategrey;
  exports["darkturquoise"] = darkturquoise;
  exports["darkviolet"] = darkviolet;
  exports["deeppink"] = deeppink;
  exports["deepskyblue"] = deepskyblue;
  exports["dimgray"] = dimgray;
  exports["dimgrey"] = dimgrey;
  exports["dodgerblue"] = dodgerblue;
  exports["firebrick"] = firebrick;
  exports["floralwhite"] = floralwhite;
  exports["forestgreen"] = forestgreen;
  exports["fuchsia"] = fuchsia;
  exports["gainsboro"] = gainsboro;
  exports["ghostwhite"] = ghostwhite;
  exports["gold"] = gold;
  exports["goldenrod"] = goldenrod;
  exports["gray"] = gray;
  exports["green"] = green;
  exports["greenyellow"] = greenyellow;
  exports["grey"] = grey;
  exports["honeydew"] = honeydew;
  exports["hotpink"] = hotpink;
  exports["indianred"] = indianred;
  exports["indigo"] = indigo;
  exports["ivory"] = ivory;
  exports["khaki"] = khaki;
  exports["lavender"] = lavender;
  exports["lavenderblush"] = lavenderblush;
  exports["lawngreen"] = lawngreen;
  exports["lemonchiffon"] = lemonchiffon;
  exports["lightblue"] = lightblue;
  exports["lightcoral"] = lightcoral;
  exports["lightcyan"] = lightcyan;
  exports["lightgoldenrodyellow"] = lightgoldenrodyellow;
  exports["lightgray"] = lightgray;
  exports["lightgreen"] = lightgreen;
  exports["lightgrey"] = lightgrey;
  exports["lightpink"] = lightpink;
  exports["lightsalmon"] = lightsalmon;
  exports["lightseagreen"] = lightseagreen;
  exports["lightskyblue"] = lightskyblue;
  exports["lightslategray"] = lightslategray;
  exports["lightslategrey"] = lightslategrey;
  exports["lightsteelblue"] = lightsteelblue;
  exports["lightyellow"] = lightyellow;
  exports["lime"] = lime;
  exports["limegreen"] = limegreen;
  exports["linen"] = linen;
  exports["magenta"] = magenta;
  exports["maroon"] = maroon;
  exports["mediumaquamarine"] = mediumaquamarine;
  exports["mediumblue"] = mediumblue;
  exports["mediumorchid"] = mediumorchid;
  exports["mediumpurple"] = mediumpurple;
  exports["mediumseagreen"] = mediumseagreen;
  exports["mediumslateblue"] = mediumslateblue;
  exports["mediumspringgreen"] = mediumspringgreen;
  exports["mediumturquoise"] = mediumturquoise;
  exports["mediumvioletred"] = mediumvioletred;
  exports["midnightblue"] = midnightblue;
  exports["mintcream"] = mintcream;
  exports["mistyrose"] = mistyrose;
  exports["moccasin"] = moccasin;
  exports["navajowhite"] = navajowhite;
  exports["navy"] = navy;
  exports["oldlace"] = oldlace;
  exports["olive"] = olive;
  exports["olivedrab"] = olivedrab;
  exports["orange"] = orange;
  exports["orangered"] = orangered;
  exports["orchid"] = orchid;
  exports["palegoldenrod"] = palegoldenrod;
  exports["palegreen"] = palegreen;
  exports["paleturquoise"] = paleturquoise;
  exports["palevioletred"] = palevioletred;
  exports["papayawhip"] = papayawhip;
  exports["peachpuff"] = peachpuff;
  exports["peru"] = peru;
  exports["pink"] = pink;
  exports["plum"] = plum;
  exports["powderblue"] = powderblue;
  exports["purple"] = purple;
  exports["red"] = red;
  exports["rosybrown"] = rosybrown;
  exports["royalblue"] = royalblue;
  exports["saddlebrown"] = saddlebrown;
  exports["salmon"] = salmon;
  exports["sandybrown"] = sandybrown;
  exports["seagreen"] = seagreen;
  exports["seashell"] = seashell;
  exports["sienna"] = sienna;
  exports["silver"] = silver;
  exports["skyblue"] = skyblue;
  exports["slateblue"] = slateblue;
  exports["slategray"] = slategray;
  exports["slategrey"] = slategrey;
  exports["snow"] = snow;
  exports["springgreen"] = springgreen;
  exports["steelblue"] = steelblue;
  exports["tan"] = tan;
  exports["teal"] = teal;
  exports["thistle"] = thistle;
  exports["tomato"] = tomato;
  exports["turquoise"] = turquoise;
  exports["violet"] = violet;
  exports["wheat"] = wheat;
  exports["whitesmoke"] = whitesmoke;
  exports["yellow"] = yellow;
  exports["yellowgreen"] = yellowgreen;
})(PS["Color.Scheme.X11"] = PS["Color.Scheme.X11"] || {});
(function(exports) {
  // Generated by purs version 0.11.3
  "use strict";
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Category = PS["Control.Category"];
  var Control_Comonad = PS["Control.Comonad"];
  var Control_Extend = PS["Control.Extend"];
  var Control_Monad = PS["Control.Monad"];
  var Control_MonadPlus = PS["Control.MonadPlus"];
  var Control_MonadZero = PS["Control.MonadZero"];
  var Control_Plus = PS["Control.Plus"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_NonEmpty = PS["Data.NonEmpty"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semigroup_Foldable = PS["Data.Semigroup.Foldable"];
  var Data_Semigroup_Traversable = PS["Data.Semigroup.Traversable"];
  var Data_Show = PS["Data.Show"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unfoldable = PS["Data.Unfoldable"];
  var Prelude = PS["Prelude"];        
  var Nil = (function () {
      function Nil() {

      };
      Nil.value = new Nil();
      return Nil;
  })();
  var Cons = (function () {
      function Cons(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Cons.create = function (value0) {
          return function (value1) {
              return new Cons(value0, value1);
          };
      };
      return Cons;
  })();
  var NonEmptyList = function (x) {
      return x;
  };
  var foldableList = new Data_Foldable.Foldable(function (dictMonoid) {
      return function (f) {
          return Data_Foldable.foldl(foldableList)(function (acc) {
              return function ($143) {
                  return Data_Semigroup.append(dictMonoid.Semigroup0())(acc)(f($143));
              };
          })(Data_Monoid.mempty(dictMonoid));
      };
  }, function (f) {
      var go = function (__copy_b) {
          return function (__copy_v) {
              var b = __copy_b;
              var v = __copy_v;
              var __tco_done = false;
              var __tco_result;
              var __tco_b;
              var __tco_v;
              function __tco_loop(b, v) {
                  if (v instanceof Nil) {
                      __tco_done = true;
                      return b;
                  };
                  if (v instanceof Cons) {
                      __tco_b = f(b)(v.value0);
                      __tco_v = v.value1;
                      return;
                  };
                  throw new Error("Failed pattern match at Data.List.Types line 78, column 12 - line 80, column 30: " + [ v.constructor.name ]);
              };
              while (!__tco_done) {
                  __tco_result = __tco_loop(b, v);
                  b = __tco_b;
                  v = __tco_v;
              };
              return __tco_result;
          };
      };
      return go;
  }, function (f) {
      return function (b) {
          var rev = function (__copy_acc) {
              return function (__copy_v) {
                  var acc = __copy_acc;
                  var v = __copy_v;
                  var __tco_done = false;
                  var __tco_result;
                  var __tco_acc;
                  var __tco_v;
                  function __tco_loop(acc, v) {
                      if (v instanceof Nil) {
                          __tco_done = true;
                          return acc;
                      };
                      if (v instanceof Cons) {
                          __tco_acc = new Cons(v.value0, acc);
                          __tco_v = v.value1;
                          return;
                      };
                      throw new Error("Failed pattern match at Data.List.Types line 73, column 15 - line 75, column 33: " + [ v.constructor.name ]);
                  };
                  while (!__tco_done) {
                      __tco_result = __tco_loop(acc, v);
                      acc = __tco_acc;
                      v = __tco_v;
                  };
                  return __tco_result;
              };
          };
          return function ($144) {
              return Data_Foldable.foldl(foldableList)(Data_Function.flip(f))(b)(rev(Nil.value)($144));
          };
      };
  });                                                                     
  var functorList = new Data_Functor.Functor(function (f) {
      return Data_Foldable.foldr(foldableList)(function (x) {
          return function (acc) {
              return new Cons(f(x), acc);
          };
      })(Nil.value);
  });                                                                  
  var semigroupList = new Data_Semigroup.Semigroup(function (xs) {
      return function (ys) {
          return Data_Foldable.foldr(foldableList)(Cons.create)(ys)(xs);
      };
  });
  var monoidList = new Data_Monoid.Monoid(function () {
      return semigroupList;
  }, Nil.value);
  var showList = function (dictShow) {
      return new Data_Show.Show(function (v) {
          if (v instanceof Nil) {
              return "Nil";
          };
          return "(" + (Data_Foldable.intercalate(foldableList)(Data_Monoid.monoidString)(" : ")(Data_Functor.map(functorList)(Data_Show.show(dictShow))(v)) + " : Nil)");
      });
  };
  var showNonEmptyList = function (dictShow) {
      return new Data_Show.Show(function (v) {
          return "(NonEmptyList " + (Data_Show.show(Data_NonEmpty.showNonEmpty(dictShow)(showList(dictShow)))(v) + ")");
      });
  };
  var traversableList = new Data_Traversable.Traversable(function () {
      return foldableList;
  }, function () {
      return functorList;
  }, function (dictApplicative) {
      return Data_Traversable.traverse(traversableList)(dictApplicative)(Control_Category.id(Control_Category.categoryFn));
  }, function (dictApplicative) {
      return function (f) {
          return function ($145) {
              return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Data_Foldable.foldl(foldableList)(Data_Function.flip(Cons.create))(Nil.value))(Data_Foldable.foldl(foldableList)(function (acc) {
                  return function ($146) {
                      return Control_Apply.lift2(dictApplicative.Apply0())(Data_Function.flip(Cons.create))(acc)(f($146));
                  };
              })(Control_Applicative.pure(dictApplicative)(Nil.value))($145));
          };
      };
  });
  var applyList = new Control_Apply.Apply(function () {
      return functorList;
  }, function (v) {
      return function (v1) {
          if (v instanceof Nil) {
              return Nil.value;
          };
          if (v instanceof Cons) {
              return Data_Semigroup.append(semigroupList)(Data_Functor.map(functorList)(v.value0)(v1))(Control_Apply.apply(applyList)(v.value1)(v1));
          };
          throw new Error("Failed pattern match at Data.List.Types line 95, column 3 - line 95, column 20: " + [ v.constructor.name, v1.constructor.name ]);
      };
  });
  var bindList = new Control_Bind.Bind(function () {
      return applyList;
  }, function (v) {
      return function (v1) {
          if (v instanceof Nil) {
              return Nil.value;
          };
          if (v instanceof Cons) {
              return Data_Semigroup.append(semigroupList)(v1(v.value0))(Control_Bind.bind(bindList)(v.value1)(v1));
          };
          throw new Error("Failed pattern match at Data.List.Types line 102, column 3 - line 102, column 19: " + [ v.constructor.name, v1.constructor.name ]);
      };
  });
  var applicativeList = new Control_Applicative.Applicative(function () {
      return applyList;
  }, function (a) {
      return new Cons(a, Nil.value);
  });                                              
  var altList = new Control_Alt.Alt(function () {
      return functorList;
  }, Data_Semigroup.append(semigroupList));
  var plusList = new Control_Plus.Plus(function () {
      return altList;
  }, Nil.value);
  exports["Nil"] = Nil;
  exports["Cons"] = Cons;
  exports["NonEmptyList"] = NonEmptyList;
  exports["showList"] = showList;
  exports["semigroupList"] = semigroupList;
  exports["monoidList"] = monoidList;
  exports["functorList"] = functorList;
  exports["foldableList"] = foldableList;
  exports["traversableList"] = traversableList;
  exports["applyList"] = applyList;
  exports["applicativeList"] = applicativeList;
  exports["bindList"] = bindList;
  exports["altList"] = altList;
  exports["plusList"] = plusList;
  exports["showNonEmptyList"] = showNonEmptyList;
})(PS["Data.List.Types"] = PS["Data.List.Types"] || {});
(function(exports) {
  // Generated by purs version 0.11.3
  "use strict";
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Category = PS["Control.Category"];
  var Control_Lazy = PS["Control.Lazy"];
  var Control_Monad_Rec_Class = PS["Control.Monad.Rec.Class"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Bifunctor = PS["Data.Bifunctor"];
  var Data_Boolean = PS["Data.Boolean"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_List_Types = PS["Data.List.Types"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_NonEmpty = PS["Data.NonEmpty"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unfoldable = PS["Data.Unfoldable"];
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];
  var span = function (v) {
      return function (v1) {
          if (v1 instanceof Data_List_Types.Cons && v(v1.value0)) {
              var v2 = span(v)(v1.value1);
              return {
                  init: new Data_List_Types.Cons(v1.value0, v2.init), 
                  rest: v2.rest
              };
          };
          return {
              init: Data_List_Types.Nil.value, 
              rest: v1
          };
      };
  };
  var snoc = function (xs) {
      return function (x) {
          return Data_Foldable.foldr(Data_List_Types.foldableList)(Data_List_Types.Cons.create)(new Data_List_Types.Cons(x, Data_List_Types.Nil.value))(xs);
      };
  };
  var singleton = function (a) {
      return new Data_List_Types.Cons(a, Data_List_Types.Nil.value);
  };
  var reverse = (function () {
      var go = function (__copy_acc) {
          return function (__copy_v) {
              var acc = __copy_acc;
              var v = __copy_v;
              var __tco_done = false;
              var __tco_result;
              var __tco_acc;
              var __tco_v;
              function __tco_loop(acc, v) {
                  if (v instanceof Data_List_Types.Nil) {
                      __tco_done = true;
                      return acc;
                  };
                  if (v instanceof Data_List_Types.Cons) {
                      __tco_acc = new Data_List_Types.Cons(v.value0, acc);
                      __tco_v = v.value1;
                      return;
                  };
                  throw new Error("Failed pattern match at Data.List line 363, column 11 - line 366, column 36: " + [ acc.constructor.name, v.constructor.name ]);
              };
              while (!__tco_done) {
                  __tco_result = __tco_loop(acc, v);
                  acc = __tco_acc;
                  v = __tco_v;
              };
              return __tco_result;
          };
      };
      return go(Data_List_Types.Nil.value);
  })();
  var take = (function () {
      var go = function (__copy_acc) {
          return function (__copy_v) {
              return function (__copy_v1) {
                  var acc = __copy_acc;
                  var v = __copy_v;
                  var v1 = __copy_v1;
                  var __tco_done = false;
                  var __tco_result;
                  var __tco_acc;
                  var __tco_v;
                  var __tco_v1;
                  function __tco_loop(acc, v, v1) {
                      if (v === 0) {
                          __tco_done = true;
                          return reverse(acc);
                      };
                      if (v1 instanceof Data_List_Types.Nil) {
                          __tco_done = true;
                          return reverse(acc);
                      };
                      if (v1 instanceof Data_List_Types.Cons) {
                          __tco_acc = new Data_List_Types.Cons(v1.value0, acc);
                          __tco_v = v - 1 | 0;
                          __tco_v1 = v1.value1;
                          return;
                      };
                      throw new Error("Failed pattern match at Data.List line 516, column 8 - line 520, column 46: " + [ acc.constructor.name, v.constructor.name, v1.constructor.name ]);
                  };
                  while (!__tco_done) {
                      __tco_result = __tco_loop(acc, v, v1);
                      acc = __tco_acc;
                      v = __tco_v;
                      v1 = __tco_v1;
                  };
                  return __tco_result;
              };
          };
      };
      return go(Data_List_Types.Nil.value);
  })();
  var unsnoc = function (lst) {
      var go = function (__copy_v) {
          return function (__copy_acc) {
              var v = __copy_v;
              var acc = __copy_acc;
              var __tco_done = false;
              var __tco_result;
              var __tco_v;
              var __tco_acc;
              function __tco_loop(v, acc) {
                  if (v instanceof Data_List_Types.Nil) {
                      __tco_done = true;
                      return Data_Maybe.Nothing.value;
                  };
                  if (v instanceof Data_List_Types.Cons && v.value1 instanceof Data_List_Types.Nil) {
                      __tco_done = true;
                      return new Data_Maybe.Just({
                          revInit: acc, 
                          last: v.value0
                      });
                  };
                  if (v instanceof Data_List_Types.Cons) {
                      __tco_v = v.value1;
                      __tco_acc = new Data_List_Types.Cons(v.value0, acc);
                      return;
                  };
                  throw new Error("Failed pattern match at Data.List line 265, column 14 - line 269, column 36: " + [ v.constructor.name, acc.constructor.name ]);
              };
              while (!__tco_done) {
                  __tco_result = __tco_loop(v, acc);
                  v = __tco_v;
                  acc = __tco_acc;
              };
              return __tco_result;
          };
      };
      return Data_Functor.map(Data_Maybe.functorMaybe)(function (h) {
          return {
              init: reverse(h.revInit), 
              last: h.last
          };
      })(go(lst)(Data_List_Types.Nil.value));
  };
  var zipWith = function (f) {
      return function (xs) {
          return function (ys) {
              var go = function (__copy_v) {
                  return function (__copy_v1) {
                      return function (__copy_acc) {
                          var v = __copy_v;
                          var v1 = __copy_v1;
                          var acc = __copy_acc;
                          var __tco_done = false;
                          var __tco_result;
                          var __tco_v;
                          var __tco_v1;
                          var __tco_acc;
                          function __tco_loop(v, v1, acc) {
                              if (v instanceof Data_List_Types.Nil) {
                                  __tco_done = true;
                                  return acc;
                              };
                              if (v1 instanceof Data_List_Types.Nil) {
                                  __tco_done = true;
                                  return acc;
                              };
                              if (v instanceof Data_List_Types.Cons && v1 instanceof Data_List_Types.Cons) {
                                  __tco_v = v.value1;
                                  __tco_v1 = v1.value1;
                                  __tco_acc = new Data_List_Types.Cons(f(v.value0)(v1.value0), acc);
                                  return;
                              };
                              throw new Error("Failed pattern match at Data.List line 690, column 19 - line 694, column 52: " + [ v.constructor.name, v1.constructor.name, acc.constructor.name ]);
                          };
                          while (!__tco_done) {
                              __tco_result = __tco_loop(v, v1, acc);
                              v = __tco_v;
                              v1 = __tco_v1;
                              acc = __tco_acc;
                          };
                          return __tco_result;
                      };
                  };
              };
              return reverse(go(xs)(ys)(Data_List_Types.Nil.value));
          };
      };
  };
  var range = function (start) {
      return function (end) {
          if (start === end) {
              return singleton(start);
          };
          if (Data_Boolean.otherwise) {
              var go = function (__copy_s) {
                  return function (__copy_e) {
                      return function (__copy_step) {
                          return function (__copy_rest) {
                              var s = __copy_s;
                              var e = __copy_e;
                              var step = __copy_step;
                              var rest = __copy_rest;
                              var __tco_done = false;
                              var __tco_result;
                              var __tco_s;
                              var __tco_e;
                              var __tco_step;
                              var __tco_rest;
                              function __tco_loop(s, e, step, rest) {
                                  if (s === e) {
                                      __tco_done = true;
                                      return new Data_List_Types.Cons(s, rest);
                                  };
                                  if (Data_Boolean.otherwise) {
                                      __tco_s = s + step | 0;
                                      __tco_e = e;
                                      __tco_step = step;
                                      __tco_rest = new Data_List_Types.Cons(s, rest);
                                      return;
                                  };
                                  throw new Error("Failed pattern match at Data.List line 143, column 31 - line 146, column 65: " + [ s.constructor.name, e.constructor.name, step.constructor.name, rest.constructor.name ]);
                              };
                              while (!__tco_done) {
                                  __tco_result = __tco_loop(s, e, step, rest);
                                  s = __tco_s;
                                  e = __tco_e;
                                  step = __tco_step;
                                  rest = __tco_rest;
                              };
                              return __tco_result;
                          };
                      };
                  };
              };
              return go(end)(start)((function () {
                  var $221 = start > end;
                  if ($221) {
                      return 1;
                  };
                  return -1 | 0;
              })())(Data_List_Types.Nil.value);
          };
          throw new Error("Failed pattern match at Data.List line 142, column 1 - line 146, column 65: " + [ start.constructor.name, end.constructor.name ]);
      };
  };
  var some = function (dictAlternative) {
      return function (dictLazy) {
          return function (v) {
              return Control_Apply.apply((dictAlternative.Applicative0()).Apply0())(Data_Functor.map(((dictAlternative.Plus1()).Alt0()).Functor0())(Data_List_Types.Cons.create)(v))(Control_Lazy.defer(dictLazy)(function (v1) {
                  return many(dictAlternative)(dictLazy)(v);
              }));
          };
      };
  };
  var many = function (dictAlternative) {
      return function (dictLazy) {
          return function (v) {
              return Control_Alt.alt((dictAlternative.Plus1()).Alt0())(some(dictAlternative)(dictLazy)(v))(Control_Applicative.pure(dictAlternative.Applicative0())(Data_List_Types.Nil.value));
          };
      };
  };
  var length = Data_Foldable.foldl(Data_List_Types.foldableList)(function (acc) {
      return function (v) {
          return acc + 1 | 0;
      };
  })(0);
  var last = function (__copy_v) {
      var v = __copy_v;
      var __tco_done = false;
      var __tco_result;
      var __tco_v;
      function __tco_loop(v) {
          if (v instanceof Data_List_Types.Cons && v.value1 instanceof Data_List_Types.Nil) {
              __tco_done = true;
              return new Data_Maybe.Just(v.value0);
          };
          if (v instanceof Data_List_Types.Cons) {
              __tco_v = v.value1;
              return;
          };
          __tco_done = true;
          return Data_Maybe.Nothing.value;
      };
      while (!__tco_done) {
          __tco_result = __tco_loop(v);
          v = __tco_v;
      };
      return __tco_result;
  };
  var insertBy = function (v) {
      return function (x) {
          return function (v1) {
              if (v1 instanceof Data_List_Types.Nil) {
                  return singleton(x);
              };
              if (v1 instanceof Data_List_Types.Cons) {
                  var v2 = v(x)(v1.value0);
                  if (v2 instanceof Data_Ordering.GT) {
                      return new Data_List_Types.Cons(v1.value0, insertBy(v)(x)(v1.value1));
                  };
                  return new Data_List_Types.Cons(x, v1);
              };
              throw new Error("Failed pattern match at Data.List line 214, column 1 - line 214, column 31: " + [ v.constructor.name, x.constructor.name, v1.constructor.name ]);
          };
      };
  };
  var init = function (lst) {
      return Data_Functor.map(Data_Maybe.functorMaybe)(function (v) {
          return v.init;
      })(unsnoc(lst));
  };
  var head = function (v) {
      if (v instanceof Data_List_Types.Nil) {
          return Data_Maybe.Nothing.value;
      };
      if (v instanceof Data_List_Types.Cons) {
          return new Data_Maybe.Just(v.value0);
      };
      throw new Error("Failed pattern match at Data.List line 228, column 1 - line 228, column 19: " + [ v.constructor.name ]);
  };
  var fromFoldable = function (dictFoldable) {
      return Data_Foldable.foldr(dictFoldable)(Data_List_Types.Cons.create)(Data_List_Types.Nil.value);
  };
  var findIndex = function (fn) {
      var go = function (__copy_v) {
          return function (__copy_v1) {
              var v = __copy_v;
              var v1 = __copy_v1;
              var __tco_done = false;
              var __tco_result;
              var __tco_v;
              var __tco_v1;
              function __tco_loop(v, v1) {
                  if (v1 instanceof Data_List_Types.Cons) {
                      if (fn(v1.value0)) {
                          __tco_done = true;
                          return new Data_Maybe.Just(v);
                      };
                      if (Data_Boolean.otherwise) {
                          __tco_v = v + 1 | 0;
                          __tco_v1 = v1.value1;
                          return;
                      };
                  };
                  if (v1 instanceof Data_List_Types.Nil) {
                      __tco_done = true;
                      return Data_Maybe.Nothing.value;
                  };
                  throw new Error("Failed pattern match at Data.List line 299, column 3 - line 300, column 44: " + [ v.constructor.name, v1.constructor.name ]);
              };
              while (!__tco_done) {
                  __tco_result = __tco_loop(v, v1);
                  v = __tco_v;
                  v1 = __tco_v1;
              };
              return __tco_result;
          };
      };
      return go(0);
  };
  var filter = function (p) {
      var go = function (__copy_acc) {
          return function (__copy_v) {
              var acc = __copy_acc;
              var v = __copy_v;
              var __tco_done = false;
              var __tco_result;
              var __tco_acc;
              var __tco_v;
              function __tco_loop(acc, v) {
                  if (v instanceof Data_List_Types.Nil) {
                      __tco_done = true;
                      return reverse(acc);
                  };
                  if (v instanceof Data_List_Types.Cons) {
                      if (p(v.value0)) {
                          __tco_acc = new Data_List_Types.Cons(v.value0, acc);
                          __tco_v = v.value1;
                          return;
                      };
                      if (Data_Boolean.otherwise) {
                          __tco_acc = acc;
                          __tco_v = v.value1;
                          return;
                      };
                  };
                  throw new Error("Failed pattern match at Data.List line 385, column 12 - line 390, column 28: " + [ acc.constructor.name, v.constructor.name ]);
              };
              while (!__tco_done) {
                  __tco_result = __tco_loop(acc, v);
                  acc = __tco_acc;
                  v = __tco_v;
              };
              return __tco_result;
          };
      };
      return go(Data_List_Types.Nil.value);
  };
  var elemIndex = function (dictEq) {
      return function (x) {
          return findIndex(function (v) {
              return Data_Eq.eq(dictEq)(v)(x);
          });
      };
  };
  var drop = function (__copy_v) {
      return function (__copy_v1) {
          var v = __copy_v;
          var v1 = __copy_v1;
          var __tco_done = false;
          var __tco_result;
          var __tco_v;
          var __tco_v1;
          function __tco_loop(v, v1) {
              if (v === 0) {
                  __tco_done = true;
                  return v1;
              };
              if (v1 instanceof Data_List_Types.Nil) {
                  __tco_done = true;
                  return Data_List_Types.Nil.value;
              };
              if (v1 instanceof Data_List_Types.Cons) {
                  __tco_v = v - 1 | 0;
                  __tco_v1 = v1.value1;
                  return;
              };
              throw new Error("Failed pattern match at Data.List line 535, column 1 - line 535, column 15: " + [ v.constructor.name, v1.constructor.name ]);
          };
          while (!__tco_done) {
              __tco_result = __tco_loop(v, v1);
              v = __tco_v;
              v1 = __tco_v1;
          };
          return __tco_result;
      };
  };
  var deleteAt = function (v) {
      return function (v1) {
          if (v === 0 && v1 instanceof Data_List_Types.Cons) {
              return new Data_Maybe.Just(v1.value1);
          };
          if (v1 instanceof Data_List_Types.Cons) {
              return Data_Functor.map(Data_Maybe.functorMaybe)(function (v2) {
                  return new Data_List_Types.Cons(v1.value0, v2);
              })(deleteAt(v - 1 | 0)(v1.value1));
          };
          return Data_Maybe.Nothing.value;
      };
  };
  exports["deleteAt"] = deleteAt;
  exports["drop"] = drop;
  exports["elemIndex"] = elemIndex;
  exports["filter"] = filter;
  exports["findIndex"] = findIndex;
  exports["fromFoldable"] = fromFoldable;
  exports["head"] = head;
  exports["init"] = init;
  exports["insertBy"] = insertBy;
  exports["last"] = last;
  exports["length"] = length;
  exports["many"] = many;
  exports["range"] = range;
  exports["reverse"] = reverse;
  exports["singleton"] = singleton;
  exports["snoc"] = snoc;
  exports["some"] = some;
  exports["span"] = span;
  exports["take"] = take;
  exports["unsnoc"] = unsnoc;
  exports["zipWith"] = zipWith;
})(PS["Data.List"] = PS["Data.List"] || {});
(function(exports) {
  // Generated by purs version 0.11.3
  "use strict";
  var Color = PS["Color"];
  var Color_Scheme_X11 = PS["Color.Scheme.X11"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Data_Boolean = PS["Data.Boolean"];
  var Data_Eq = PS["Data.Eq"];
  var Data_EuclideanRing = PS["Data.EuclideanRing"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Int = PS["Data.Int"];
  var Data_List = PS["Data.List"];
  var Data_List_Types = PS["Data.List.Types"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var Prelude = PS["Prelude"];        
  var ColorStop = (function () {
      function ColorStop(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      ColorStop.create = function (value0) {
          return function (value1) {
              return new ColorStop(value0, value1);
          };
      };
      return ColorStop;
  })();
  var ColorStops = (function () {
      function ColorStops(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      ColorStops.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new ColorStops(value0, value1, value2);
              };
          };
      };
      return ColorStops;
  })();
  var ColorScale = (function () {
      function ColorScale(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      ColorScale.create = function (value0) {
          return function (value1) {
              return new ColorScale(value0, value1);
          };
      };
      return ColorScale;
  })();
  var stopRatio = function (v) {
      return v.value1;
  };
  var ratio = Data_Ord.clamp(Data_Ord.ordNumber)(0.0)(1.0);
  var modify$prime = function (f) {
      return function (v) {
          var f$prime = function (v1) {
              return new ColorStop(f(v1.value1)(v1.value0), v1.value1);
          };
          return new ColorStops(f(0.0)(v.value0), Data_Functor.map(Data_List_Types.functorList)(f$prime)(v.value1), f(1.0)(v.value2));
      };
  };
  var modify = function (f) {
      return function (v) {
          return ColorScale.create(v.value0)(modify$prime(f)(v.value1));
      };
  };
  var cssColorStopsRGB = function (v) {
      if (v.value1 instanceof Data_List_Types.Nil) {
          return Color.cssStringHSLA(v.value0) + (", " + Color.cssStringHSLA(v.value2));
      };
      var percentage = function (r) {
          return Data_Show.show(Data_Show.showNumber)(r * 100.0) + "%";
      };
      var toString = function (v1) {
          return Color.cssStringHSLA(v1.value0) + (" " + percentage(v1.value1));
      };
      return Color.cssStringHSLA(v.value0) + (", " + (Data_Foldable.intercalate(Data_List_Types.foldableList)(Data_Monoid.monoidString)(", ")(Data_Functor.map(Data_List_Types.functorList)(toString)(v.value1)) + (", " + Color.cssStringHSLA(v.value2))));
  };
  var colors$prime = function (f) {
      return function (v) {
          if (v === 0) {
              return Data_List_Types.Nil.value;
          };
          if (v === 1) {
              return new Data_List_Types.Cons(f(0.0), Data_List_Types.Nil.value);
          };
          var mkColor = function (i) {
              return f(Data_Int.toNumber(i) / Data_Int.toNumber(v - 1 | 0));
          };
          return Data_Functor.map(Data_List_Types.functorList)(mkColor)(Data_List.range(0)(v - 1 | 0));
      };
  };
  var colorStop = function (c) {
      return function (r) {
          return new ColorStop(c, ratio(r));
      };
  };
  var mkSimpleSampler = function (interpolate) {
      return function (v) {
          return function (x) {
              if (x < 0.0) {
                  return v.value0;
              };
              if (x > 1.0) {
                  return v.value2;
              };
              if (Data_Boolean.otherwise) {
                  var go = function (__copy_v1) {
                      return function (__copy_v2) {
                          return function (__copy_v3) {
                              var v1 = __copy_v1;
                              var v2 = __copy_v2;
                              var v3 = __copy_v3;
                              var __tco_done = false;
                              var __tco_result;
                              var __tco_v1;
                              var __tco_v2;
                              var __tco_v3;
                              function __tco_loop(v1, v2, v3) {
                                  if (v3 instanceof Data_List_Types.Nil) {
                                      __tco_done = true;
                                      return v1;
                                  };
                                  if (v3 instanceof Data_List_Types.Cons) {
                                      var $61 = Data_Ord.between(Data_Ord.ordNumber)(v2)(v3.value0.value1)(x);
                                      if ($61) {
                                          var $62 = v2 === v3.value0.value1;
                                          if ($62) {
                                              __tco_done = true;
                                              return v1;
                                          };
                                          __tco_done = true;
                                          return interpolate(v1)(v3.value0.value0)((x - v2) / (v3.value0.value1 - v2));
                                      };
                                      __tco_v1 = v3.value0.value0;
                                      __tco_v2 = v3.value0.value1;
                                      __tco_v3 = v3.value1;
                                      return;
                                  };
                                  throw new Error("Failed pattern match at Color.Scale line 122, column 17 - line 130, column 30: " + [ v1.constructor.name, v2.constructor.name, v3.constructor.name ]);
                              };
                              while (!__tco_done) {
                                  __tco_result = __tco_loop(v1, v2, v3);
                                  v1 = __tco_v1;
                                  v2 = __tco_v2;
                                  v3 = __tco_v3;
                              };
                              return __tco_result;
                          };
                      };
                  };
                  return go(v.value0)(0.0)(Data_List.snoc(v.value1)(colorStop(v.value2)(1.0)));
              };
              throw new Error("Failed pattern match at Color.Scale line 119, column 1 - line 130, column 30: " + [ interpolate.constructor.name, v.constructor.name, x.constructor.name ]);
          };
      };
  };                                                             
  var sample = function (v) {
      return mkSimpleSampler(Color.mix(v.value0))(v.value1);
  };
  var colors = function (scale) {
      return colors$prime(sample(scale));
  };
  var uniformScale$prime = function (dictFoldable) {
      return function (b) {
          return function (middle) {
              return function (e) {
                  var cs = Data_List.fromFoldable(dictFoldable)(middle);
                  var len = Data_List.length(cs);
                  var n = 1 + len | 0;
                  var makeStop = function (i) {
                      return function (col) {
                          return colorStop(col)(Data_Int.toNumber(i) / Data_Int.toNumber(n));
                      };
                  };
                  var stops = Data_List.zipWith(makeStop)(Data_List.range(1)(n))(cs);
                  return new ColorStops(b, stops, e);
              };
          };
      };
  };
  var uniformScale = function (dictFoldable) {
      return function (mode) {
          return function (b) {
              return function (middle) {
                  return function (e) {
                      return ColorScale.create(mode)(uniformScale$prime(dictFoldable)(b)(middle)(e));
                  };
              };
          };
      };
  };
  var yellowToRed = (function () {
      var yellow = Color.fromInt(16777164);
      var red = Color.fromInt(8388646);
      var orange = Color.fromInt(16616764);
      return uniformScale(Data_List_Types.foldableList)(Color.Lab.value)(yellow)(new Data_List_Types.Cons(orange, Data_List_Types.Nil.value))(red);
  })();
  var colorScale = function (space) {
      return function (b) {
          return function (middle) {
              return function (e) {
                  return ColorScale.create(space)(new ColorStops(b, middle, e));
              };
          };
      };
  };
  var cool = colorScale(Color.RGB.value)(Color.hsl(180.0)(1.0)(0.6))(Data_List_Types.Nil.value)(Color.hsl(300.0)(1.0)(0.5));
  var grayscale = colorScale(Color.RGB.value)(Color.black)(Data_List_Types.Nil.value)(Color.white);
  var hot = colorScale(Color.RGB.value)(Color.black)(new Data_List_Types.Cons(colorStop(Color_Scheme_X11.red)(0.5), new Data_List_Types.Cons(colorStop(Color_Scheme_X11.yellow)(0.75), Data_List_Types.Nil.value)))(Color.white);
  var spectrum = (function () {
      var stops = Control_Bind.bind(Data_List_Types.bindList)(Data_List.range(1)(35))(function (v) {
          var r = Data_Int.toNumber(v);
          return Control_Applicative.pure(Data_List_Types.applicativeList)(colorStop(Color.hsl(10.0 * r)(1.0)(0.5))(r / 36.0));
      });
      var end = Color.hsl(0.0)(1.0)(0.5);
      return colorScale(Color.HSL.value)(end)(stops)(end);
  })();
  var spectrumLCh = (function () {
      var end = Color.lch(70.0)(35.0)(0.0);
      var stops = Control_Bind.bind(Data_List_Types.bindList)(Data_List.range(1)(35))(function (v) {
          var r = Data_Int.toNumber(v);
          return Control_Applicative.pure(Data_List_Types.applicativeList)(colorStop(Color.lch(70.0)(35.0)(10.0 * r))(r / 36.0));
      });
      return colorScale(Color.LCh.value)(end)(stops)(end);
  })();
  var blueToRed = (function () {
      var red = Color.fromInt(11671595);
      var gray = Color.fromInt(16250871);
      var blue = Color.fromInt(2188972);
      return uniformScale(Data_List_Types.foldableList)(Color.Lab.value)(blue)(new Data_List_Types.Cons(gray, Data_List_Types.Nil.value))(red);
  })();
  var addStop$prime = function (v) {
      return function (c) {
          return function (r) {
              var stop = colorStop(c)(r);
              return new ColorStops(v.value0, Data_List.insertBy(Data_Ord.comparing(Data_Ord.ordNumber)(stopRatio))(stop)(v.value1), v.value2);
          };
      };
  };
  var minColorStops = function (v) {
      return function (v1) {
          return function (stops) {
              if (v === 0) {
                  return stops;
              };
              var insertStops = Data_Foldable.foldl(Data_List_Types.foldableList)(function (stops$prime) {
                  return function (v2) {
                      return addStop$prime(stops$prime)(v2.value0)(v2.value1);
                  };
              });
              var additionalStops = (function () {
                  var $87 = v <= 2;
                  if ($87) {
                      return Data_List_Types.Nil.value;
                  };
                  return Control_Bind.bind(Data_List_Types.bindList)(Data_List.range(1)(v - 1 | 0))(function (v2) {
                      var frac = ratio(Data_Int.toNumber(v2) / Data_Int.toNumber(v));
                      return Control_Applicative.pure(Data_List_Types.applicativeList)(new ColorStop(v1(stops)(frac), frac));
                  });
              })();
              return insertStops(stops)(additionalStops);
          };
      };
  };
  var cssColorStops = function (v) {
      if (v.value0 instanceof Color.RGB) {
          return cssColorStopsRGB(v.value1);
      };
      return cssColorStopsRGB(minColorStops(10)(mkSimpleSampler(Color.mix(Color.RGB.value)))(v.value1));
  };
  var cubehelix = (function () {
      var e = Color.hsl(-240.0)(0.5)(1.0);
      var b = Color.hsl(300.0)(0.5)(0.0);
      var gen = function (v) {
          return Color.mixCubehelix(1.0)(b)(e);
      };
      return ColorScale.create(Color.HSL.value)(minColorStops(100)(gen)(new ColorStops(b, Data_List_Types.Nil.value, e)));
  })();
  var addStop = function (v) {
      return function (c) {
          return function (r) {
              return ColorScale.create(v.value0)(addStop$prime(v.value1)(c)(r));
          };
      };
  };
  exports["ColorStops"] = ColorStops;
  exports["addStop"] = addStop;
  exports["blueToRed"] = blueToRed;
  exports["colorScale"] = colorScale;
  exports["colorStop"] = colorStop;
  exports["colors"] = colors;
  exports["cool"] = cool;
  exports["cssColorStops"] = cssColorStops;
  exports["cssColorStopsRGB"] = cssColorStopsRGB;
  exports["cubehelix"] = cubehelix;
  exports["grayscale"] = grayscale;
  exports["hot"] = hot;
  exports["minColorStops"] = minColorStops;
  exports["mkSimpleSampler"] = mkSimpleSampler;
  exports["modify"] = modify;
  exports["sample"] = sample;
  exports["spectrum"] = spectrum;
  exports["spectrumLCh"] = spectrumLCh;
  exports["uniformScale"] = uniformScale;
  exports["yellowToRed"] = yellowToRed;
})(PS["Color.Scale"] = PS["Color.Scale"] || {});
(function(exports) {
  // Generated by purs version 0.11.3
  "use strict";
  var Data_Array = PS["Data.Array"];
  var Data_Ring = PS["Data.Ring"];
  var Prelude = PS["Prelude"];
  var last = function (dictPartial) {
      return function (xs) {
          return xs[Data_Array.length(xs) - 1 | 0];
      };
  };
  var head = function (dictPartial) {
      return function (xs) {
          return xs[0];
      };
  };
  exports["head"] = head;
  exports["last"] = last;
})(PS["Data.Array.Partial"] = PS["Data.Array.Partial"] || {});
(function(exports) {
  // Generated by purs version 0.11.3
  "use strict";
  var Color = PS["Color"];
  var Color_Scale = PS["Color.Scale"];
  var Data_Array = PS["Data.Array"];
  var Data_Array_Partial = PS["Data.Array.Partial"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Functor = PS["Data.Functor"];
  var Partial_Unsafe = PS["Partial.Unsafe"];
  var Prelude = PS["Prelude"];        
  var matplotlibScale = function (dictPartial) {
      return function (rgbs) {
          var toColor = function (v) {
              if (v.length === 3) {
                  return Color["rgb'"](v[0])(v[1])(v[2]);
              };
              return Color["rgb'"](0.0)(0.0)(0.0);
          };
          var stop = toColor(Data_Array_Partial.last(dictPartial)(rgbs));
          var start = toColor(Data_Array_Partial.head(dictPartial)(rgbs));
          var middle = Data_Functor.map(Data_Functor.functorArray)(toColor)(Data_Array.slice(1)(255)(rgbs));
          return Color_Scale.uniformScale(Data_Foldable.foldableArray)(Color.RGB.value)(start)(middle)(stop);
      };
  };
  var _viridis_data = [ [ 0.267004, 4.874e-3, 0.329415 ], [ 0.26851, 9.605e-3, 0.335427 ], [ 0.269944, 1.4625e-2, 0.341379 ], [ 0.271305, 1.9942e-2, 0.347269 ], [ 0.272594, 2.5563e-2, 0.353093 ], [ 0.273809, 3.1497e-2, 0.358853 ], [ 0.274952, 3.7752e-2, 0.364543 ], [ 0.276022, 4.4167e-2, 0.370164 ], [ 0.277018, 5.0344e-2, 0.375715 ], [ 0.277941, 5.6324e-2, 0.381191 ], [ 0.278791, 6.2145e-2, 0.386592 ], [ 0.279566, 6.7836e-2, 0.391917 ], [ 0.280267, 7.3417e-2, 0.397163 ], [ 0.280894, 7.8907e-2, 0.402329 ], [ 0.281446, 8.432e-2, 0.407414 ], [ 0.281924, 8.9666e-2, 0.412415 ], [ 0.282327, 9.4955e-2, 0.417331 ], [ 0.282656, 0.100196, 0.42216 ], [ 0.28291, 0.105393, 0.426902 ], [ 0.283091, 0.110553, 0.431554 ], [ 0.283197, 0.11568, 0.436115 ], [ 0.283229, 0.120777, 0.440584 ], [ 0.283187, 0.125848, 0.44496 ], [ 0.283072, 0.130895, 0.449241 ], [ 0.282884, 0.13592, 0.453427 ], [ 0.282623, 0.140926, 0.457517 ], [ 0.28229, 0.145912, 0.46151 ], [ 0.281887, 0.150881, 0.465405 ], [ 0.281412, 0.155834, 0.469201 ], [ 0.280868, 0.160771, 0.472899 ], [ 0.280255, 0.165693, 0.476498 ], [ 0.279574, 0.170599, 0.479997 ], [ 0.278826, 0.17549, 0.483397 ], [ 0.278012, 0.180367, 0.486697 ], [ 0.277134, 0.185228, 0.489898 ], [ 0.276194, 0.190074, 0.493001 ], [ 0.275191, 0.194905, 0.496005 ], [ 0.274128, 0.199721, 0.498911 ], [ 0.273006, 0.20452, 0.501721 ], [ 0.271828, 0.209303, 0.504434 ], [ 0.270595, 0.214069, 0.507052 ], [ 0.269308, 0.218818, 0.509577 ], [ 0.267968, 0.223549, 0.512008 ], [ 0.26658, 0.228262, 0.514349 ], [ 0.265145, 0.232956, 0.516599 ], [ 0.263663, 0.237631, 0.518762 ], [ 0.262138, 0.242286, 0.520837 ], [ 0.260571, 0.246922, 0.522828 ], [ 0.258965, 0.251537, 0.524736 ], [ 0.257322, 0.25613, 0.526563 ], [ 0.255645, 0.260703, 0.528312 ], [ 0.253935, 0.265254, 0.529983 ], [ 0.252194, 0.269783, 0.531579 ], [ 0.250425, 0.27429, 0.533103 ], [ 0.248629, 0.278775, 0.534556 ], [ 0.246811, 0.283237, 0.535941 ], [ 0.244972, 0.287675, 0.53726 ], [ 0.243113, 0.292092, 0.538516 ], [ 0.241237, 0.296485, 0.539709 ], [ 0.239346, 0.300855, 0.540844 ], [ 0.237441, 0.305202, 0.541921 ], [ 0.235526, 0.309527, 0.542944 ], [ 0.233603, 0.313828, 0.543914 ], [ 0.231674, 0.318106, 0.544834 ], [ 0.229739, 0.322361, 0.545706 ], [ 0.227802, 0.326594, 0.546532 ], [ 0.225863, 0.330805, 0.547314 ], [ 0.223925, 0.334994, 0.548053 ], [ 0.221989, 0.339161, 0.548752 ], [ 0.220057, 0.343307, 0.549413 ], [ 0.21813, 0.347432, 0.550038 ], [ 0.21621, 0.351535, 0.550627 ], [ 0.214298, 0.355619, 0.551184 ], [ 0.212395, 0.359683, 0.55171 ], [ 0.210503, 0.363727, 0.552206 ], [ 0.208623, 0.367752, 0.552675 ], [ 0.206756, 0.371758, 0.553117 ], [ 0.204903, 0.375746, 0.553533 ], [ 0.203063, 0.379716, 0.553925 ], [ 0.201239, 0.38367, 0.554294 ], [ 0.19943, 0.387607, 0.554642 ], [ 0.197636, 0.391528, 0.554969 ], [ 0.19586, 0.395433, 0.555276 ], [ 0.1941, 0.399323, 0.555565 ], [ 0.192357, 0.403199, 0.555836 ], [ 0.190631, 0.407061, 0.556089 ], [ 0.188923, 0.41091, 0.556326 ], [ 0.187231, 0.414746, 0.556547 ], [ 0.185556, 0.41857, 0.556753 ], [ 0.183898, 0.422383, 0.556944 ], [ 0.182256, 0.426184, 0.55712 ], [ 0.180629, 0.429975, 0.557282 ], [ 0.179019, 0.433756, 0.55743 ], [ 0.177423, 0.437527, 0.557565 ], [ 0.175841, 0.44129, 0.557685 ], [ 0.174274, 0.445044, 0.557792 ], [ 0.172719, 0.448791, 0.557885 ], [ 0.171176, 0.45253, 0.557965 ], [ 0.169646, 0.456262, 0.55803 ], [ 0.168126, 0.459988, 0.558082 ], [ 0.166617, 0.463708, 0.558119 ], [ 0.165117, 0.467423, 0.558141 ], [ 0.163625, 0.471133, 0.558148 ], [ 0.162142, 0.474838, 0.55814 ], [ 0.160665, 0.47854, 0.558115 ], [ 0.159194, 0.482237, 0.558073 ], [ 0.157729, 0.485932, 0.558013 ], [ 0.15627, 0.489624, 0.557936 ], [ 0.154815, 0.493313, 0.55784 ], [ 0.153364, 0.497, 0.557724 ], [ 0.151918, 0.500685, 0.557587 ], [ 0.150476, 0.504369, 0.55743 ], [ 0.149039, 0.508051, 0.55725 ], [ 0.147607, 0.511733, 0.557049 ], [ 0.14618, 0.515413, 0.556823 ], [ 0.144759, 0.519093, 0.556572 ], [ 0.143343, 0.522773, 0.556295 ], [ 0.141935, 0.526453, 0.555991 ], [ 0.140536, 0.530132, 0.555659 ], [ 0.139147, 0.533812, 0.555298 ], [ 0.13777, 0.537492, 0.554906 ], [ 0.136408, 0.541173, 0.554483 ], [ 0.135066, 0.544853, 0.554029 ], [ 0.133743, 0.548535, 0.553541 ], [ 0.132444, 0.552216, 0.553018 ], [ 0.131172, 0.555899, 0.552459 ], [ 0.129933, 0.559582, 0.551864 ], [ 0.128729, 0.563265, 0.551229 ], [ 0.127568, 0.566949, 0.550556 ], [ 0.126453, 0.570633, 0.549841 ], [ 0.125394, 0.574318, 0.549086 ], [ 0.124395, 0.578002, 0.548287 ], [ 0.123463, 0.581687, 0.547445 ], [ 0.122606, 0.585371, 0.546557 ], [ 0.121831, 0.589055, 0.545623 ], [ 0.121148, 0.592739, 0.544641 ], [ 0.120565, 0.596422, 0.543611 ], [ 0.120092, 0.600104, 0.54253 ], [ 0.119738, 0.603785, 0.5414 ], [ 0.119512, 0.607464, 0.540218 ], [ 0.119423, 0.611141, 0.538982 ], [ 0.119483, 0.614817, 0.537692 ], [ 0.119699, 0.61849, 0.536347 ], [ 0.120081, 0.622161, 0.534946 ], [ 0.120638, 0.625828, 0.533488 ], [ 0.12138, 0.629492, 0.531973 ], [ 0.122312, 0.633153, 0.530398 ], [ 0.123444, 0.636809, 0.528763 ], [ 0.12478, 0.640461, 0.527068 ], [ 0.126326, 0.644107, 0.525311 ], [ 0.128087, 0.647749, 0.523491 ], [ 0.130067, 0.651384, 0.521608 ], [ 0.132268, 0.655014, 0.519661 ], [ 0.134692, 0.658636, 0.517649 ], [ 0.137339, 0.662252, 0.515571 ], [ 0.14021, 0.665859, 0.513427 ], [ 0.143303, 0.669459, 0.511215 ], [ 0.146616, 0.67305, 0.508936 ], [ 0.150148, 0.676631, 0.506589 ], [ 0.153894, 0.680203, 0.504172 ], [ 0.157851, 0.683765, 0.501686 ], [ 0.162016, 0.687316, 0.499129 ], [ 0.166383, 0.690856, 0.496502 ], [ 0.170948, 0.694384, 0.493803 ], [ 0.175707, 0.6979, 0.491033 ], [ 0.180653, 0.701402, 0.488189 ], [ 0.185783, 0.704891, 0.485273 ], [ 0.19109, 0.708366, 0.482284 ], [ 0.196571, 0.711827, 0.479221 ], [ 0.202219, 0.715272, 0.476084 ], [ 0.20803, 0.718701, 0.472873 ], [ 0.214, 0.722114, 0.469588 ], [ 0.220124, 0.725509, 0.466226 ], [ 0.226397, 0.728888, 0.462789 ], [ 0.232815, 0.732247, 0.459277 ], [ 0.239374, 0.735588, 0.455688 ], [ 0.24607, 0.73891, 0.452024 ], [ 0.252899, 0.742211, 0.448284 ], [ 0.259857, 0.745492, 0.444467 ], [ 0.266941, 0.748751, 0.440573 ], [ 0.274149, 0.751988, 0.436601 ], [ 0.281477, 0.755203, 0.432552 ], [ 0.288921, 0.758394, 0.428426 ], [ 0.296479, 0.761561, 0.424223 ], [ 0.304148, 0.764704, 0.419943 ], [ 0.311925, 0.767822, 0.415586 ], [ 0.319809, 0.770914, 0.411152 ], [ 0.327796, 0.77398, 0.40664 ], [ 0.335885, 0.777018, 0.402049 ], [ 0.344074, 0.780029, 0.397381 ], [ 0.35236, 0.783011, 0.392636 ], [ 0.360741, 0.785964, 0.387814 ], [ 0.369214, 0.788888, 0.382914 ], [ 0.377779, 0.791781, 0.377939 ], [ 0.386433, 0.794644, 0.372886 ], [ 0.395174, 0.797475, 0.367757 ], [ 0.404001, 0.800275, 0.362552 ], [ 0.412913, 0.803041, 0.357269 ], [ 0.421908, 0.805774, 0.35191 ], [ 0.430983, 0.808473, 0.346476 ], [ 0.440137, 0.811138, 0.340967 ], [ 0.449368, 0.813768, 0.335384 ], [ 0.458674, 0.816363, 0.329727 ], [ 0.468053, 0.818921, 0.323998 ], [ 0.477504, 0.821444, 0.318195 ], [ 0.487026, 0.823929, 0.312321 ], [ 0.496615, 0.826376, 0.306377 ], [ 0.506271, 0.828786, 0.300362 ], [ 0.515992, 0.831158, 0.294279 ], [ 0.525776, 0.833491, 0.288127 ], [ 0.535621, 0.835785, 0.281908 ], [ 0.545524, 0.838039, 0.275626 ], [ 0.555484, 0.840254, 0.269281 ], [ 0.565498, 0.84243, 0.262877 ], [ 0.575563, 0.844566, 0.256415 ], [ 0.585678, 0.846661, 0.249897 ], [ 0.595839, 0.848717, 0.243329 ], [ 0.606045, 0.850733, 0.236712 ], [ 0.616293, 0.852709, 0.230052 ], [ 0.626579, 0.854645, 0.223353 ], [ 0.636902, 0.856542, 0.21662 ], [ 0.647257, 0.8584, 0.209861 ], [ 0.657642, 0.860219, 0.203082 ], [ 0.668054, 0.861999, 0.196293 ], [ 0.678489, 0.863742, 0.189503 ], [ 0.688944, 0.865448, 0.182725 ], [ 0.699415, 0.867117, 0.175971 ], [ 0.709898, 0.868751, 0.169257 ], [ 0.720391, 0.87035, 0.162603 ], [ 0.730889, 0.871916, 0.156029 ], [ 0.741388, 0.873449, 0.149561 ], [ 0.751884, 0.874951, 0.143228 ], [ 0.762373, 0.876424, 0.137064 ], [ 0.772852, 0.877868, 0.131109 ], [ 0.783315, 0.879285, 0.125405 ], [ 0.79376, 0.880678, 0.120005 ], [ 0.804182, 0.882046, 0.114965 ], [ 0.814576, 0.883393, 0.110347 ], [ 0.82494, 0.88472, 0.106217 ], [ 0.83527, 0.886029, 0.102646 ], [ 0.845561, 0.887322, 9.9702e-2 ], [ 0.85581, 0.888601, 9.7452e-2 ], [ 0.866013, 0.889868, 9.5953e-2 ], [ 0.876168, 0.891125, 9.525e-2 ], [ 0.886271, 0.892374, 9.5374e-2 ], [ 0.89632, 0.893616, 9.6335e-2 ], [ 0.906311, 0.894855, 9.8125e-2 ], [ 0.916242, 0.896091, 0.100717 ], [ 0.926106, 0.89733, 0.104071 ], [ 0.935904, 0.89857, 0.108131 ], [ 0.945636, 0.899815, 0.112838 ], [ 0.9553, 0.901065, 0.118128 ], [ 0.964894, 0.902323, 0.123941 ], [ 0.974417, 0.90359, 0.130215 ], [ 0.983868, 0.904867, 0.136897 ], [ 0.993248, 0.906157, 0.143936 ] ];
  var viridis = matplotlibScale()(_viridis_data);
  var _plasma_data = [ [ 5.0383e-2, 2.9803e-2, 0.527975 ], [ 6.3536e-2, 2.8426e-2, 0.533124 ], [ 7.5353e-2, 2.7206e-2, 0.538007 ], [ 8.6222e-2, 2.6125e-2, 0.542658 ], [ 9.6379e-2, 2.5165e-2, 0.547103 ], [ 0.10598, 2.4309e-2, 0.551368 ], [ 0.115124, 2.3556e-2, 0.555468 ], [ 0.123903, 2.2878e-2, 0.559423 ], [ 0.132381, 2.2258e-2, 0.56325 ], [ 0.140603, 2.1687e-2, 0.566959 ], [ 0.148607, 2.1154e-2, 0.570562 ], [ 0.156421, 2.0651e-2, 0.574065 ], [ 0.16407, 2.0171e-2, 0.577478 ], [ 0.171574, 1.9706e-2, 0.580806 ], [ 0.17895, 1.9252e-2, 0.584054 ], [ 0.186213, 1.8803e-2, 0.587228 ], [ 0.193374, 1.8354e-2, 0.59033 ], [ 0.200445, 1.7902e-2, 0.593364 ], [ 0.207435, 1.7442e-2, 0.596333 ], [ 0.21435, 1.6973e-2, 0.599239 ], [ 0.221197, 1.6497e-2, 0.602083 ], [ 0.227983, 1.6007e-2, 0.604867 ], [ 0.234715, 1.5502e-2, 0.607592 ], [ 0.241396, 1.4979e-2, 0.610259 ], [ 0.248032, 1.4439e-2, 0.612868 ], [ 0.254627, 1.3882e-2, 0.615419 ], [ 0.261183, 1.3308e-2, 0.617911 ], [ 0.267703, 1.2716e-2, 0.620346 ], [ 0.274191, 1.2109e-2, 0.622722 ], [ 0.280648, 1.1488e-2, 0.625038 ], [ 0.287076, 1.0855e-2, 0.627295 ], [ 0.293478, 1.0213e-2, 0.62949 ], [ 0.299855, 9.561e-3, 0.631624 ], [ 0.30621, 8.902e-3, 0.633694 ], [ 0.312543, 8.239e-3, 0.6357 ], [ 0.318856, 7.576e-3, 0.63764 ], [ 0.32515, 6.915e-3, 0.639512 ], [ 0.331426, 6.261e-3, 0.641316 ], [ 0.337683, 5.618e-3, 0.643049 ], [ 0.343925, 4.991e-3, 0.64471 ], [ 0.35015, 4.382e-3, 0.646298 ], [ 0.356359, 3.798e-3, 0.64781 ], [ 0.362553, 3.243e-3, 0.649245 ], [ 0.368733, 2.724e-3, 0.650601 ], [ 0.374897, 2.245e-3, 0.651876 ], [ 0.381047, 1.814e-3, 0.653068 ], [ 0.387183, 1.434e-3, 0.654177 ], [ 0.393304, 1.114e-3, 0.655199 ], [ 0.399411, 8.59e-4, 0.656133 ], [ 0.405503, 6.78e-4, 0.656977 ], [ 0.41158, 5.77e-4, 0.65773 ], [ 0.417642, 5.64e-4, 0.65839 ], [ 0.423689, 6.46e-4, 0.658956 ], [ 0.429719, 8.31e-4, 0.659425 ], [ 0.435734, 1.127e-3, 0.659797 ], [ 0.441732, 1.54e-3, 0.660069 ], [ 0.447714, 2.08e-3, 0.66024 ], [ 0.453677, 2.755e-3, 0.66031 ], [ 0.459623, 3.574e-3, 0.660277 ], [ 0.46555, 4.545e-3, 0.660139 ], [ 0.471457, 5.678e-3, 0.659897 ], [ 0.477344, 6.98e-3, 0.659549 ], [ 0.48321, 8.46e-3, 0.659095 ], [ 0.489055, 1.0127e-2, 0.658534 ], [ 0.494877, 1.199e-2, 0.657865 ], [ 0.500678, 1.4055e-2, 0.657088 ], [ 0.506454, 1.6333e-2, 0.656202 ], [ 0.512206, 1.8833e-2, 0.655209 ], [ 0.517933, 2.1563e-2, 0.654109 ], [ 0.523633, 2.4532e-2, 0.652901 ], [ 0.529306, 2.7747e-2, 0.651586 ], [ 0.534952, 3.1217e-2, 0.650165 ], [ 0.54057, 3.495e-2, 0.64864 ], [ 0.546157, 3.8954e-2, 0.64701 ], [ 0.551715, 4.3136e-2, 0.645277 ], [ 0.557243, 4.7331e-2, 0.643443 ], [ 0.562738, 5.1545e-2, 0.641509 ], [ 0.568201, 5.5778e-2, 0.639477 ], [ 0.573632, 6.0028e-2, 0.637349 ], [ 0.579029, 6.4296e-2, 0.635126 ], [ 0.584391, 6.8579e-2, 0.632812 ], [ 0.589719, 7.2878e-2, 0.630408 ], [ 0.595011, 7.719e-2, 0.627917 ], [ 0.600266, 8.1516e-2, 0.625342 ], [ 0.605485, 8.5854e-2, 0.622686 ], [ 0.610667, 9.0204e-2, 0.619951 ], [ 0.615812, 9.4564e-2, 0.61714 ], [ 0.620919, 9.8934e-2, 0.614257 ], [ 0.625987, 0.103312, 0.611305 ], [ 0.631017, 0.107699, 0.608287 ], [ 0.636008, 0.112092, 0.605205 ], [ 0.640959, 0.116492, 0.602065 ], [ 0.645872, 0.120898, 0.598867 ], [ 0.650746, 0.125309, 0.595617 ], [ 0.65558, 0.129725, 0.592317 ], [ 0.660374, 0.134144, 0.588971 ], [ 0.665129, 0.138566, 0.585582 ], [ 0.669845, 0.142992, 0.582154 ], [ 0.674522, 0.147419, 0.578688 ], [ 0.67916, 0.151848, 0.575189 ], [ 0.683758, 0.156278, 0.57166 ], [ 0.688318, 0.160709, 0.568103 ], [ 0.69284, 0.165141, 0.564522 ], [ 0.697324, 0.169573, 0.560919 ], [ 0.701769, 0.174005, 0.557296 ], [ 0.706178, 0.178437, 0.553657 ], [ 0.710549, 0.182868, 0.550004 ], [ 0.714883, 0.187299, 0.546338 ], [ 0.719181, 0.191729, 0.542663 ], [ 0.723444, 0.196158, 0.538981 ], [ 0.72767, 0.200586, 0.535293 ], [ 0.731862, 0.205013, 0.531601 ], [ 0.736019, 0.209439, 0.527908 ], [ 0.740143, 0.213864, 0.524216 ], [ 0.744232, 0.218288, 0.520524 ], [ 0.748289, 0.222711, 0.516834 ], [ 0.752312, 0.227133, 0.513149 ], [ 0.756304, 0.231555, 0.509468 ], [ 0.760264, 0.235976, 0.505794 ], [ 0.764193, 0.240396, 0.502126 ], [ 0.76809, 0.244817, 0.498465 ], [ 0.771958, 0.249237, 0.494813 ], [ 0.775796, 0.253658, 0.491171 ], [ 0.779604, 0.258078, 0.487539 ], [ 0.783383, 0.2625, 0.483918 ], [ 0.787133, 0.266922, 0.480307 ], [ 0.790855, 0.271345, 0.476706 ], [ 0.794549, 0.27577, 0.473117 ], [ 0.798216, 0.280197, 0.469538 ], [ 0.801855, 0.284626, 0.465971 ], [ 0.805467, 0.289057, 0.462415 ], [ 0.809052, 0.293491, 0.45887 ], [ 0.812612, 0.297928, 0.455338 ], [ 0.816144, 0.302368, 0.451816 ], [ 0.819651, 0.306812, 0.448306 ], [ 0.823132, 0.311261, 0.444806 ], [ 0.826588, 0.315714, 0.441316 ], [ 0.830018, 0.320172, 0.437836 ], [ 0.833422, 0.324635, 0.434366 ], [ 0.836801, 0.329105, 0.430905 ], [ 0.840155, 0.33358, 0.427455 ], [ 0.843484, 0.338062, 0.424013 ], [ 0.846788, 0.342551, 0.420579 ], [ 0.850066, 0.347048, 0.417153 ], [ 0.853319, 0.351553, 0.413734 ], [ 0.856547, 0.356066, 0.410322 ], [ 0.85975, 0.360588, 0.406917 ], [ 0.862927, 0.365119, 0.403519 ], [ 0.866078, 0.36966, 0.400126 ], [ 0.869203, 0.374212, 0.396738 ], [ 0.872303, 0.378774, 0.393355 ], [ 0.875376, 0.383347, 0.389976 ], [ 0.878423, 0.387932, 0.3866 ], [ 0.881443, 0.392529, 0.383229 ], [ 0.884436, 0.397139, 0.37986 ], [ 0.887402, 0.401762, 0.376494 ], [ 0.89034, 0.406398, 0.37313 ], [ 0.89325, 0.411048, 0.369768 ], [ 0.896131, 0.415712, 0.366407 ], [ 0.898984, 0.420392, 0.363047 ], [ 0.901807, 0.425087, 0.359688 ], [ 0.904601, 0.429797, 0.356329 ], [ 0.907365, 0.434524, 0.35297 ], [ 0.910098, 0.439268, 0.34961 ], [ 0.9128, 0.444029, 0.346251 ], [ 0.915471, 0.448807, 0.34289 ], [ 0.918109, 0.453603, 0.339529 ], [ 0.920714, 0.458417, 0.336166 ], [ 0.923287, 0.463251, 0.332801 ], [ 0.925825, 0.468103, 0.329435 ], [ 0.928329, 0.472975, 0.326067 ], [ 0.930798, 0.477867, 0.322697 ], [ 0.933232, 0.48278, 0.319325 ], [ 0.93563, 0.487712, 0.315952 ], [ 0.93799, 0.492667, 0.312575 ], [ 0.940313, 0.497642, 0.309197 ], [ 0.942598, 0.502639, 0.305816 ], [ 0.944844, 0.507658, 0.302433 ], [ 0.947051, 0.512699, 0.299049 ], [ 0.949217, 0.517763, 0.295662 ], [ 0.951344, 0.52285, 0.292275 ], [ 0.953428, 0.52796, 0.288883 ], [ 0.95547, 0.533093, 0.28549 ], [ 0.957469, 0.53825, 0.282096 ], [ 0.959424, 0.543431, 0.278701 ], [ 0.961336, 0.548636, 0.275305 ], [ 0.963203, 0.553865, 0.271909 ], [ 0.965024, 0.559118, 0.268513 ], [ 0.966798, 0.564396, 0.265118 ], [ 0.968526, 0.5697, 0.261721 ], [ 0.970205, 0.575028, 0.258325 ], [ 0.971835, 0.580382, 0.254931 ], [ 0.973416, 0.585761, 0.25154 ], [ 0.974947, 0.591165, 0.248151 ], [ 0.976428, 0.596595, 0.244767 ], [ 0.977856, 0.602051, 0.241387 ], [ 0.979233, 0.607532, 0.238013 ], [ 0.980556, 0.613039, 0.234646 ], [ 0.981826, 0.618572, 0.231287 ], [ 0.983041, 0.624131, 0.227937 ], [ 0.984199, 0.629718, 0.224595 ], [ 0.985301, 0.63533, 0.221265 ], [ 0.986345, 0.640969, 0.217948 ], [ 0.987332, 0.646633, 0.214648 ], [ 0.98826, 0.652325, 0.211364 ], [ 0.989128, 0.658043, 0.2081 ], [ 0.989935, 0.663787, 0.204859 ], [ 0.990681, 0.669558, 0.201642 ], [ 0.991365, 0.675355, 0.198453 ], [ 0.991985, 0.681179, 0.195295 ], [ 0.992541, 0.68703, 0.19217 ], [ 0.993032, 0.692907, 0.189084 ], [ 0.993456, 0.69881, 0.186041 ], [ 0.993814, 0.704741, 0.183043 ], [ 0.994103, 0.710698, 0.180097 ], [ 0.994324, 0.716681, 0.177208 ], [ 0.994474, 0.722691, 0.174381 ], [ 0.994553, 0.728728, 0.171622 ], [ 0.994561, 0.734791, 0.168938 ], [ 0.994495, 0.74088, 0.166335 ], [ 0.994355, 0.746995, 0.163821 ], [ 0.994141, 0.753137, 0.161404 ], [ 0.993851, 0.759304, 0.159092 ], [ 0.993482, 0.765499, 0.156891 ], [ 0.993033, 0.77172, 0.154808 ], [ 0.992505, 0.777967, 0.152855 ], [ 0.991897, 0.784239, 0.151042 ], [ 0.991209, 0.790537, 0.149377 ], [ 0.990439, 0.796859, 0.14787 ], [ 0.989587, 0.803205, 0.146529 ], [ 0.988648, 0.809579, 0.145357 ], [ 0.987621, 0.815978, 0.144363 ], [ 0.986509, 0.822401, 0.143557 ], [ 0.985314, 0.828846, 0.142945 ], [ 0.984031, 0.835315, 0.142528 ], [ 0.982653, 0.841812, 0.142303 ], [ 0.98119, 0.848329, 0.142279 ], [ 0.979644, 0.854866, 0.142453 ], [ 0.977995, 0.861432, 0.142808 ], [ 0.976265, 0.868016, 0.143351 ], [ 0.974443, 0.874622, 0.144061 ], [ 0.97253, 0.88125, 0.144923 ], [ 0.970533, 0.887896, 0.145919 ], [ 0.968443, 0.894564, 0.147014 ], [ 0.966271, 0.901249, 0.14818 ], [ 0.964021, 0.90795, 0.14937 ], [ 0.961681, 0.914672, 0.15052 ], [ 0.959276, 0.921407, 0.151566 ], [ 0.956808, 0.928152, 0.152409 ], [ 0.954287, 0.934908, 0.152921 ], [ 0.951726, 0.941671, 0.152925 ], [ 0.949151, 0.948435, 0.152178 ], [ 0.946602, 0.95519, 0.150328 ], [ 0.944152, 0.961916, 0.146861 ], [ 0.941896, 0.96859, 0.140956 ], [ 0.940015, 0.975158, 0.131326 ] ];
  var plasma = matplotlibScale()(_plasma_data);
  var _magma_data = [ [ 1.462e-3, 4.66e-4, 1.3866e-2 ], [ 2.258e-3, 1.295e-3, 1.8331e-2 ], [ 3.279e-3, 2.305e-3, 2.3708e-2 ], [ 4.512e-3, 3.49e-3, 2.9965e-2 ], [ 5.95e-3, 4.843e-3, 3.713e-2 ], [ 7.588e-3, 6.356e-3, 4.4973e-2 ], [ 9.426e-3, 8.022e-3, 5.2844e-2 ], [ 1.1465e-2, 9.828e-3, 6.075e-2 ], [ 1.3708e-2, 1.1771e-2, 6.8667e-2 ], [ 1.6156e-2, 1.384e-2, 7.6603e-2 ], [ 1.8815e-2, 1.6026e-2, 8.4584e-2 ], [ 2.1692e-2, 1.832e-2, 9.261e-2 ], [ 2.4792e-2, 2.0715e-2, 0.100676 ], [ 2.8123e-2, 2.3201e-2, 0.108787 ], [ 3.1696e-2, 2.5765e-2, 0.116965 ], [ 3.552e-2, 2.8397e-2, 0.125209 ], [ 3.9608e-2, 3.109e-2, 0.133515 ], [ 4.383e-2, 3.383e-2, 0.141886 ], [ 4.8062e-2, 3.6607e-2, 0.150327 ], [ 5.232e-2, 3.9407e-2, 0.158841 ], [ 5.6615e-2, 4.216e-2, 0.167446 ], [ 6.0949e-2, 4.4794e-2, 0.176129 ], [ 6.533e-2, 4.7318e-2, 0.184892 ], [ 6.9764e-2, 4.9726e-2, 0.193735 ], [ 7.4257e-2, 5.2017e-2, 0.20266 ], [ 7.8815e-2, 5.4184e-2, 0.211667 ], [ 8.3446e-2, 5.6225e-2, 0.220755 ], [ 8.8155e-2, 5.8133e-2, 0.229922 ], [ 9.2949e-2, 5.9904e-2, 0.239164 ], [ 9.7833e-2, 6.1531e-2, 0.248477 ], [ 0.102815, 6.301e-2, 0.257854 ], [ 0.107899, 6.4335e-2, 0.267289 ], [ 0.113094, 6.5492e-2, 0.276784 ], [ 0.118405, 6.6479e-2, 0.286321 ], [ 0.123833, 6.7295e-2, 0.295879 ], [ 0.12938, 6.7935e-2, 0.305443 ], [ 0.135053, 6.8391e-2, 0.315 ], [ 0.140858, 6.8654e-2, 0.324538 ], [ 0.146785, 6.8738e-2, 0.334011 ], [ 0.152839, 6.8637e-2, 0.343404 ], [ 0.159018, 6.8354e-2, 0.352688 ], [ 0.165308, 6.7911e-2, 0.361816 ], [ 0.171713, 6.7305e-2, 0.370771 ], [ 0.178212, 6.6576e-2, 0.379497 ], [ 0.184801, 6.5732e-2, 0.387973 ], [ 0.19146, 6.4818e-2, 0.396152 ], [ 0.198177, 6.3862e-2, 0.404009 ], [ 0.204935, 6.2907e-2, 0.411514 ], [ 0.211718, 6.1992e-2, 0.418647 ], [ 0.218512, 6.1158e-2, 0.425392 ], [ 0.225302, 6.0445e-2, 0.431742 ], [ 0.232077, 5.9889e-2, 0.437695 ], [ 0.238826, 5.9517e-2, 0.443256 ], [ 0.245543, 5.9352e-2, 0.448436 ], [ 0.25222, 5.9415e-2, 0.453248 ], [ 0.258857, 5.9706e-2, 0.45771 ], [ 0.265447, 6.0237e-2, 0.46184 ], [ 0.271994, 6.0994e-2, 0.46566 ], [ 0.278493, 6.1978e-2, 0.46919 ], [ 0.284951, 6.3168e-2, 0.472451 ], [ 0.291366, 6.4553e-2, 0.475462 ], [ 0.29774, 6.6117e-2, 0.478243 ], [ 0.304081, 6.7835e-2, 0.480812 ], [ 0.310382, 6.9702e-2, 0.483186 ], [ 0.316654, 7.169e-2, 0.48538 ], [ 0.322899, 7.3782e-2, 0.487408 ], [ 0.329114, 7.5972e-2, 0.489287 ], [ 0.335308, 7.8236e-2, 0.491024 ], [ 0.341482, 8.0564e-2, 0.492631 ], [ 0.347636, 8.2946e-2, 0.494121 ], [ 0.353773, 8.5373e-2, 0.495501 ], [ 0.359898, 8.7831e-2, 0.496778 ], [ 0.366012, 9.0314e-2, 0.49796 ], [ 0.372116, 9.2816e-2, 0.499053 ], [ 0.378211, 9.5332e-2, 0.500067 ], [ 0.384299, 9.7855e-2, 0.501002 ], [ 0.390384, 0.100379, 0.501864 ], [ 0.396467, 0.102902, 0.502658 ], [ 0.402548, 0.10542, 0.503386 ], [ 0.408629, 0.10793, 0.504052 ], [ 0.414709, 0.110431, 0.504662 ], [ 0.420791, 0.11292, 0.505215 ], [ 0.426877, 0.115395, 0.505714 ], [ 0.432967, 0.117855, 0.50616 ], [ 0.439062, 0.120298, 0.506555 ], [ 0.445163, 0.122724, 0.506901 ], [ 0.451271, 0.125132, 0.507198 ], [ 0.457386, 0.127522, 0.507448 ], [ 0.463508, 0.129893, 0.507652 ], [ 0.46964, 0.132245, 0.507809 ], [ 0.47578, 0.134577, 0.507921 ], [ 0.481929, 0.136891, 0.507989 ], [ 0.488088, 0.139186, 0.508011 ], [ 0.494258, 0.141462, 0.507988 ], [ 0.500438, 0.143719, 0.50792 ], [ 0.506629, 0.145958, 0.507806 ], [ 0.512831, 0.148179, 0.507648 ], [ 0.519045, 0.150383, 0.507443 ], [ 0.52527, 0.152569, 0.507192 ], [ 0.531507, 0.154739, 0.506895 ], [ 0.537755, 0.156894, 0.506551 ], [ 0.544015, 0.159033, 0.506159 ], [ 0.550287, 0.161158, 0.505719 ], [ 0.556571, 0.163269, 0.50523 ], [ 0.562866, 0.165368, 0.504692 ], [ 0.569172, 0.167454, 0.504105 ], [ 0.57549, 0.16953, 0.503466 ], [ 0.581819, 0.171596, 0.502777 ], [ 0.588158, 0.173652, 0.502035 ], [ 0.594508, 0.175701, 0.501241 ], [ 0.600868, 0.177743, 0.500394 ], [ 0.607238, 0.179779, 0.499492 ], [ 0.613617, 0.181811, 0.498536 ], [ 0.620005, 0.18384, 0.497524 ], [ 0.626401, 0.185867, 0.496456 ], [ 0.632805, 0.187893, 0.495332 ], [ 0.639216, 0.189921, 0.49415 ], [ 0.645633, 0.191952, 0.49291 ], [ 0.652056, 0.193986, 0.491611 ], [ 0.658483, 0.196027, 0.490253 ], [ 0.664915, 0.198075, 0.488836 ], [ 0.671349, 0.200133, 0.487358 ], [ 0.677786, 0.202203, 0.485819 ], [ 0.684224, 0.204286, 0.484219 ], [ 0.690661, 0.206384, 0.482558 ], [ 0.697098, 0.208501, 0.480835 ], [ 0.703532, 0.210638, 0.479049 ], [ 0.709962, 0.212797, 0.477201 ], [ 0.716387, 0.214982, 0.47529 ], [ 0.722805, 0.217194, 0.473316 ], [ 0.729216, 0.219437, 0.471279 ], [ 0.735616, 0.221713, 0.46918 ], [ 0.742004, 0.224025, 0.467018 ], [ 0.748378, 0.226377, 0.464794 ], [ 0.754737, 0.228772, 0.462509 ], [ 0.761077, 0.231214, 0.460162 ], [ 0.767398, 0.233705, 0.457755 ], [ 0.773695, 0.236249, 0.455289 ], [ 0.779968, 0.238851, 0.452765 ], [ 0.786212, 0.241514, 0.450184 ], [ 0.792427, 0.244242, 0.447543 ], [ 0.798608, 0.24704, 0.444848 ], [ 0.804752, 0.249911, 0.442102 ], [ 0.810855, 0.252861, 0.439305 ], [ 0.816914, 0.255895, 0.436461 ], [ 0.822926, 0.259016, 0.433573 ], [ 0.828886, 0.262229, 0.430644 ], [ 0.834791, 0.26554, 0.427671 ], [ 0.840636, 0.268953, 0.424666 ], [ 0.846416, 0.272473, 0.421631 ], [ 0.852126, 0.276106, 0.418573 ], [ 0.857763, 0.279857, 0.415496 ], [ 0.86332, 0.283729, 0.412403 ], [ 0.868793, 0.287728, 0.409303 ], [ 0.874176, 0.291859, 0.406205 ], [ 0.879464, 0.296125, 0.403118 ], [ 0.884651, 0.30053, 0.400047 ], [ 0.889731, 0.305079, 0.397002 ], [ 0.8947, 0.309773, 0.393995 ], [ 0.899552, 0.314616, 0.391037 ], [ 0.904281, 0.31961, 0.388137 ], [ 0.908884, 0.324755, 0.385308 ], [ 0.913354, 0.330052, 0.382563 ], [ 0.917689, 0.3355, 0.379915 ], [ 0.921884, 0.341098, 0.377376 ], [ 0.925937, 0.346844, 0.374959 ], [ 0.929845, 0.352734, 0.372677 ], [ 0.933606, 0.358764, 0.370541 ], [ 0.937221, 0.364929, 0.368567 ], [ 0.940687, 0.371224, 0.366762 ], [ 0.944006, 0.377643, 0.365136 ], [ 0.94718, 0.384178, 0.363701 ], [ 0.95021, 0.39082, 0.362468 ], [ 0.953099, 0.397563, 0.361438 ], [ 0.955849, 0.4044, 0.360619 ], [ 0.958464, 0.411324, 0.360014 ], [ 0.960949, 0.418323, 0.35963 ], [ 0.96331, 0.42539, 0.359469 ], [ 0.965549, 0.432519, 0.359529 ], [ 0.967671, 0.439703, 0.35981 ], [ 0.96968, 0.446936, 0.360311 ], [ 0.971582, 0.45421, 0.36103 ], [ 0.973381, 0.46152, 0.361965 ], [ 0.975082, 0.468861, 0.363111 ], [ 0.97669, 0.476226, 0.364466 ], [ 0.97821, 0.483612, 0.366025 ], [ 0.979645, 0.491014, 0.367783 ], [ 0.981, 0.498428, 0.369734 ], [ 0.982279, 0.505851, 0.371874 ], [ 0.983485, 0.51328, 0.374198 ], [ 0.984622, 0.520713, 0.376698 ], [ 0.985693, 0.528148, 0.379371 ], [ 0.9867, 0.535582, 0.38221 ], [ 0.987646, 0.543015, 0.38521 ], [ 0.988533, 0.550446, 0.388365 ], [ 0.989363, 0.557873, 0.391671 ], [ 0.990138, 0.565296, 0.395122 ], [ 0.990871, 0.572706, 0.398714 ], [ 0.991558, 0.580107, 0.402441 ], [ 0.992196, 0.587502, 0.406299 ], [ 0.992785, 0.594891, 0.410283 ], [ 0.993326, 0.602275, 0.41439 ], [ 0.993834, 0.609644, 0.418613 ], [ 0.994309, 0.616999, 0.42295 ], [ 0.994738, 0.62435, 0.427397 ], [ 0.995122, 0.631696, 0.431951 ], [ 0.99548, 0.639027, 0.436607 ], [ 0.99581, 0.646344, 0.441361 ], [ 0.996096, 0.653659, 0.446213 ], [ 0.996341, 0.660969, 0.45116 ], [ 0.99658, 0.668256, 0.456192 ], [ 0.996775, 0.675541, 0.461314 ], [ 0.996925, 0.682828, 0.466526 ], [ 0.997077, 0.690088, 0.471811 ], [ 0.997186, 0.697349, 0.477182 ], [ 0.997254, 0.704611, 0.482635 ], [ 0.997325, 0.711848, 0.488154 ], [ 0.997351, 0.719089, 0.493755 ], [ 0.997351, 0.726324, 0.499428 ], [ 0.997341, 0.733545, 0.505167 ], [ 0.997285, 0.740772, 0.510983 ], [ 0.997228, 0.747981, 0.516859 ], [ 0.997138, 0.75519, 0.522806 ], [ 0.997019, 0.762398, 0.528821 ], [ 0.996898, 0.769591, 0.534892 ], [ 0.996727, 0.776795, 0.541039 ], [ 0.996571, 0.783977, 0.547233 ], [ 0.996369, 0.791167, 0.553499 ], [ 0.996162, 0.798348, 0.55982 ], [ 0.995932, 0.805527, 0.566202 ], [ 0.99568, 0.812706, 0.572645 ], [ 0.995424, 0.819875, 0.57914 ], [ 0.995131, 0.827052, 0.585701 ], [ 0.994851, 0.834213, 0.592307 ], [ 0.994524, 0.841387, 0.598983 ], [ 0.994222, 0.84854, 0.605696 ], [ 0.993866, 0.855711, 0.612482 ], [ 0.993545, 0.862859, 0.619299 ], [ 0.99317, 0.870024, 0.626189 ], [ 0.992831, 0.877168, 0.633109 ], [ 0.99244, 0.88433, 0.640099 ], [ 0.992089, 0.89147, 0.647116 ], [ 0.991688, 0.898627, 0.654202 ], [ 0.991332, 0.905763, 0.661309 ], [ 0.99093, 0.912915, 0.668481 ], [ 0.99057, 0.920049, 0.675675 ], [ 0.990175, 0.927196, 0.682926 ], [ 0.989815, 0.934329, 0.690198 ], [ 0.989434, 0.94147, 0.697519 ], [ 0.989077, 0.948604, 0.704863 ], [ 0.988717, 0.955742, 0.712242 ], [ 0.988367, 0.962878, 0.719649 ], [ 0.988033, 0.970012, 0.727077 ], [ 0.987691, 0.977154, 0.734536 ], [ 0.987387, 0.984288, 0.742002 ], [ 0.987053, 0.991438, 0.749504 ] ];
  var magma = matplotlibScale()(_magma_data);
  var _inferno_data = [ [ 1.462e-3, 4.66e-4, 1.3866e-2 ], [ 2.267e-3, 1.27e-3, 1.857e-2 ], [ 3.299e-3, 2.249e-3, 2.4239e-2 ], [ 4.547e-3, 3.392e-3, 3.0909e-2 ], [ 6.006e-3, 4.692e-3, 3.8558e-2 ], [ 7.676e-3, 6.136e-3, 4.6836e-2 ], [ 9.561e-3, 7.713e-3, 5.5143e-2 ], [ 1.1663e-2, 9.417e-3, 6.346e-2 ], [ 1.3995e-2, 1.1225e-2, 7.1862e-2 ], [ 1.6561e-2, 1.3136e-2, 8.0282e-2 ], [ 1.9373e-2, 1.5133e-2, 8.8767e-2 ], [ 2.2447e-2, 1.7199e-2, 9.7327e-2 ], [ 2.5793e-2, 1.9331e-2, 0.10593 ], [ 2.9432e-2, 2.1503e-2, 0.114621 ], [ 3.3385e-2, 2.3702e-2, 0.123397 ], [ 3.7668e-2, 2.5921e-2, 0.132232 ], [ 4.2253e-2, 2.8139e-2, 0.141141 ], [ 4.6915e-2, 3.0324e-2, 0.150164 ], [ 5.1644e-2, 3.2474e-2, 0.159254 ], [ 5.6449e-2, 3.4569e-2, 0.168414 ], [ 6.134e-2, 3.659e-2, 0.177642 ], [ 6.6331e-2, 3.8504e-2, 0.186962 ], [ 7.1429e-2, 4.0294e-2, 0.196354 ], [ 7.6637e-2, 4.1905e-2, 0.205799 ], [ 8.1962e-2, 4.3328e-2, 0.215289 ], [ 8.7411e-2, 4.4556e-2, 0.224813 ], [ 9.299e-2, 4.5583e-2, 0.234358 ], [ 9.8702e-2, 4.6402e-2, 0.243904 ], [ 0.104551, 4.7008e-2, 0.25343 ], [ 0.110536, 4.7399e-2, 0.262912 ], [ 0.116656, 4.7574e-2, 0.272321 ], [ 0.122908, 4.7536e-2, 0.281624 ], [ 0.129285, 4.7293e-2, 0.290788 ], [ 0.135778, 4.6856e-2, 0.299776 ], [ 0.142378, 4.6242e-2, 0.308553 ], [ 0.149073, 4.5468e-2, 0.317085 ], [ 0.15585, 4.4559e-2, 0.325338 ], [ 0.162689, 4.3554e-2, 0.333277 ], [ 0.169575, 4.2489e-2, 0.340874 ], [ 0.176493, 4.1402e-2, 0.348111 ], [ 0.183429, 4.0329e-2, 0.354971 ], [ 0.190367, 3.9309e-2, 0.361447 ], [ 0.197297, 3.84e-2, 0.367535 ], [ 0.204209, 3.7632e-2, 0.373238 ], [ 0.211095, 3.703e-2, 0.378563 ], [ 0.217949, 3.6615e-2, 0.383522 ], [ 0.224763, 3.6405e-2, 0.388129 ], [ 0.231538, 3.6405e-2, 0.3924 ], [ 0.238273, 3.6621e-2, 0.396353 ], [ 0.244967, 3.7055e-2, 0.400007 ], [ 0.25162, 3.7705e-2, 0.403378 ], [ 0.258234, 3.8571e-2, 0.406485 ], [ 0.26481, 3.9647e-2, 0.409345 ], [ 0.271347, 4.0922e-2, 0.411976 ], [ 0.27785, 4.2353e-2, 0.414392 ], [ 0.284321, 4.3933e-2, 0.416608 ], [ 0.290763, 4.5644e-2, 0.418637 ], [ 0.297178, 4.747e-2, 0.420491 ], [ 0.303568, 4.9396e-2, 0.422182 ], [ 0.309935, 5.1407e-2, 0.423721 ], [ 0.316282, 5.349e-2, 0.425116 ], [ 0.32261, 5.5634e-2, 0.426377 ], [ 0.328921, 5.7827e-2, 0.427511 ], [ 0.335217, 6.006e-2, 0.428524 ], [ 0.3415, 6.2325e-2, 0.429425 ], [ 0.347771, 6.4616e-2, 0.430217 ], [ 0.354032, 6.6925e-2, 0.430906 ], [ 0.360284, 6.9247e-2, 0.431497 ], [ 0.366529, 7.1579e-2, 0.431994 ], [ 0.372768, 7.3915e-2, 0.4324 ], [ 0.379001, 7.6253e-2, 0.432719 ], [ 0.385228, 7.8591e-2, 0.432955 ], [ 0.391453, 8.0927e-2, 0.433109 ], [ 0.397674, 8.3257e-2, 0.433183 ], [ 0.403894, 8.558e-2, 0.433179 ], [ 0.410113, 8.7896e-2, 0.433098 ], [ 0.416331, 9.0203e-2, 0.432943 ], [ 0.422549, 9.2501e-2, 0.432714 ], [ 0.428768, 9.479e-2, 0.432412 ], [ 0.434987, 9.7069e-2, 0.432039 ], [ 0.441207, 9.9338e-2, 0.431594 ], [ 0.447428, 0.101597, 0.43108 ], [ 0.453651, 0.103848, 0.430498 ], [ 0.459875, 0.106089, 0.429846 ], [ 0.4661, 0.108322, 0.429125 ], [ 0.472328, 0.110547, 0.428334 ], [ 0.478558, 0.112764, 0.427475 ], [ 0.484789, 0.114974, 0.426548 ], [ 0.491022, 0.117179, 0.425552 ], [ 0.497257, 0.119379, 0.424488 ], [ 0.503493, 0.121575, 0.423356 ], [ 0.50973, 0.123769, 0.422156 ], [ 0.515967, 0.12596, 0.420887 ], [ 0.522206, 0.12815, 0.419549 ], [ 0.528444, 0.130341, 0.418142 ], [ 0.534683, 0.132534, 0.416667 ], [ 0.54092, 0.134729, 0.415123 ], [ 0.547157, 0.136929, 0.413511 ], [ 0.553392, 0.139134, 0.411829 ], [ 0.559624, 0.141346, 0.410078 ], [ 0.565854, 0.143567, 0.408258 ], [ 0.572081, 0.145797, 0.406369 ], [ 0.578304, 0.148039, 0.404411 ], [ 0.584521, 0.150294, 0.402385 ], [ 0.590734, 0.152563, 0.40029 ], [ 0.59694, 0.154848, 0.398125 ], [ 0.603139, 0.157151, 0.395891 ], [ 0.60933, 0.159474, 0.393589 ], [ 0.615513, 0.161817, 0.391219 ], [ 0.621685, 0.164184, 0.388781 ], [ 0.627847, 0.166575, 0.386276 ], [ 0.633998, 0.168992, 0.383704 ], [ 0.640135, 0.171438, 0.381065 ], [ 0.64626, 0.173914, 0.378359 ], [ 0.652369, 0.176421, 0.375586 ], [ 0.658463, 0.178962, 0.372748 ], [ 0.66454, 0.181539, 0.369846 ], [ 0.670599, 0.184153, 0.366879 ], [ 0.676638, 0.186807, 0.363849 ], [ 0.682656, 0.189501, 0.360757 ], [ 0.688653, 0.192239, 0.357603 ], [ 0.694627, 0.195021, 0.354388 ], [ 0.700576, 0.197851, 0.351113 ], [ 0.7065, 0.200728, 0.347777 ], [ 0.712396, 0.203656, 0.344383 ], [ 0.718264, 0.206636, 0.340931 ], [ 0.724103, 0.20967, 0.337424 ], [ 0.729909, 0.212759, 0.333861 ], [ 0.735683, 0.215906, 0.330245 ], [ 0.741423, 0.219112, 0.326576 ], [ 0.747127, 0.222378, 0.322856 ], [ 0.752794, 0.225706, 0.319085 ], [ 0.758422, 0.229097, 0.315266 ], [ 0.76401, 0.232554, 0.311399 ], [ 0.769556, 0.236077, 0.307485 ], [ 0.775059, 0.239667, 0.303526 ], [ 0.780517, 0.243327, 0.299523 ], [ 0.785929, 0.247056, 0.295477 ], [ 0.791293, 0.250856, 0.29139 ], [ 0.796607, 0.254728, 0.287264 ], [ 0.801871, 0.258674, 0.283099 ], [ 0.807082, 0.262692, 0.278898 ], [ 0.812239, 0.266786, 0.274661 ], [ 0.817341, 0.270954, 0.27039 ], [ 0.822386, 0.275197, 0.266085 ], [ 0.827372, 0.279517, 0.26175 ], [ 0.832299, 0.283913, 0.257383 ], [ 0.837165, 0.288385, 0.252988 ], [ 0.841969, 0.292933, 0.248564 ], [ 0.846709, 0.297559, 0.244113 ], [ 0.851384, 0.30226, 0.239636 ], [ 0.855992, 0.307038, 0.235133 ], [ 0.860533, 0.311892, 0.230606 ], [ 0.865006, 0.316822, 0.226055 ], [ 0.869409, 0.321827, 0.221482 ], [ 0.873741, 0.326906, 0.216886 ], [ 0.878001, 0.33206, 0.212268 ], [ 0.882188, 0.337287, 0.207628 ], [ 0.886302, 0.342586, 0.202968 ], [ 0.890341, 0.347957, 0.198286 ], [ 0.894305, 0.353399, 0.193584 ], [ 0.898192, 0.358911, 0.18886 ], [ 0.902003, 0.364492, 0.184116 ], [ 0.905735, 0.37014, 0.17935 ], [ 0.90939, 0.375856, 0.174563 ], [ 0.912966, 0.381636, 0.169755 ], [ 0.916462, 0.387481, 0.164924 ], [ 0.919879, 0.393389, 0.16007 ], [ 0.923215, 0.399359, 0.155193 ], [ 0.92647, 0.405389, 0.150292 ], [ 0.929644, 0.411479, 0.145367 ], [ 0.932737, 0.417627, 0.140417 ], [ 0.935747, 0.423831, 0.13544 ], [ 0.938675, 0.430091, 0.130438 ], [ 0.941521, 0.436405, 0.125409 ], [ 0.944285, 0.442772, 0.120354 ], [ 0.946965, 0.449191, 0.115272 ], [ 0.949562, 0.45566, 0.110164 ], [ 0.952075, 0.462178, 0.105031 ], [ 0.954506, 0.468744, 9.9874e-2 ], [ 0.956852, 0.475356, 9.4695e-2 ], [ 0.959114, 0.482014, 8.9499e-2 ], [ 0.961293, 0.488716, 8.4289e-2 ], [ 0.963387, 0.495462, 7.9073e-2 ], [ 0.965397, 0.502249, 7.3859e-2 ], [ 0.967322, 0.509078, 6.8659e-2 ], [ 0.969163, 0.515946, 6.3488e-2 ], [ 0.970919, 0.522853, 5.8367e-2 ], [ 0.97259, 0.529798, 5.3324e-2 ], [ 0.974176, 0.53678, 4.8392e-2 ], [ 0.975677, 0.543798, 4.3618e-2 ], [ 0.977092, 0.55085, 3.905e-2 ], [ 0.978422, 0.557937, 3.4931e-2 ], [ 0.979666, 0.565057, 3.1409e-2 ], [ 0.980824, 0.572209, 2.8508e-2 ], [ 0.981895, 0.579392, 2.625e-2 ], [ 0.982881, 0.586606, 2.4661e-2 ], [ 0.983779, 0.593849, 2.377e-2 ], [ 0.984591, 0.601122, 2.3606e-2 ], [ 0.985315, 0.608422, 2.4202e-2 ], [ 0.985952, 0.61575, 2.5592e-2 ], [ 0.986502, 0.623105, 2.7814e-2 ], [ 0.986964, 0.630485, 3.0908e-2 ], [ 0.987337, 0.63789, 3.4916e-2 ], [ 0.987622, 0.64532, 3.9886e-2 ], [ 0.987819, 0.652773, 4.5581e-2 ], [ 0.987926, 0.66025, 5.175e-2 ], [ 0.987945, 0.667748, 5.8329e-2 ], [ 0.987874, 0.675267, 6.5257e-2 ], [ 0.987714, 0.682807, 7.2489e-2 ], [ 0.987464, 0.690366, 7.999e-2 ], [ 0.987124, 0.697944, 8.7731e-2 ], [ 0.986694, 0.70554, 9.5694e-2 ], [ 0.986175, 0.713153, 0.103863 ], [ 0.985566, 0.720782, 0.112229 ], [ 0.984865, 0.728427, 0.120785 ], [ 0.984075, 0.736087, 0.129527 ], [ 0.983196, 0.743758, 0.138453 ], [ 0.982228, 0.751442, 0.147565 ], [ 0.981173, 0.759135, 0.156863 ], [ 0.980032, 0.766837, 0.166353 ], [ 0.978806, 0.774545, 0.176037 ], [ 0.977497, 0.782258, 0.185923 ], [ 0.976108, 0.789974, 0.196018 ], [ 0.974638, 0.797692, 0.206332 ], [ 0.973088, 0.805409, 0.216877 ], [ 0.971468, 0.813122, 0.227658 ], [ 0.969783, 0.820825, 0.238686 ], [ 0.968041, 0.828515, 0.249972 ], [ 0.966243, 0.836191, 0.261534 ], [ 0.964394, 0.843848, 0.273391 ], [ 0.962517, 0.851476, 0.285546 ], [ 0.960626, 0.859069, 0.29801 ], [ 0.95872, 0.866624, 0.31082 ], [ 0.956834, 0.874129, 0.323974 ], [ 0.954997, 0.881569, 0.337475 ], [ 0.953215, 0.888942, 0.351369 ], [ 0.951546, 0.896226, 0.365627 ], [ 0.950018, 0.903409, 0.380271 ], [ 0.948683, 0.910473, 0.395289 ], [ 0.947594, 0.917399, 0.410665 ], [ 0.946809, 0.924168, 0.426373 ], [ 0.946392, 0.930761, 0.442367 ], [ 0.946403, 0.937159, 0.458592 ], [ 0.946903, 0.943348, 0.47497 ], [ 0.947937, 0.949318, 0.491426 ], [ 0.949545, 0.955063, 0.50786 ], [ 0.95174, 0.960587, 0.524203 ], [ 0.954529, 0.965896, 0.540361 ], [ 0.957896, 0.971003, 0.556275 ], [ 0.961812, 0.975924, 0.571925 ], [ 0.966249, 0.980678, 0.587206 ], [ 0.971162, 0.985282, 0.602154 ], [ 0.976511, 0.989753, 0.61676 ], [ 0.982257, 0.994109, 0.631017 ], [ 0.988362, 0.998364, 0.644924 ] ];
  var inferno = matplotlibScale()(_inferno_data);
  exports["inferno"] = inferno;
  exports["magma"] = magma;
  exports["plasma"] = plasma;
  exports["viridis"] = viridis;
})(PS["Color.Scale.Perceptual"] = PS["Color.Scale.Perceptual"] || {});
(function(exports) {
  // Generated by purs version 0.11.3
  "use strict";
  var Color = PS["Color"];        
  var yellow = Color.fromInt(16768000);
  var teal = Color.fromInt(3787980);
  var silver = Color.fromInt(14540253);
  var red = Color.fromInt(16728374);
  var purple = Color.fromInt(11603401);
  var orange = Color.fromInt(16745755);
  var olive = Color.fromInt(4036976);
  var navy = Color.fromInt(7999);
  var maroon = Color.fromInt(8721483);
  var lime = Color.fromInt(130928);
  var green = Color.fromInt(3066944);
  var gray = Color.fromInt(11184810);
  var fuchsia = Color.fromInt(15733438);
  var blue = Color.fromInt(29913);
  var black$prime = Color.fromInt(1118481);
  var aqua = Color.fromInt(8379391);
  exports["aqua"] = aqua;
  exports["black'"] = black$prime;
  exports["blue"] = blue;
  exports["fuchsia"] = fuchsia;
  exports["gray"] = gray;
  exports["green"] = green;
  exports["lime"] = lime;
  exports["maroon"] = maroon;
  exports["navy"] = navy;
  exports["olive"] = olive;
  exports["orange"] = orange;
  exports["purple"] = purple;
  exports["red"] = red;
  exports["silver"] = silver;
  exports["teal"] = teal;
  exports["yellow"] = yellow;
})(PS["Color.Scheme.Clrs"] = PS["Color.Scheme.Clrs"] || {});
(function(exports) {
  // Generated by purs version 0.11.3
  "use strict";
  var Color = PS["Color"];
  var Data_Ring = PS["Data.Ring"];
  var Prelude = PS["Prelude"];        
  var triad = function (c) {
      return [ c, Color.rotateHue(-120.0)(c), Color.rotateHue(120.0)(c) ];
  };
  var tetrad = function (c) {
      return [ c, Color.rotateHue(30.0)(c), Color.rotateHue(180.0)(c), Color.rotateHue(210.0)(c) ];
  };
  var splitComplementary = function (c) {
      return [ c, Color.rotateHue(-165.0)(c), Color.rotateHue(165.0)(c) ];
  };
  var shades = function (c) {
      return [ Color.lighten(0.2)(c), c, Color.darken(0.2)(c) ];
  };
  var analogous = function (c) {
      return [ Color.rotateHue(-30.0)(c), c, Color.rotateHue(30.0)(c) ];
  };
  exports["analogous"] = analogous;
  exports["shades"] = shades;
  exports["splitComplementary"] = splitComplementary;
  exports["tetrad"] = tetrad;
  exports["triad"] = triad;
})(PS["Color.Scheme.Harmonic"] = PS["Color.Scheme.Harmonic"] || {});
(function(exports) {
  // Generated by purs version 0.11.3
  "use strict";
  var Color = PS["Color"];        
  var yellow = Color.rgb(255)(235)(59);
  var teal = Color.rgb(0)(150)(136);
  var red = Color.rgb(244)(67)(54);
  var purple = Color.rgb(156)(39)(176);
  var pink = Color.rgb(233)(30)(99);
  var orange = Color.rgb(255)(152)(0);
  var lime = Color.rgb(205)(220)(57);
  var lightGreen = Color.rgb(139)(195)(74);
  var lightBlue = Color.rgb(3)(169)(244);
  var indigo = Color.rgb(63)(81)(181);
  var grey = Color.rgb(158)(158)(158);
  var green = Color.rgb(76)(175)(80);
  var deepPurple = Color.rgb(103)(58)(183);
  var deepOrange = Color.rgb(255)(87)(34);
  var cyan = Color.rgb(0)(188)(212);
  var brown = Color.rgb(121)(85)(72);
  var blueGrey = Color.rgb(96)(125)(139);
  var blue = Color.rgb(33)(150)(243);
  var amber = Color.rgb(255)(193)(7);
  exports["amber"] = amber;
  exports["blue"] = blue;
  exports["blueGrey"] = blueGrey;
  exports["brown"] = brown;
  exports["cyan"] = cyan;
  exports["deepOrange"] = deepOrange;
  exports["deepPurple"] = deepPurple;
  exports["green"] = green;
  exports["grey"] = grey;
  exports["indigo"] = indigo;
  exports["lightBlue"] = lightBlue;
  exports["lightGreen"] = lightGreen;
  exports["lime"] = lime;
  exports["orange"] = orange;
  exports["pink"] = pink;
  exports["purple"] = purple;
  exports["red"] = red;
  exports["teal"] = teal;
  exports["yellow"] = yellow;
})(PS["Color.Scheme.MaterialDesign"] = PS["Color.Scheme.MaterialDesign"] || {});
(function(exports) {
  /* globals setTimeout, clearTimeout, setImmediate, clearImmediate */
  "use strict";

  exports._unsafeInterleaveAff = function (aff) {
    return aff;
  };

  exports._makeAff = function (cb) {
    return function (success, error) {
      try {
        return cb(function (e) {
          return function () {
            error(e);
          };
        })(function (v) {
          return function () {
            success(v);
          };
        })();
      } catch (err) {
        error(err);
      }
    };
  };

  exports._pure = function (nonCanceler, v) {
    return function (success) {
      success(v);
      return nonCanceler;
    };
  };

  exports._fmap = function (f, aff) {
    return function (success, error) {
      return aff(function (v) {
        success(f(v));
      }, error);
    };
  };

  exports._bind = function (alwaysCanceler, aff, f) {
    return function (success, error) {
      var canceler1, canceler2;

      var isCanceled    = false;
      var requestCancel = false;

      var onCanceler = function () {};

      canceler1 = aff(function (v) {
        if (requestCancel) {
          isCanceled = true;

          return alwaysCanceler;
        } else {
          canceler2 = f(v)(success, error);

          onCanceler(canceler2);

          return canceler2;
        }
      }, error);

      return function (e) {
        return function (s, f) {
          requestCancel = true;

          if (canceler2 !== undefined) {
            return canceler2(e)(s, f);
          } else {
            return canceler1(e)(function (bool) {
              if (bool || isCanceled) {
                s(true);
              } else {
                onCanceler = function (canceler) {
                  canceler(e)(s, f);
                };
              }
            }, f);
          }
        };
      };
    };
  };

  exports._runAff = function (errorT, successT, aff) {
    // If errorT or successT throw, and an Aff is comprised only of synchronous
    // effects, then it's possible for makeAff/liftEff to accidentally catch
    // it, which may end up rerunning the Aff depending on error recovery
    // behavior. To mitigate this, we observe synchronicity using mutation. If
    // an Aff is observed to be synchronous, we let the stack reset and run the
    // handlers outside of the normal callback flow.
    return function () {
      var status = 0;
      var result, success;

      var canceler = aff(function (v) {
        if (status === 2) {
          successT(v)();
        } else {
          status = 1;
          result = v;
          success = true;
        }
      }, function (e) {
        if (status === 2) {
          errorT(e)();
        } else {
          status = 1;
          result = e;
          success = false;
        }
      });

      if (status === 1) {
        if (success) {
          successT(result)();
        } else {
          errorT(result)();
        }
      } else {
        status = 2;
      }

      return canceler;
    };
  };

  exports._liftEff = function (nonCanceler, e) {
    return function (success, error) {
      var result;
      try {
        result = e();
      } catch (err) {
        error(err);
        return nonCanceler;
      }

      success(result);
      return nonCanceler;
    };
  };
})(PS["Control.Monad.Aff"] = PS["Control.Monad.Aff"] || {});
(function(exports) {
  // Generated by purs version 0.11.3
  "use strict";
  var Control_Category = PS["Control.Category"];
  var Control_Monad = PS["Control.Monad"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];        
  var MonadEff = function (Monad0, liftEff) {
      this.Monad0 = Monad0;
      this.liftEff = liftEff;
  };                                                   
  var liftEff = function (dict) {
      return dict.liftEff;
  };
  exports["MonadEff"] = MonadEff;
  exports["liftEff"] = liftEff;
})(PS["Control.Monad.Eff.Class"] = PS["Control.Monad.Eff.Class"] || {});
(function(exports) {
    "use strict";

  exports.error = function (msg) {
    return new Error(msg);
  };

  exports.throwException = function (e) {
    return function () {
      throw e;
    };
  };
})(PS["Control.Monad.Eff.Exception"] = PS["Control.Monad.Eff.Exception"] || {});
(function(exports) {
  // Generated by purs version 0.11.3
  "use strict";
  var $foreign = PS["Control.Monad.Eff.Exception"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Either = PS["Data.Either"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Show = PS["Data.Show"];
  var Prelude = PS["Prelude"];
  exports["error"] = $foreign.error;
  exports["throwException"] = $foreign.throwException;
})(PS["Control.Monad.Eff.Exception"] = PS["Control.Monad.Eff.Exception"] || {});
(function(exports) {
  // Generated by purs version 0.11.3
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Either = PS["Data.Either"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];        
  var MonadThrow = function (Monad0, throwError) {
      this.Monad0 = Monad0;
      this.throwError = throwError;
  };
  var throwError = function (dict) {
      return dict.throwError;
  };
  exports["MonadThrow"] = MonadThrow;
  exports["throwError"] = throwError;
})(PS["Control.Monad.Error.Class"] = PS["Control.Monad.Error.Class"] || {});
(function(exports) {
    "use strict";

  exports.runFn4 = function (fn) {
    return function (a) {
      return function (b) {
        return function (c) {
          return function (d) {
            return fn(a, b, c, d);
          };
        };
      };
    };
  };
})(PS["Data.Function.Uncurried"] = PS["Data.Function.Uncurried"] || {});
(function(exports) {
  // Generated by purs version 0.11.3
  "use strict";
  var $foreign = PS["Data.Function.Uncurried"];
  var Data_Unit = PS["Data.Unit"];
  exports["runFn4"] = $foreign.runFn4;
})(PS["Data.Function.Uncurried"] = PS["Data.Function.Uncurried"] || {});
(function(exports) {
    "use strict";

  // module Unsafe.Coerce

  exports.unsafeCoerce = function (x) {
    return x;
  };
})(PS["Unsafe.Coerce"] = PS["Unsafe.Coerce"] || {});
(function(exports) {
  // Generated by purs version 0.11.3
  "use strict";
  var $foreign = PS["Unsafe.Coerce"];
  exports["unsafeCoerce"] = $foreign.unsafeCoerce;
})(PS["Unsafe.Coerce"] = PS["Unsafe.Coerce"] || {});
(function(exports) {
  // Generated by purs version 0.11.3
  "use strict";
  var $foreign = PS["Control.Monad.Aff"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad = PS["Control.Monad"];
  var Control_Monad_Aff_Internal = PS["Control.Monad.Aff.Internal"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_Eff_Class = PS["Control.Monad.Eff.Class"];
  var Control_Monad_Eff_Exception = PS["Control.Monad.Eff.Exception"];
  var Control_Monad_Error_Class = PS["Control.Monad.Error.Class"];
  var Control_Monad_Rec_Class = PS["Control.Monad.Rec.Class"];
  var Control_MonadPlus = PS["Control.MonadPlus"];
  var Control_MonadZero = PS["Control.MonadZero"];
  var Control_Parallel = PS["Control.Parallel"];
  var Control_Parallel_Class = PS["Control.Parallel.Class"];
  var Control_Plus = PS["Control.Plus"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Either = PS["Data.Either"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Function_Uncurried = PS["Data.Function.Uncurried"];
  var Data_Functor = PS["Data.Functor"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Time_Duration = PS["Data.Time.Duration"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];
  var Unsafe_Coerce = PS["Unsafe.Coerce"];
  var Canceler = function (x) {
      return x;
  };
  var runAff = function (ex) {
      return function (f) {
          return function (aff) {
              return $foreign._runAff(ex, f, aff);
          };
      };
  };         
  var makeAff$prime = function (h) {
      return $foreign._makeAff(h);
  };
  var functorAff = new Data_Functor.Functor(function (f) {
      return function (fa) {
          return $foreign._fmap(f, fa);
      };
  });                                        
  var cancel = function (v) {
      return v;
  };
  var launchAff = (function () {
      var lowerEx = Data_Functor.map(Control_Monad_Eff.functorEff)(function ($54) {
          return Canceler(Data_Functor.map(Data_Functor.functorFn)($foreign._unsafeInterleaveAff)(cancel($54)));
      });
      return function ($55) {
          return lowerEx(runAff(Control_Monad_Eff_Exception.throwException)(Data_Function["const"](Control_Applicative.pure(Control_Monad_Eff.applicativeEff)(Data_Unit.unit)))($foreign._unsafeInterleaveAff($55)));
      };
  })();
  var applyAff = new Control_Apply.Apply(function () {
      return functorAff;
  }, function (ff) {
      return function (fa) {
          return $foreign._bind(alwaysCanceler, ff, function (f) {
              return Data_Functor.map(functorAff)(f)(fa);
          });
      };
  });
  var applicativeAff = new Control_Applicative.Applicative(function () {
      return applyAff;
  }, function (v) {
      return $foreign._pure(nonCanceler, v);
  });
  var nonCanceler = Data_Function["const"](Control_Applicative.pure(applicativeAff)(false));
  var alwaysCanceler = Data_Function["const"](Control_Applicative.pure(applicativeAff)(true));
  var makeAff = function (h) {
      return makeAff$prime(function (e) {
          return function (a) {
              return Data_Functor.map(Control_Monad_Eff.functorEff)(Data_Function["const"](nonCanceler))(h(e)(a));
          };
      });
  };                                                                         
  var bindAff = new Control_Bind.Bind(function () {
      return applyAff;
  }, function (fa) {
      return function (f) {
          return $foreign._bind(alwaysCanceler, fa, f);
      };
  });
  var monadAff = new Control_Monad.Monad(function () {
      return applicativeAff;
  }, function () {
      return bindAff;
  });
  var monadEffAff = new Control_Monad_Eff_Class.MonadEff(function () {
      return monadAff;
  }, function (eff) {
      return $foreign._liftEff(nonCanceler, eff);
  });
  exports["Canceler"] = Canceler;
  exports["cancel"] = cancel;
  exports["launchAff"] = launchAff;
  exports["makeAff"] = makeAff;
  exports["makeAff'"] = makeAff$prime;
  exports["nonCanceler"] = nonCanceler;
  exports["runAff"] = runAff;
  exports["functorAff"] = functorAff;
  exports["applyAff"] = applyAff;
  exports["applicativeAff"] = applicativeAff;
  exports["bindAff"] = bindAff;
  exports["monadAff"] = monadAff;
  exports["monadEffAff"] = monadEffAff;
})(PS["Control.Monad.Aff"] = PS["Control.Monad.Aff"] || {});
(function(exports) {
    "use strict";

  exports.log = function (s) {
    return function () {
      console.log(s);
      return {};
    };
  };
})(PS["Control.Monad.Eff.Console"] = PS["Control.Monad.Eff.Console"] || {});
(function(exports) {
  // Generated by purs version 0.11.3
  "use strict";
  var $foreign = PS["Control.Monad.Eff.Console"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Data_Show = PS["Data.Show"];
  var Data_Unit = PS["Data.Unit"];
  exports["log"] = $foreign.log;
})(PS["Control.Monad.Eff.Console"] = PS["Control.Monad.Eff.Console"] || {});
(function(exports) {
  // Generated by purs version 0.11.3
  "use strict";
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];        
  var MonadState = function (Monad0, state) {
      this.Monad0 = Monad0;
      this.state = state;
  };
  var state = function (dict) {
      return dict.state;
  };
  var modify = function (dictMonadState) {
      return function (f) {
          return state(dictMonadState)(function (s) {
              return new Data_Tuple.Tuple(Data_Unit.unit, f(s));
          });
      };
  };
  var gets = function (dictMonadState) {
      return function (f) {
          return state(dictMonadState)(function (s) {
              return new Data_Tuple.Tuple(f(s), s);
          });
      };
  };
  exports["MonadState"] = MonadState;
  exports["gets"] = gets;
  exports["modify"] = modify;
  exports["state"] = state;
})(PS["Control.Monad.State.Class"] = PS["Control.Monad.State.Class"] || {});
(function(exports) {
  // Generated by purs version 0.11.3
  "use strict";
  var Prelude = PS["Prelude"];        
  var MonadTrans = function (lift) {
      this.lift = lift;
  };
  var lift = function (dict) {
      return dict.lift;
  };
  exports["MonadTrans"] = MonadTrans;
  exports["lift"] = lift;
})(PS["Control.Monad.Trans.Class"] = PS["Control.Monad.Trans.Class"] || {});
(function(exports) {
  // Generated by purs version 0.11.3
  "use strict";
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Category = PS["Control.Category"];
  var Control_Monad = PS["Control.Monad"];
  var Control_Monad_Cont_Class = PS["Control.Monad.Cont.Class"];
  var Control_Monad_Eff_Class = PS["Control.Monad.Eff.Class"];
  var Control_Monad_Error_Class = PS["Control.Monad.Error.Class"];
  var Control_Monad_Reader_Class = PS["Control.Monad.Reader.Class"];
  var Control_Monad_Rec_Class = PS["Control.Monad.Rec.Class"];
  var Control_Monad_State_Class = PS["Control.Monad.State.Class"];
  var Control_Monad_Trans_Class = PS["Control.Monad.Trans.Class"];
  var Control_Monad_Writer_Class = PS["Control.Monad.Writer.Class"];
  var Control_MonadPlus = PS["Control.MonadPlus"];
  var Control_MonadZero = PS["Control.MonadZero"];
  var Control_Plus = PS["Control.Plus"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Either = PS["Data.Either"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Tuple = PS["Data.Tuple"];
  var Prelude = PS["Prelude"];        
  var ExceptT = function (x) {
      return x;
  };
  var runExceptT = function (v) {
      return v;
  };          
  var monadTransExceptT = new Control_Monad_Trans_Class.MonadTrans(function (dictMonad) {
      return function (m) {
          return Control_Bind.bind(dictMonad.Bind1())(m)(function (v) {
              return Control_Applicative.pure(dictMonad.Applicative0())(new Data_Either.Right(v));
          });
      };
  });
  var mapExceptT = function (f) {
      return function (v) {
          return f(v);
      };
  };
  var functorExceptT = function (dictFunctor) {
      return new Data_Functor.Functor(function (f) {
          return mapExceptT(Data_Functor.map(dictFunctor)(Data_Functor.map(Data_Either.functorEither)(f)));
      });
  };
  var monadExceptT = function (dictMonad) {
      return new Control_Monad.Monad(function () {
          return applicativeExceptT(dictMonad);
      }, function () {
          return bindExceptT(dictMonad);
      });
  };
  var bindExceptT = function (dictMonad) {
      return new Control_Bind.Bind(function () {
          return applyExceptT(dictMonad);
      }, function (v) {
          return function (k) {
              return Control_Bind.bind(dictMonad.Bind1())(v)(Data_Either.either(function ($97) {
                  return Control_Applicative.pure(dictMonad.Applicative0())(Data_Either.Left.create($97));
              })(function (a) {
                  var v1 = k(a);
                  return v1;
              }));
          };
      });
  };
  var applyExceptT = function (dictMonad) {
      return new Control_Apply.Apply(function () {
          return functorExceptT(((dictMonad.Bind1()).Apply0()).Functor0());
      }, Control_Monad.ap(monadExceptT(dictMonad)));
  };
  var applicativeExceptT = function (dictMonad) {
      return new Control_Applicative.Applicative(function () {
          return applyExceptT(dictMonad);
      }, function ($98) {
          return ExceptT(Control_Applicative.pure(dictMonad.Applicative0())(Data_Either.Right.create($98)));
      });
  };
  var monadStateExceptT = function (dictMonadState) {
      return new Control_Monad_State_Class.MonadState(function () {
          return monadExceptT(dictMonadState.Monad0());
      }, function (f) {
          return Control_Monad_Trans_Class.lift(monadTransExceptT)(dictMonadState.Monad0())(Control_Monad_State_Class.state(dictMonadState)(f));
      });
  };
  var monadThrowExceptT = function (dictMonad) {
      return new Control_Monad_Error_Class.MonadThrow(function () {
          return monadExceptT(dictMonad);
      }, function ($102) {
          return ExceptT(Control_Applicative.pure(dictMonad.Applicative0())(Data_Either.Left.create($102)));
      });
  };
  exports["ExceptT"] = ExceptT;
  exports["mapExceptT"] = mapExceptT;
  exports["runExceptT"] = runExceptT;
  exports["functorExceptT"] = functorExceptT;
  exports["applyExceptT"] = applyExceptT;
  exports["applicativeExceptT"] = applicativeExceptT;
  exports["bindExceptT"] = bindExceptT;
  exports["monadExceptT"] = monadExceptT;
  exports["monadTransExceptT"] = monadTransExceptT;
  exports["monadThrowExceptT"] = monadThrowExceptT;
  exports["monadStateExceptT"] = monadStateExceptT;
})(PS["Control.Monad.Except.Trans"] = PS["Control.Monad.Except.Trans"] || {});
(function(exports) {
  // Generated by purs version 0.11.3
  "use strict";
  var Control_Alt = PS["Control.Alt"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Comonad = PS["Control.Comonad"];
  var Control_Extend = PS["Control.Extend"];
  var Control_Lazy = PS["Control.Lazy"];
  var Control_Monad = PS["Control.Monad"];
  var Data_BooleanAlgebra = PS["Data.BooleanAlgebra"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_CommutativeRing = PS["Data.CommutativeRing"];
  var Data_Eq = PS["Data.Eq"];
  var Data_EuclideanRing = PS["Data.EuclideanRing"];
  var Data_Field = PS["Data.Field"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Functor_Invariant = PS["Data.Functor.Invariant"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var Data_Traversable = PS["Data.Traversable"];
  var Prelude = PS["Prelude"];        
  var Identity = function (x) {
      return x;
  };
  var newtypeIdentity = new Data_Newtype.Newtype(function (n) {
      return n;
  }, Identity);
  var functorIdentity = new Data_Functor.Functor(function (f) {
      return function (v) {
          return f(v);
      };
  });
  var applyIdentity = new Control_Apply.Apply(function () {
      return functorIdentity;
  }, function (v) {
      return function (v1) {
          return v(v1);
      };
  });
  var bindIdentity = new Control_Bind.Bind(function () {
      return applyIdentity;
  }, function (v) {
      return function (f) {
          return f(v);
      };
  });
  var applicativeIdentity = new Control_Applicative.Applicative(function () {
      return applyIdentity;
  }, Identity);
  var monadIdentity = new Control_Monad.Monad(function () {
      return applicativeIdentity;
  }, function () {
      return bindIdentity;
  });
  exports["Identity"] = Identity;
  exports["newtypeIdentity"] = newtypeIdentity;
  exports["functorIdentity"] = functorIdentity;
  exports["applyIdentity"] = applyIdentity;
  exports["applicativeIdentity"] = applicativeIdentity;
  exports["bindIdentity"] = bindIdentity;
  exports["monadIdentity"] = monadIdentity;
})(PS["Data.Identity"] = PS["Data.Identity"] || {});
(function(exports) {
  // Generated by purs version 0.11.3
  "use strict";
  var Control_Monad_Error_Class = PS["Control.Monad.Error.Class"];
  var Control_Monad_Except_Trans = PS["Control.Monad.Except.Trans"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Either = PS["Data.Either"];
  var Data_Identity = PS["Data.Identity"];
  var Data_Newtype = PS["Data.Newtype"];
  var Prelude = PS["Prelude"];                                                           
  var runExcept = function ($0) {
      return Data_Newtype.unwrap(Data_Identity.newtypeIdentity)(Control_Monad_Except_Trans.runExceptT($0));
  };
  exports["runExcept"] = runExcept;
})(PS["Control.Monad.Except"] = PS["Control.Monad.Except"] || {});
(function(exports) {
  // Generated by purs version 0.11.3
  "use strict";
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Lazy = PS["Control.Lazy"];
  var Control_Monad = PS["Control.Monad"];
  var Control_Monad_Cont_Class = PS["Control.Monad.Cont.Class"];
  var Control_Monad_Eff_Class = PS["Control.Monad.Eff.Class"];
  var Control_Monad_Error_Class = PS["Control.Monad.Error.Class"];
  var Control_Monad_Reader_Class = PS["Control.Monad.Reader.Class"];
  var Control_Monad_Rec_Class = PS["Control.Monad.Rec.Class"];
  var Control_Monad_State_Class = PS["Control.Monad.State.Class"];
  var Control_Monad_Trans_Class = PS["Control.Monad.Trans.Class"];
  var Control_Monad_Writer_Class = PS["Control.Monad.Writer.Class"];
  var Control_MonadPlus = PS["Control.MonadPlus"];
  var Control_MonadZero = PS["Control.MonadZero"];
  var Control_Plus = PS["Control.Plus"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];        
  var StateT = function (x) {
      return x;
  };
  var runStateT = function (v) {
      return v;
  };
  var lazyStateT = new Control_Lazy.Lazy(function (f) {
      return function (s) {
          var v = f(Data_Unit.unit);
          return v(s);
      };
  });
  var functorStateT = function (dictFunctor) {
      return new Data_Functor.Functor(function (f) {
          return function (v) {
              return function (s) {
                  return Data_Functor.map(dictFunctor)(function (v1) {
                      return new Data_Tuple.Tuple(f(v1.value0), v1.value1);
                  })(v(s));
              };
          };
      });
  };
  var evalStateT = function (dictFunctor) {
      return function (v) {
          return function (s) {
              return Data_Functor.map(dictFunctor)(Data_Tuple.fst)(v(s));
          };
      };
  };
  var monadStateT = function (dictMonad) {
      return new Control_Monad.Monad(function () {
          return applicativeStateT(dictMonad);
      }, function () {
          return bindStateT(dictMonad);
      });
  };
  var bindStateT = function (dictMonad) {
      return new Control_Bind.Bind(function () {
          return applyStateT(dictMonad);
      }, function (v) {
          return function (f) {
              return function (s) {
                  return Control_Bind.bind(dictMonad.Bind1())(v(s))(function (v1) {
                      var v3 = f(v1.value0);
                      return v3(v1.value1);
                  });
              };
          };
      });
  };
  var applyStateT = function (dictMonad) {
      return new Control_Apply.Apply(function () {
          return functorStateT(((dictMonad.Bind1()).Apply0()).Functor0());
      }, Control_Monad.ap(monadStateT(dictMonad)));
  };
  var applicativeStateT = function (dictMonad) {
      return new Control_Applicative.Applicative(function () {
          return applyStateT(dictMonad);
      }, function (a) {
          return function (s) {
              return Control_Applicative.pure(dictMonad.Applicative0())(new Data_Tuple.Tuple(a, s));
          };
      });
  };
  var monadStateStateT = function (dictMonad) {
      return new Control_Monad_State_Class.MonadState(function () {
          return monadStateT(dictMonad);
      }, function (f) {
          return StateT(function ($111) {
              return Control_Applicative.pure(dictMonad.Applicative0())(f($111));
          });
      });
  };
  exports["StateT"] = StateT;
  exports["evalStateT"] = evalStateT;
  exports["runStateT"] = runStateT;
  exports["functorStateT"] = functorStateT;
  exports["applyStateT"] = applyStateT;
  exports["applicativeStateT"] = applicativeStateT;
  exports["bindStateT"] = bindStateT;
  exports["monadStateT"] = monadStateT;
  exports["lazyStateT"] = lazyStateT;
  exports["monadStateStateT"] = monadStateStateT;
})(PS["Control.Monad.State.Trans"] = PS["Control.Monad.State.Trans"] || {});
(function(exports) {
    "use strict";

  function id(x) {
    return x;
  } 

  var objToString = Object.prototype.toString;

  function isArray(a) {
    return objToString.call(a) === "[object Array]";
  }

  exports._foldJson = function (isNull, isBool, isNum, isStr, isArr, isObj, j) {
    if (j == null) return isNull(null);
    else if (typeof j === "boolean") return isBool(j);
    else if (typeof j === "number") return isNum(j);
    else if (typeof j === "string") return isStr(j);
    else if (objToString.call(j) === "[object Array]")
      return isArr(j);
    else return isObj(j);
  };
})(PS["Data.Argonaut.Core"] = PS["Data.Argonaut.Core"] || {});
(function(exports) {
    "use strict";    

  exports.runST = function (f) {
    return f;
  };

  exports._lookup = function (no, yes, k, m) {
    return k in m ? yes(m[k]) : no;
  };

  function toArrayWithKey(f) {
    return function (m) {
      var r = [];
      for (var k in m) {
        if (hasOwnProperty.call(m, k)) {
          r.push(f(k)(m[k]));
        }
      }
      return r;
    };
  }

  exports.toArrayWithKey = toArrayWithKey;

  exports.keys = Object.keys || toArrayWithKey(function (k) {
    return function () { return k; };
  });
})(PS["Data.StrMap"] = PS["Data.StrMap"] || {});
(function(exports) {
    "use strict";

  exports["new"] = function () {
    return {};
  };

  exports.poke = function (m) {
    return function (k) {
      return function (v) {
        return function () {
          m[k] = v;
          return m;
        };
      };
    };
  };
})(PS["Data.StrMap.ST"] = PS["Data.StrMap.ST"] || {});
(function(exports) {
  // Generated by purs version 0.11.3
  "use strict";
  var $foreign = PS["Data.StrMap.ST"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_ST = PS["Control.Monad.ST"];
  var Data_Maybe = PS["Data.Maybe"];
  exports["new"] = $foreign["new"];
  exports["poke"] = $foreign.poke;
})(PS["Data.StrMap.ST"] = PS["Data.StrMap.ST"] || {});
(function(exports) {
  // Generated by purs version 0.11.3
  "use strict";
  var $foreign = PS["Data.StrMap"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Category = PS["Control.Category"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_ST = PS["Control.Monad.ST"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Array = PS["Data.Array"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_FoldableWithIndex = PS["Data.FoldableWithIndex"];
  var Data_Function = PS["Data.Function"];
  var Data_Function_Uncurried = PS["Data.Function.Uncurried"];
  var Data_Functor = PS["Data.Functor"];
  var Data_FunctorWithIndex = PS["Data.FunctorWithIndex"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];
  var Data_StrMap_ST = PS["Data.StrMap.ST"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_TraversableWithIndex = PS["Data.TraversableWithIndex"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unfoldable = PS["Data.Unfoldable"];
  var Prelude = PS["Prelude"];
  var pureST = function (f) {
      return Control_Monad_Eff.runPure($foreign.runST(f));
  };
  var lookup = Data_Function_Uncurried.runFn4($foreign._lookup)(Data_Maybe.Nothing.value)(Data_Maybe.Just.create);
  var fromFoldable = function (dictFoldable) {
      return function (l) {
          return pureST(function __do() {
              var v = Data_StrMap_ST["new"]();
              Control_Monad_Eff.foreachE(Data_Array.fromFoldable(dictFoldable)(l))(function (v1) {
                  return Data_Functor["void"](Control_Monad_Eff.functorEff)(Data_StrMap_ST.poke(v)(v1.value0)(v1.value1));
              })();
              return v;
          });
      };
  };
  exports["fromFoldable"] = fromFoldable;
  exports["lookup"] = lookup;
  exports["pureST"] = pureST;
  exports["keys"] = $foreign.keys;
})(PS["Data.StrMap"] = PS["Data.StrMap"] || {});
(function(exports) {
  // Generated by purs version 0.11.3
  "use strict";
  var $foreign = PS["Data.Argonaut.Core"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Function = PS["Data.Function"];
  var Data_Function_Uncurried = PS["Data.Function.Uncurried"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Show = PS["Data.Show"];
  var Data_StrMap = PS["Data.StrMap"];
  var Data_Tuple = PS["Data.Tuple"];
  var Prelude = PS["Prelude"];
  var Unsafe_Coerce = PS["Unsafe.Coerce"];        
  var verbJsonType = function (def) {
      return function (f) {
          return function (fold) {
              return fold(def)(f);
          };
      };
  };
  var toJsonType = verbJsonType(Data_Maybe.Nothing.value)(Data_Maybe.Just.create);
  var isJsonType = verbJsonType(false)(Data_Function["const"](true));
  var foldJsonString = function (d) {
      return function (f) {
          return function (j) {
              return $foreign._foldJson(Data_Function["const"](d), Data_Function["const"](d), Data_Function["const"](d), f, Data_Function["const"](d), Data_Function["const"](d), j);
          };
      };
  };                                        
  var foldJsonObject = function (d) {
      return function (f) {
          return function (j) {
              return $foreign._foldJson(Data_Function["const"](d), Data_Function["const"](d), Data_Function["const"](d), Data_Function["const"](d), Data_Function["const"](d), f, j);
          };
      };
  };                                        
  var toObject = toJsonType(foldJsonObject);
  var foldJsonNull = function (d) {
      return function (f) {
          return function (j) {
              return $foreign._foldJson(f, Data_Function["const"](d), Data_Function["const"](d), Data_Function["const"](d), Data_Function["const"](d), Data_Function["const"](d), j);
          };
      };
  };
  var isNull = isJsonType(foldJsonNull);      
  var foldJsonArray = function (d) {
      return function (f) {
          return function (j) {
              return $foreign._foldJson(Data_Function["const"](d), Data_Function["const"](d), Data_Function["const"](d), Data_Function["const"](d), f, Data_Function["const"](d), j);
          };
      };
  };                                      
  var toArray = toJsonType(foldJsonArray);
  exports["foldJsonArray"] = foldJsonArray;
  exports["foldJsonNull"] = foldJsonNull;
  exports["foldJsonObject"] = foldJsonObject;
  exports["foldJsonString"] = foldJsonString;
  exports["isNull"] = isNull;
  exports["toArray"] = toArray;
  exports["toObject"] = toObject;
})(PS["Data.Argonaut.Core"] = PS["Data.Argonaut.Core"] || {});
(function(exports) {
  // Generated by purs version 0.11.3
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Argonaut_Core = PS["Data.Argonaut.Core"];
  var Data_Bifunctor = PS["Data.Bifunctor"];
  var Data_Boolean = PS["Data.Boolean"];
  var Data_Either = PS["Data.Either"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Int = PS["Data.Int"];
  var Data_List = PS["Data.List"];
  var Data_List_Types = PS["Data.List.Types"];
  var Data_Map = PS["Data.Map"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];
  var Data_StrMap = PS["Data.StrMap"];
  var Data_String = PS["Data.String"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];        
  var DecodeJson = function (decodeJson) {
      this.decodeJson = decodeJson;
  }; 
  var decodeJsonString = new DecodeJson(Data_Argonaut_Core.foldJsonString(new Data_Either.Left("Value is not a String"))(Data_Either.Right.create));   
  var decodeJson = function (dict) {
      return dict.decodeJson;
  };                                
  var decodeJsonMaybe = function (dictDecodeJson) {
      return new DecodeJson(function (j) {
          if (Data_Argonaut_Core.isNull(j)) {
              return Control_Applicative.pure(Data_Either.applicativeEither)(Data_Maybe.Nothing.value);
          };
          if (Data_Boolean.otherwise) {
              return Data_Functor.map(Data_Either.functorEither)(Data_Maybe.Just.create)(decodeJson(dictDecodeJson)(j));
          };
          throw new Error("Failed pattern match at Data.Argonaut.Decode.Class line 24, column 3 - line 26, column 40: " + [ j.constructor.name ]);
      });
  };
  var decodeJArray = function ($35) {
      return Data_Maybe.maybe(new Data_Either.Left("Value is not an Array"))(Data_Either.Right.create)(Data_Argonaut_Core.toArray($35));
  };
  var decodeArray = function (dictDecodeJson) {
      return new DecodeJson(function ($38) {
          return Data_Bifunctor.lmap(Data_Either.bifunctorEither)(function (v) {
              return "Couldn't decode Array: " + v;
          })(Control_Bind.composeKleisliFlipped(Data_Either.bindEither)(Data_Traversable.traverse(Data_Traversable.traversableArray)(Data_Either.applicativeEither)(decodeJson(dictDecodeJson)))(decodeJArray)($38));
      });
  };
  exports["DecodeJson"] = DecodeJson;
  exports["decodeJson"] = decodeJson;
  exports["decodeJsonMaybe"] = decodeJsonMaybe;
  exports["decodeJsonString"] = decodeJsonString;
  exports["decodeArray"] = decodeArray;
})(PS["Data.Argonaut.Decode.Class"] = PS["Data.Argonaut.Decode.Class"] || {});
(function(exports) {
    "use strict";

  exports._jsonParser = function (fail, succ, s) {
    try {
      return succ(JSON.parse(s));
    }
    catch (e) {
      return fail(e.message);
    }
  };
})(PS["Data.Argonaut.Parser"] = PS["Data.Argonaut.Parser"] || {});
(function(exports) {
  // Generated by purs version 0.11.3
  "use strict";
  var $foreign = PS["Data.Argonaut.Parser"];
  var Data_Argonaut_Core = PS["Data.Argonaut.Core"];
  var Data_Either = PS["Data.Either"];
  var Data_Function_Uncurried = PS["Data.Function.Uncurried"];        
  var jsonParser = function (j) {
      return $foreign._jsonParser(Data_Either.Left.create, Data_Either.Right.create, j);
  };
  exports["jsonParser"] = jsonParser;
})(PS["Data.Argonaut.Parser"] = PS["Data.Argonaut.Parser"] || {});
(function(exports) {
  // Generated by purs version 0.11.3
  "use strict";
  var Data_List = PS["Data.List"];
  var Data_List_Types = PS["Data.List.Types"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];
  var Data_Tuple = PS["Data.Tuple"];        
  var CatQueue = (function () {
      function CatQueue(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      CatQueue.create = function (value0) {
          return function (value1) {
              return new CatQueue(value0, value1);
          };
      };
      return CatQueue;
  })();
  var uncons = function (__copy_v) {
      var v = __copy_v;
      var __tco_done = false;
      var __tco_result;
      var __tco_v;
      function __tco_loop(v) {
          if (v.value0 instanceof Data_List_Types.Nil && v.value1 instanceof Data_List_Types.Nil) {
              __tco_done = true;
              return Data_Maybe.Nothing.value;
          };
          if (v.value0 instanceof Data_List_Types.Nil) {
              __tco_v = new CatQueue(Data_List.reverse(v.value1), Data_List_Types.Nil.value);
              return;
          };
          if (v.value0 instanceof Data_List_Types.Cons) {
              __tco_done = true;
              return new Data_Maybe.Just(new Data_Tuple.Tuple(v.value0.value0, new CatQueue(v.value0.value1, v.value1)));
          };
          throw new Error("Failed pattern match at Data.CatQueue line 51, column 1 - line 51, column 36: " + [ v.constructor.name ]);
      };
      while (!__tco_done) {
          __tco_result = __tco_loop(v);
          v = __tco_v;
      };
      return __tco_result;
  };
  var snoc = function (v) {
      return function (a) {
          return new CatQueue(v.value0, new Data_List_Types.Cons(a, v.value1));
      };
  };
  var $$null = function (v) {
      if (v.value0 instanceof Data_List_Types.Nil && v.value1 instanceof Data_List_Types.Nil) {
          return true;
      };
      return false;
  };
  var empty = new CatQueue(Data_List_Types.Nil.value, Data_List_Types.Nil.value);
  exports["CatQueue"] = CatQueue;
  exports["empty"] = empty;
  exports["null"] = $$null;
  exports["snoc"] = snoc;
  exports["uncons"] = uncons;
})(PS["Data.CatQueue"] = PS["Data.CatQueue"] || {});
(function(exports) {
  // Generated by purs version 0.11.3
  "use strict";
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad = PS["Control.Monad"];
  var Control_MonadPlus = PS["Control.MonadPlus"];
  var Control_MonadZero = PS["Control.MonadZero"];
  var Control_Plus = PS["Control.Plus"];
  var Data_CatQueue = PS["Data.CatQueue"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_List = PS["Data.List"];
  var Data_List_Types = PS["Data.List.Types"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_NaturalTransformation = PS["Data.NaturalTransformation"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unfoldable = PS["Data.Unfoldable"];        
  var CatNil = (function () {
      function CatNil() {

      };
      CatNil.value = new CatNil();
      return CatNil;
  })();
  var CatCons = (function () {
      function CatCons(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      CatCons.create = function (value0) {
          return function (value1) {
              return new CatCons(value0, value1);
          };
      };
      return CatCons;
  })();
  var link = function (v) {
      return function (cat) {
          if (v instanceof CatNil) {
              return cat;
          };
          if (v instanceof CatCons) {
              return new CatCons(v.value0, Data_CatQueue.snoc(v.value1)(cat));
          };
          throw new Error("Failed pattern match at Data.CatList line 111, column 1 - line 111, column 22: " + [ v.constructor.name, cat.constructor.name ]);
      };
  };
  var foldr = function (k) {
      return function (b) {
          return function (q) {
              var foldl = function (__copy_v) {
                  return function (__copy_c) {
                      return function (__copy_v1) {
                          var v = __copy_v;
                          var c = __copy_c;
                          var v1 = __copy_v1;
                          var __tco_done = false;
                          var __tco_result;
                          var __tco_v;
                          var __tco_c;
                          var __tco_v1;
                          function __tco_loop(v, c, v1) {
                              if (v1 instanceof Data_List_Types.Nil) {
                                  __tco_done = true;
                                  return c;
                              };
                              if (v1 instanceof Data_List_Types.Cons) {
                                  __tco_v = v;
                                  __tco_c = v(c)(v1.value0);
                                  __tco_v1 = v1.value1;
                                  return;
                              };
                              throw new Error("Failed pattern match at Data.CatList line 126, column 3 - line 126, column 22: " + [ v.constructor.name, c.constructor.name, v1.constructor.name ]);
                          };
                          while (!__tco_done) {
                              __tco_result = __tco_loop(v, c, v1);
                              v = __tco_v;
                              c = __tco_c;
                              v1 = __tco_v1;
                          };
                          return __tco_result;
                      };
                  };
              };
              var go = function (__copy_xs) {
                  return function (__copy_ys) {
                      var xs = __copy_xs;
                      var ys = __copy_ys;
                      var __tco_done = false;
                      var __tco_result;
                      var __tco_xs;
                      var __tco_ys;
                      function __tco_loop(xs, ys) {
                          var v = Data_CatQueue.uncons(xs);
                          if (v instanceof Data_Maybe.Nothing) {
                              __tco_done = true;
                              return foldl(function (x) {
                                  return function (i) {
                                      return i(x);
                                  };
                              })(b)(ys);
                          };
                          if (v instanceof Data_Maybe.Just) {
                              __tco_xs = v.value0.value1;
                              __tco_ys = new Data_List_Types.Cons(k(v.value0.value0), ys);
                              return;
                          };
                          throw new Error("Failed pattern match at Data.CatList line 121, column 14 - line 123, column 67: " + [ v.constructor.name ]);
                      };
                      while (!__tco_done) {
                          __tco_result = __tco_loop(xs, ys);
                          xs = __tco_xs;
                          ys = __tco_ys;
                      };
                      return __tco_result;
                  };
              };
              return go(q)(Data_List_Types.Nil.value);
          };
      };
  };
  var uncons = function (v) {
      if (v instanceof CatNil) {
          return Data_Maybe.Nothing.value;
      };
      if (v instanceof CatCons) {
          return new Data_Maybe.Just(new Data_Tuple.Tuple(v.value0, (function () {
              var $41 = Data_CatQueue["null"](v.value1);
              if ($41) {
                  return CatNil.value;
              };
              return foldr(link)(CatNil.value)(v.value1);
          })()));
      };
      throw new Error("Failed pattern match at Data.CatList line 102, column 1 - line 102, column 24: " + [ v.constructor.name ]);
  };
  var foldMap = function (dictMonoid) {
      return function (f) {
          return function (v) {
              if (v instanceof CatNil) {
                  return Data_Monoid.mempty(dictMonoid);
              };
              if (v instanceof CatCons) {
                  var d = (function () {
                      var $46 = Data_CatQueue["null"](v.value1);
                      if ($46) {
                          return CatNil.value;
                      };
                      return foldr(link)(CatNil.value)(v.value1);
                  })();
                  return Data_Semigroup.append(dictMonoid.Semigroup0())(f(v.value0))(foldMap(dictMonoid)(f)(d));
              };
              throw new Error("Failed pattern match at Data.CatList line 142, column 1 - line 142, column 26: " + [ f.constructor.name, v.constructor.name ]);
          };
      };
  };
  var foldableCatList = new Data_Foldable.Foldable(function (dictMonoid) {
      return function (f) {
          return function (l) {
              return foldMap(dictMonoid)(f)(l);
          };
      };
  }, function (f) {
      return function (s) {
          return function (l) {
              return Data_Foldable.foldlDefault(foldableCatList)(f)(s)(l);
          };
      };
  }, function (f) {
      return function (s) {
          return function (l) {
              return Data_Foldable.foldrDefault(foldableCatList)(f)(s)(l);
          };
      };
  });
  var empty = CatNil.value;
  var append = function (v) {
      return function (v1) {
          if (v1 instanceof CatNil) {
              return v;
          };
          if (v instanceof CatNil) {
              return v1;
          };
          return link(v)(v1);
      };
  };
  var cons = function (a) {
      return function (cat) {
          return append(new CatCons(a, Data_CatQueue.empty))(cat);
      };
  };
  var map = function (v) {
      return function (v1) {
          if (v1 instanceof CatNil) {
              return CatNil.value;
          };
          if (v1 instanceof CatCons) {
              var d = (function () {
                  var $53 = Data_CatQueue["null"](v1.value1);
                  if ($53) {
                      return CatNil.value;
                  };
                  return foldr(link)(CatNil.value)(v1.value1);
              })();
              return cons(v(v1.value0))(map(v)(d));
          };
          throw new Error("Failed pattern match at Data.CatList line 136, column 1 - line 136, column 22: " + [ v.constructor.name, v1.constructor.name ]);
      };
  };
  var functorCatList = new Data_Functor.Functor(map);
  var singleton = function (a) {
      return cons(a)(CatNil.value);
  }; 
  var semigroupCatList = new Data_Semigroup.Semigroup(append);
  var monoidCatList = new Data_Monoid.Monoid(function () {
      return semigroupCatList;
  }, CatNil.value);
  var monadCatList = new Control_Monad.Monad(function () {
      return applicativeCatList;
  }, function () {
      return bindCatList;
  });
  var bindCatList = new Control_Bind.Bind(function () {
      return applyCatList;
  }, Data_Function.flip(foldMap(monoidCatList)));
  var applyCatList = new Control_Apply.Apply(function () {
      return functorCatList;
  }, Control_Monad.ap(monadCatList));
  var applicativeCatList = new Control_Applicative.Applicative(function () {
      return applyCatList;
  }, singleton);
  var snoc = function (cat) {
      return function (a) {
          return append(cat)(new CatCons(a, Data_CatQueue.empty));
      };
  };
  exports["CatNil"] = CatNil;
  exports["CatCons"] = CatCons;
  exports["append"] = append;
  exports["cons"] = cons;
  exports["empty"] = empty;
  exports["snoc"] = snoc;
  exports["uncons"] = uncons;
  exports["semigroupCatList"] = semigroupCatList;
  exports["monoidCatList"] = monoidCatList;
  exports["foldableCatList"] = foldableCatList;
  exports["functorCatList"] = functorCatList;
  exports["applyCatList"] = applyCatList;
  exports["applicativeCatList"] = applicativeCatList;
  exports["bindCatList"] = bindCatList;
  exports["monadCatList"] = monadCatList;
})(PS["Data.CatList"] = PS["Data.CatList"] || {});
(function(exports) {
    "use strict";

  exports.toCharCode = function (c) {
    return c.charCodeAt(0);
  };
})(PS["Data.Char"] = PS["Data.Char"] || {});
(function(exports) {
  // Generated by purs version 0.11.3
  "use strict";
  var $foreign = PS["Data.Char"];
  exports["toCharCode"] = $foreign.toCharCode;
})(PS["Data.Char"] = PS["Data.Char"] || {});
(function(exports) {
    "use strict";

  var createDate = function (y, m, d) {
    var date = new Date(Date.UTC(y, m, d));
    if (y >= 0 && y < 100) {
      date.setUTCFullYear(y);
    }
    return date;
  };

  exports.canonicalDateImpl = function (ctor, y, m, d) {
    var date = createDate(y, m - 1, d);
    return ctor(date.getUTCFullYear())(date.getUTCMonth() + 1)(date.getUTCDate());
  };
})(PS["Data.Date"] = PS["Data.Date"] || {});
(function(exports) {
  // Generated by purs version 0.11.3
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_MonadPlus = PS["Control.MonadPlus"];
  var Control_MonadZero = PS["Control.MonadZero"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Boolean = PS["Data.Boolean"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_Char = PS["Data.Char"];
  var Data_Either = PS["Data.Either"];
  var Data_Eq = PS["Data.Eq"];
  var Data_EuclideanRing = PS["Data.EuclideanRing"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_NonEmpty = PS["Data.NonEmpty"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unfoldable = PS["Data.Unfoldable"];
  var Data_Unit = PS["Data.Unit"];
  var Partial_Unsafe = PS["Partial.Unsafe"];
  var Prelude = PS["Prelude"];
  var Enum = function (Ord0, pred, succ) {
      this.Ord0 = Ord0;
      this.pred = pred;
      this.succ = succ;
  };
  var BoundedEnum = function (Bounded0, Enum1, cardinality, fromEnum, toEnum) {
      this.Bounded0 = Bounded0;
      this.Enum1 = Enum1;
      this.cardinality = cardinality;
      this.fromEnum = fromEnum;
      this.toEnum = toEnum;
  };
  var toEnum = function (dict) {
      return dict.toEnum;
  };
  var succ = function (dict) {
      return dict.succ;
  };
  var pred = function (dict) {
      return dict.pred;
  };
  var fromEnum = function (dict) {
      return dict.fromEnum;
  };                                                                                               
  var cardinality = function (dict) {
      return dict.cardinality;
  };
  exports["BoundedEnum"] = BoundedEnum;
  exports["Enum"] = Enum;
  exports["cardinality"] = cardinality;
  exports["fromEnum"] = fromEnum;
  exports["pred"] = pred;
  exports["succ"] = succ;
  exports["toEnum"] = toEnum;
})(PS["Data.Enum"] = PS["Data.Enum"] || {});
(function(exports) {
  // Generated by purs version 0.11.3
  "use strict";
  var $foreign = PS["Data.Generic"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Array = PS["Data.Array"];
  var Data_Boolean = PS["Data.Boolean"];
  var Data_Either = PS["Data.Either"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Identity = PS["Data.Identity"];
  var Data_List_Types = PS["Data.List.Types"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_NonEmpty = PS["Data.NonEmpty"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];
  var Data_String = PS["Data.String"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unit = PS["Data.Unit"];
  var Data_Void = PS["Data.Void"];
  var Prelude = PS["Prelude"];
  var Type_Proxy = PS["Type.Proxy"];        
  var SProd = (function () {
      function SProd(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      SProd.create = function (value0) {
          return function (value1) {
              return new SProd(value0, value1);
          };
      };
      return SProd;
  })();
  var SRecord = (function () {
      function SRecord(value0) {
          this.value0 = value0;
      };
      SRecord.create = function (value0) {
          return new SRecord(value0);
      };
      return SRecord;
  })();
  var SNumber = (function () {
      function SNumber(value0) {
          this.value0 = value0;
      };
      SNumber.create = function (value0) {
          return new SNumber(value0);
      };
      return SNumber;
  })();
  var SBoolean = (function () {
      function SBoolean(value0) {
          this.value0 = value0;
      };
      SBoolean.create = function (value0) {
          return new SBoolean(value0);
      };
      return SBoolean;
  })();
  var SInt = (function () {
      function SInt(value0) {
          this.value0 = value0;
      };
      SInt.create = function (value0) {
          return new SInt(value0);
      };
      return SInt;
  })();
  var SString = (function () {
      function SString(value0) {
          this.value0 = value0;
      };
      SString.create = function (value0) {
          return new SString(value0);
      };
      return SString;
  })();
  var SChar = (function () {
      function SChar(value0) {
          this.value0 = value0;
      };
      SChar.create = function (value0) {
          return new SChar(value0);
      };
      return SChar;
  })();
  var SArray = (function () {
      function SArray(value0) {
          this.value0 = value0;
      };
      SArray.create = function (value0) {
          return new SArray(value0);
      };
      return SArray;
  })();
  var SUnit = (function () {
      function SUnit() {

      };
      SUnit.value = new SUnit();
      return SUnit;
  })();
  var SigNumber = (function () {
      function SigNumber() {

      };
      SigNumber.value = new SigNumber();
      return SigNumber;
  })();
  var SigString = (function () {
      function SigString() {

      };
      SigString.value = new SigString();
      return SigString;
  })();
  var Generic = function (fromSpine, toSignature, toSpine) {
      this.fromSpine = fromSpine;
      this.toSignature = toSignature;
      this.toSpine = toSpine;
  };
  var toSpine = function (dict) {
      return dict.toSpine;
  };
  var toSignature = function (dict) {
      return dict.toSignature;
  }; 
  var genericString = new Generic(function (v) {
      if (v instanceof SString) {
          return new Data_Maybe.Just(v.value0);
      };
      return Data_Maybe.Nothing.value;
  }, function (v) {
      return SigString.value;
  }, SString.create);
  var genericNumber = new Generic(function (v) {
      if (v instanceof SNumber) {
          return new Data_Maybe.Just(v.value0);
      };
      return Data_Maybe.Nothing.value;
  }, function (v) {
      return SigNumber.value;
  }, SNumber.create); 
  var fromSpine = function (dict) {
      return dict.fromSpine;
  };
  exports["SigNumber"] = SigNumber;
  exports["SigString"] = SigString;
  exports["SProd"] = SProd;
  exports["SRecord"] = SRecord;
  exports["SNumber"] = SNumber;
  exports["SBoolean"] = SBoolean;
  exports["SInt"] = SInt;
  exports["SString"] = SString;
  exports["SChar"] = SChar;
  exports["SArray"] = SArray;
  exports["SUnit"] = SUnit;
  exports["Generic"] = Generic;
  exports["fromSpine"] = fromSpine;
  exports["toSignature"] = toSignature;
  exports["toSpine"] = toSpine;
  exports["genericNumber"] = genericNumber;
  exports["genericString"] = genericString;
})(PS["Data.Generic"] = PS["Data.Generic"] || {});
(function(exports) {
  // Generated by purs version 0.11.3
  "use strict";
  var Control_Apply = PS["Control.Apply"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Boolean = PS["Data.Boolean"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_Enum = PS["Data.Enum"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Generic = PS["Data.Generic"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];
  var January = (function () {
      function January() {

      };
      January.value = new January();
      return January;
  })();
  var February = (function () {
      function February() {

      };
      February.value = new February();
      return February;
  })();
  var March = (function () {
      function March() {

      };
      March.value = new March();
      return March;
  })();
  var April = (function () {
      function April() {

      };
      April.value = new April();
      return April;
  })();
  var May = (function () {
      function May() {

      };
      May.value = new May();
      return May;
  })();
  var June = (function () {
      function June() {

      };
      June.value = new June();
      return June;
  })();
  var July = (function () {
      function July() {

      };
      July.value = new July();
      return July;
  })();
  var August = (function () {
      function August() {

      };
      August.value = new August();
      return August;
  })();
  var September = (function () {
      function September() {

      };
      September.value = new September();
      return September;
  })();
  var October = (function () {
      function October() {

      };
      October.value = new October();
      return October;
  })();
  var November = (function () {
      function November() {

      };
      November.value = new November();
      return November;
  })();
  var December = (function () {
      function December() {

      };
      December.value = new December();
      return December;
  })();
  var ordYear = Data_Ord.ordInt;
  var ordDay = Data_Ord.ordInt;
  var eqMonth = new Data_Eq.Eq(function (x) {
      return function (y) {
          if (x instanceof January && y instanceof January) {
              return true;
          };
          if (x instanceof February && y instanceof February) {
              return true;
          };
          if (x instanceof March && y instanceof March) {
              return true;
          };
          if (x instanceof April && y instanceof April) {
              return true;
          };
          if (x instanceof May && y instanceof May) {
              return true;
          };
          if (x instanceof June && y instanceof June) {
              return true;
          };
          if (x instanceof July && y instanceof July) {
              return true;
          };
          if (x instanceof August && y instanceof August) {
              return true;
          };
          if (x instanceof September && y instanceof September) {
              return true;
          };
          if (x instanceof October && y instanceof October) {
              return true;
          };
          if (x instanceof November && y instanceof November) {
              return true;
          };
          if (x instanceof December && y instanceof December) {
              return true;
          };
          return false;
      };
  });
  var ordMonth = new Data_Ord.Ord(function () {
      return eqMonth;
  }, function (x) {
      return function (y) {
          if (x instanceof January && y instanceof January) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof January) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof January) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof February && y instanceof February) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof February) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof February) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof March && y instanceof March) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof March) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof March) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof April && y instanceof April) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof April) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof April) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof May && y instanceof May) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof May) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof May) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof June && y instanceof June) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof June) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof June) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof July && y instanceof July) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof July) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof July) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof August && y instanceof August) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof August) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof August) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof September && y instanceof September) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof September) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof September) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof October && y instanceof October) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof October) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof October) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof November && y instanceof November) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof November) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof November) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof December && y instanceof December) {
              return Data_Ordering.EQ.value;
          };
          throw new Error("Failed pattern match at Data.Date.Component line 63, column 1 - line 63, column 38: " + [ x.constructor.name, y.constructor.name ]);
      };
  });                       
  var boundedYear = new Data_Bounded.Bounded(function () {
      return ordYear;
  }, -271820 | 0, 275759);       
  var boundedMonth = new Data_Bounded.Bounded(function () {
      return ordMonth;
  }, January.value, December.value);
  var boundedEnumYear = new Data_Enum.BoundedEnum(function () {
      return boundedYear;
  }, function () {
      return enumYear;
  }, 547580, function (v) {
      return v;
  }, function (n) {
      if (n >= (-271821 | 0) && n <= 275759) {
          return new Data_Maybe.Just(n);
      };
      if (Data_Boolean.otherwise) {
          return Data_Maybe.Nothing.value;
      };
      throw new Error("Failed pattern match at Data.Date.Component line 39, column 3 - line 41, column 26: " + [ n.constructor.name ]);
  });
  var enumYear = new Data_Enum.Enum(function () {
      return ordYear;
  }, function ($110) {
      return Data_Enum.toEnum(boundedEnumYear)((function (v) {
          return v - 1 | 0;
      })(Data_Enum.fromEnum(boundedEnumYear)($110)));
  }, function ($111) {
      return Data_Enum.toEnum(boundedEnumYear)((function (v) {
          return v + 1 | 0;
      })(Data_Enum.fromEnum(boundedEnumYear)($111)));
  });
  var boundedEnumMonth = new Data_Enum.BoundedEnum(function () {
      return boundedMonth;
  }, function () {
      return enumMonth;
  }, 12, function (v) {
      if (v instanceof January) {
          return 1;
      };
      if (v instanceof February) {
          return 2;
      };
      if (v instanceof March) {
          return 3;
      };
      if (v instanceof April) {
          return 4;
      };
      if (v instanceof May) {
          return 5;
      };
      if (v instanceof June) {
          return 6;
      };
      if (v instanceof July) {
          return 7;
      };
      if (v instanceof August) {
          return 8;
      };
      if (v instanceof September) {
          return 9;
      };
      if (v instanceof October) {
          return 10;
      };
      if (v instanceof November) {
          return 11;
      };
      if (v instanceof December) {
          return 12;
      };
      throw new Error("Failed pattern match at Data.Date.Component line 90, column 14 - line 104, column 1: " + [ v.constructor.name ]);
  }, function (v) {
      if (v === 1) {
          return new Data_Maybe.Just(January.value);
      };
      if (v === 2) {
          return new Data_Maybe.Just(February.value);
      };
      if (v === 3) {
          return new Data_Maybe.Just(March.value);
      };
      if (v === 4) {
          return new Data_Maybe.Just(April.value);
      };
      if (v === 5) {
          return new Data_Maybe.Just(May.value);
      };
      if (v === 6) {
          return new Data_Maybe.Just(June.value);
      };
      if (v === 7) {
          return new Data_Maybe.Just(July.value);
      };
      if (v === 8) {
          return new Data_Maybe.Just(August.value);
      };
      if (v === 9) {
          return new Data_Maybe.Just(September.value);
      };
      if (v === 10) {
          return new Data_Maybe.Just(October.value);
      };
      if (v === 11) {
          return new Data_Maybe.Just(November.value);
      };
      if (v === 12) {
          return new Data_Maybe.Just(December.value);
      };
      return Data_Maybe.Nothing.value;
  });
  var enumMonth = new Data_Enum.Enum(function () {
      return ordMonth;
  }, function ($114) {
      return Data_Enum.toEnum(boundedEnumMonth)((function (v) {
          return v - 1 | 0;
      })(Data_Enum.fromEnum(boundedEnumMonth)($114)));
  }, function ($115) {
      return Data_Enum.toEnum(boundedEnumMonth)((function (v) {
          return v + 1 | 0;
      })(Data_Enum.fromEnum(boundedEnumMonth)($115)));
  });
  var boundedDay = new Data_Bounded.Bounded(function () {
      return ordDay;
  }, 1, 31);
  var boundedEnumDay = new Data_Enum.BoundedEnum(function () {
      return boundedDay;
  }, function () {
      return enumDay;
  }, 31, function (v) {
      return v;
  }, function (n) {
      if (n >= 1 && n <= 31) {
          return new Data_Maybe.Just(n);
      };
      if (Data_Boolean.otherwise) {
          return Data_Maybe.Nothing.value;
      };
      throw new Error("Failed pattern match at Data.Date.Component line 139, column 3 - line 141, column 26: " + [ n.constructor.name ]);
  });
  var enumDay = new Data_Enum.Enum(function () {
      return ordDay;
  }, function ($116) {
      return Data_Enum.toEnum(boundedEnumDay)((function (v) {
          return v - 1 | 0;
      })(Data_Enum.fromEnum(boundedEnumDay)($116)));
  }, function ($117) {
      return Data_Enum.toEnum(boundedEnumDay)((function (v) {
          return v + 1 | 0;
      })(Data_Enum.fromEnum(boundedEnumDay)($117)));
  });
  exports["January"] = January;
  exports["February"] = February;
  exports["March"] = March;
  exports["April"] = April;
  exports["May"] = May;
  exports["June"] = June;
  exports["July"] = July;
  exports["August"] = August;
  exports["September"] = September;
  exports["October"] = October;
  exports["November"] = November;
  exports["December"] = December;
  exports["ordYear"] = ordYear;
  exports["boundedYear"] = boundedYear;
  exports["enumYear"] = enumYear;
  exports["boundedEnumYear"] = boundedEnumYear;
  exports["eqMonth"] = eqMonth;
  exports["ordMonth"] = ordMonth;
  exports["boundedMonth"] = boundedMonth;
  exports["enumMonth"] = enumMonth;
  exports["boundedEnumMonth"] = boundedEnumMonth;
  exports["ordDay"] = ordDay;
  exports["boundedDay"] = boundedDay;
  exports["enumDay"] = enumDay;
  exports["boundedEnumDay"] = boundedEnumDay;
})(PS["Data.Date.Component"] = PS["Data.Date.Component"] || {});
(function(exports) {
  // Generated by purs version 0.11.3
  "use strict";
  var $foreign = PS["Data.Date"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Boolean = PS["Data.Boolean"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_Date_Component = PS["Data.Date.Component"];
  var Data_Enum = PS["Data.Enum"];
  var Data_Eq = PS["Data.Eq"];
  var Data_EuclideanRing = PS["Data.EuclideanRing"];
  var Data_Function = PS["Data.Function"];
  var Data_Function_Uncurried = PS["Data.Function.Uncurried"];
  var Data_Generic = PS["Data.Generic"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];
  var Data_Time_Duration = PS["Data.Time.Duration"];
  var Data_Unit = PS["Data.Unit"];
  var Partial_Unsafe = PS["Partial.Unsafe"];
  var Prelude = PS["Prelude"];        
  var $$Date = (function () {
      function $$Date(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      $$Date.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new $$Date(value0, value1, value2);
              };
          };
      };
      return $$Date;
  })();
  var canonicalDate = function (y) {
      return function (m) {
          return function (d) {
              var mkDate = function (y$prime) {
                  return function (m$prime) {
                      return function (d$prime) {
                          return new $$Date(y$prime, Data_Maybe.fromJust()(Data_Enum.toEnum(Data_Date_Component.boundedEnumMonth)(m$prime)), d$prime);
                      };
                  };
              };
              return $foreign.canonicalDateImpl(mkDate, y, Data_Enum.fromEnum(Data_Date_Component.boundedEnumMonth)(m), d);
          };
      };
  };
  exports["canonicalDate"] = canonicalDate;
})(PS["Data.Date"] = PS["Data.Date"] || {});
(function(exports) {
  // Generated by purs version 0.11.3
  "use strict";
  var Control_Apply = PS["Control.Apply"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Boolean = PS["Data.Boolean"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_Enum = PS["Data.Enum"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Generic = PS["Data.Generic"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];
  var ordSecond = Data_Ord.ordInt;
  var ordMinute = Data_Ord.ordInt;
  var ordMillisecond = Data_Ord.ordInt;
  var ordHour = Data_Ord.ordInt;
  var boundedSecond = new Data_Bounded.Bounded(function () {
      return ordSecond;
  }, 0, 59);
  var boundedMinute = new Data_Bounded.Bounded(function () {
      return ordMinute;
  }, 0, 59);
  var boundedMillisecond = new Data_Bounded.Bounded(function () {
      return ordMillisecond;
  }, 0, 999);
  var boundedHour = new Data_Bounded.Bounded(function () {
      return ordHour;
  }, 0, 23);
  var boundedEnumSecond = new Data_Enum.BoundedEnum(function () {
      return boundedSecond;
  }, function () {
      return enumSecond;
  }, 60, function (v) {
      return v;
  }, function (n) {
      if (n >= 0 && n <= 59) {
          return new Data_Maybe.Just(n);
      };
      if (Data_Boolean.otherwise) {
          return Data_Maybe.Nothing.value;
      };
      throw new Error("Failed pattern match at Data.Time.Component line 96, column 3 - line 98, column 26: " + [ n.constructor.name ]);
  });
  var enumSecond = new Data_Enum.Enum(function () {
      return ordSecond;
  }, function ($64) {
      return Data_Enum.toEnum(boundedEnumSecond)((function (v) {
          return v - 1 | 0;
      })(Data_Enum.fromEnum(boundedEnumSecond)($64)));
  }, function ($65) {
      return Data_Enum.toEnum(boundedEnumSecond)((function (v) {
          return v + 1 | 0;
      })(Data_Enum.fromEnum(boundedEnumSecond)($65)));
  });
  var boundedEnumMinute = new Data_Enum.BoundedEnum(function () {
      return boundedMinute;
  }, function () {
      return enumMinute;
  }, 60, function (v) {
      return v;
  }, function (n) {
      if (n >= 0 && n <= 59) {
          return new Data_Maybe.Just(n);
      };
      if (Data_Boolean.otherwise) {
          return Data_Maybe.Nothing.value;
      };
      throw new Error("Failed pattern match at Data.Time.Component line 66, column 3 - line 68, column 26: " + [ n.constructor.name ]);
  });
  var enumMinute = new Data_Enum.Enum(function () {
      return ordMinute;
  }, function ($66) {
      return Data_Enum.toEnum(boundedEnumMinute)((function (v) {
          return v - 1 | 0;
      })(Data_Enum.fromEnum(boundedEnumMinute)($66)));
  }, function ($67) {
      return Data_Enum.toEnum(boundedEnumMinute)((function (v) {
          return v + 1 | 0;
      })(Data_Enum.fromEnum(boundedEnumMinute)($67)));
  });
  var boundedEnumHour = new Data_Enum.BoundedEnum(function () {
      return boundedHour;
  }, function () {
      return enumHour;
  }, 24, function (v) {
      return v;
  }, function (n) {
      if (n >= 0 && n <= 23) {
          return new Data_Maybe.Just(n);
      };
      if (Data_Boolean.otherwise) {
          return Data_Maybe.Nothing.value;
      };
      throw new Error("Failed pattern match at Data.Time.Component line 36, column 3 - line 38, column 26: " + [ n.constructor.name ]);
  });
  var enumHour = new Data_Enum.Enum(function () {
      return ordHour;
  }, function ($70) {
      return Data_Enum.toEnum(boundedEnumHour)((function (v) {
          return v - 1 | 0;
      })(Data_Enum.fromEnum(boundedEnumHour)($70)));
  }, function ($71) {
      return Data_Enum.toEnum(boundedEnumHour)((function (v) {
          return v + 1 | 0;
      })(Data_Enum.fromEnum(boundedEnumHour)($71)));
  });
  exports["ordHour"] = ordHour;
  exports["boundedHour"] = boundedHour;
  exports["enumHour"] = enumHour;
  exports["boundedEnumHour"] = boundedEnumHour;
  exports["ordMinute"] = ordMinute;
  exports["boundedMinute"] = boundedMinute;
  exports["enumMinute"] = enumMinute;
  exports["boundedEnumMinute"] = boundedEnumMinute;
  exports["ordSecond"] = ordSecond;
  exports["boundedSecond"] = boundedSecond;
  exports["enumSecond"] = enumSecond;
  exports["boundedEnumSecond"] = boundedEnumSecond;
  exports["ordMillisecond"] = ordMillisecond;
  exports["boundedMillisecond"] = boundedMillisecond;
})(PS["Data.Time.Component"] = PS["Data.Time.Component"] || {});
(function(exports) {
  // Generated by purs version 0.11.3
  "use strict";
  var Control_Apply = PS["Control.Apply"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_Enum = PS["Data.Enum"];
  var Data_Eq = PS["Data.Eq"];
  var Data_EuclideanRing = PS["Data.EuclideanRing"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Generic = PS["Data.Generic"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Int = PS["Data.Int"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var Data_Time_Component = PS["Data.Time.Component"];
  var Data_Time_Duration = PS["Data.Time.Duration"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unit = PS["Data.Unit"];
  var $$Math = PS["Math"];
  var Partial_Unsafe = PS["Partial.Unsafe"];
  var Prelude = PS["Prelude"];        
  var Time = (function () {
      function Time(value0, value1, value2, value3) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
      };
      Time.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return new Time(value0, value1, value2, value3);
                  };
              };
          };
      };
      return Time;
  })();
  exports["Time"] = Time;
})(PS["Data.Time"] = PS["Data.Time"] || {});
(function(exports) {
  // Generated by purs version 0.11.3
  "use strict";
  var $foreign = PS["Data.DateTime"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_Date = PS["Data.Date"];
  var Data_Date_Component = PS["Data.Date.Component"];
  var Data_Enum = PS["Data.Enum"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Function = PS["Data.Function"];
  var Data_Function_Uncurried = PS["Data.Function.Uncurried"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Generic = PS["Data.Generic"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];
  var Data_Time = PS["Data.Time"];
  var Data_Time_Component = PS["Data.Time.Component"];
  var Data_Time_Duration = PS["Data.Time.Duration"];
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];        
  var DateTime = (function () {
      function DateTime(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      DateTime.create = function (value0) {
          return function (value1) {
              return new DateTime(value0, value1);
          };
      };
      return DateTime;
  })();
  exports["DateTime"] = DateTime;
})(PS["Data.DateTime"] = PS["Data.DateTime"] || {});
(function(exports) {
  // Generated by purs version 0.11.3
  "use strict";
  var Control_Apply = PS["Control.Apply"];
  var Data_Boolean = PS["Data.Boolean"];
  var Data_Char = PS["Data.Char"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Function = PS["Data.Function"];
  var Data_Generic = PS["Data.Generic"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];        
  var Digit = function (x) {
      return x;
  };
  var fromChar = function (c) {
      var code = Data_Char.toCharCode(c);
      var $20 = code >= 48 && code <= 57;
      if ($20) {
          return new Data_Maybe.Just(Digit(code - 48 | 0));
      };
      return Data_Maybe.Nothing.value;
  };
  exports["fromChar"] = fromChar;
})(PS["Data.Digit"] = PS["Data.Digit"] || {});
(function(exports) {
    "use strict";

  exports.toForeign = function (value) {
    return value;
  };

  exports.unsafeFromForeign = function (value) {
    return value;
  };

  exports.tagOf = function (value) {
    return Object.prototype.toString.call(value).slice(8, -1);
  };
})(PS["Data.Foreign"] = PS["Data.Foreign"] || {});
(function(exports) {
  // Generated by purs version 0.11.3
  "use strict";
  var Control_Bind = PS["Control.Bind"];
  var Control_Category = PS["Control.Category"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Boolean = PS["Data.Boolean"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_List = PS["Data.List"];
  var Data_List_Types = PS["Data.List.Types"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_NonEmpty = PS["Data.NonEmpty"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semigroup_Foldable = PS["Data.Semigroup.Foldable"];
  var Data_Semigroup_Traversable = PS["Data.Semigroup.Traversable"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unfoldable = PS["Data.Unfoldable"];
  var Partial_Unsafe = PS["Partial.Unsafe"];
  var Prelude = PS["Prelude"];
  var singleton = function ($160) {
      return Data_List_Types.NonEmptyList(Data_NonEmpty.singleton(Data_List_Types.plusList)($160));
  };
  exports["singleton"] = singleton;
})(PS["Data.List.NonEmpty"] = PS["Data.List.NonEmpty"] || {});
(function(exports) {
  // Generated by purs version 0.11.3
  "use strict";
  var $foreign = PS["Data.Foreign"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Monad_Error_Class = PS["Control.Monad.Error.Class"];
  var Control_Monad_Except = PS["Control.Monad.Except"];
  var Control_Monad_Except_Trans = PS["Control.Monad.Except.Trans"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Boolean = PS["Data.Boolean"];
  var Data_Either = PS["Data.Either"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Function = PS["Data.Function"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Identity = PS["Data.Identity"];
  var Data_Int = PS["Data.Int"];
  var Data_List_NonEmpty = PS["Data.List.NonEmpty"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];
  var Data_String = PS["Data.String"];
  var Prelude = PS["Prelude"];        
  var ForeignError = (function () {
      function ForeignError(value0) {
          this.value0 = value0;
      };
      ForeignError.create = function (value0) {
          return new ForeignError(value0);
      };
      return ForeignError;
  })();
  var TypeMismatch = (function () {
      function TypeMismatch(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      TypeMismatch.create = function (value0) {
          return function (value1) {
              return new TypeMismatch(value0, value1);
          };
      };
      return TypeMismatch;
  })();
  var ErrorAtIndex = (function () {
      function ErrorAtIndex(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      ErrorAtIndex.create = function (value0) {
          return function (value1) {
              return new ErrorAtIndex(value0, value1);
          };
      };
      return ErrorAtIndex;
  })();
  var ErrorAtProperty = (function () {
      function ErrorAtProperty(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      ErrorAtProperty.create = function (value0) {
          return function (value1) {
              return new ErrorAtProperty(value0, value1);
          };
      };
      return ErrorAtProperty;
  })();
  var JSONError = (function () {
      function JSONError(value0) {
          this.value0 = value0;
      };
      JSONError.create = function (value0) {
          return new JSONError(value0);
      };
      return JSONError;
  })();
  var showForeignError = new Data_Show.Show(function (v) {
      if (v instanceof ForeignError) {
          return "(ForeignError " + (Data_Show.show(Data_Show.showString)(v.value0) + ")");
      };
      if (v instanceof ErrorAtIndex) {
          return "(ErrorAtIndex " + (Data_Show.show(Data_Show.showInt)(v.value0) + (" " + (Data_Show.show(showForeignError)(v.value1) + ")")));
      };
      if (v instanceof ErrorAtProperty) {
          return "(ErrorAtProperty " + (Data_Show.show(Data_Show.showString)(v.value0) + (" " + (Data_Show.show(showForeignError)(v.value1) + ")")));
      };
      if (v instanceof JSONError) {
          return "(JSONError " + (Data_Show.show(Data_Show.showString)(v.value0) + ")");
      };
      if (v instanceof TypeMismatch) {
          return "(TypeMismatch " + (Data_Show.show(Data_Show.showString)(v.value0) + (" " + (Data_Show.show(Data_Show.showString)(v.value1) + ")")));
      };
      throw new Error("Failed pattern match at Data.Foreign line 65, column 3 - line 66, column 3: " + [ v.constructor.name ]);
  });
  var fail = function ($121) {
      return Control_Monad_Error_Class.throwError(Control_Monad_Except_Trans.monadThrowExceptT(Data_Identity.monadIdentity))(Data_List_NonEmpty.singleton($121));
  };
  var unsafeReadTagged = function (tag) {
      return function (value) {
          if ($foreign.tagOf(value) === tag) {
              return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.monadIdentity))($foreign.unsafeFromForeign(value));
          };
          if (Data_Boolean.otherwise) {
              return fail(new TypeMismatch(tag, $foreign.tagOf(value)));
          };
          throw new Error("Failed pattern match at Data.Foreign line 105, column 1 - line 107, column 54: " + [ tag.constructor.name, value.constructor.name ]);
      };
  };
  var readString = unsafeReadTagged("String");
  exports["ForeignError"] = ForeignError;
  exports["TypeMismatch"] = TypeMismatch;
  exports["ErrorAtIndex"] = ErrorAtIndex;
  exports["ErrorAtProperty"] = ErrorAtProperty;
  exports["JSONError"] = JSONError;
  exports["fail"] = fail;
  exports["readString"] = readString;
  exports["unsafeReadTagged"] = unsafeReadTagged;
  exports["showForeignError"] = showForeignError;
  exports["toForeign"] = $foreign.toForeign;
})(PS["Data.Foreign"] = PS["Data.Foreign"] || {});
(function(exports) {
  // Generated by purs version 0.11.3
  "use strict";
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Category = PS["Control.Category"];
  var Control_Plus = PS["Control.Plus"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Functor_App = PS["Data.Functor.App"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];
  var Data_Traversable = PS["Data.Traversable"];
  var Prelude = PS["Prelude"];        
  var Compose = function (x) {
      return x;
  };
  exports["Compose"] = Compose;
})(PS["Data.Functor.Compose"] = PS["Data.Functor.Compose"] || {});
(function(exports) {
  // Generated by purs version 0.11.3
  "use strict";
  var Control_Apply = PS["Control.Apply"];
  var Data_Either = PS["Data.Either"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Generic = PS["Data.Generic"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];
  var Data_String = PS["Data.String"];
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];        
  var OPTIONS = (function () {
      function OPTIONS() {

      };
      OPTIONS.value = new OPTIONS();
      return OPTIONS;
  })();
  var GET = (function () {
      function GET() {

      };
      GET.value = new GET();
      return GET;
  })();
  var HEAD = (function () {
      function HEAD() {

      };
      HEAD.value = new HEAD();
      return HEAD;
  })();
  var POST = (function () {
      function POST() {

      };
      POST.value = new POST();
      return POST;
  })();
  var PUT = (function () {
      function PUT() {

      };
      PUT.value = new PUT();
      return PUT;
  })();
  var DELETE = (function () {
      function DELETE() {

      };
      DELETE.value = new DELETE();
      return DELETE;
  })();
  var TRACE = (function () {
      function TRACE() {

      };
      TRACE.value = new TRACE();
      return TRACE;
  })();
  var CONNECT = (function () {
      function CONNECT() {

      };
      CONNECT.value = new CONNECT();
      return CONNECT;
  })();
  var PROPFIND = (function () {
      function PROPFIND() {

      };
      PROPFIND.value = new PROPFIND();
      return PROPFIND;
  })();
  var PROPPATCH = (function () {
      function PROPPATCH() {

      };
      PROPPATCH.value = new PROPPATCH();
      return PROPPATCH;
  })();
  var MKCOL = (function () {
      function MKCOL() {

      };
      MKCOL.value = new MKCOL();
      return MKCOL;
  })();
  var COPY = (function () {
      function COPY() {

      };
      COPY.value = new COPY();
      return COPY;
  })();
  var MOVE = (function () {
      function MOVE() {

      };
      MOVE.value = new MOVE();
      return MOVE;
  })();
  var LOCK = (function () {
      function LOCK() {

      };
      LOCK.value = new LOCK();
      return LOCK;
  })();
  var UNLOCK = (function () {
      function UNLOCK() {

      };
      UNLOCK.value = new UNLOCK();
      return UNLOCK;
  })();
  var PATCH = (function () {
      function PATCH() {

      };
      PATCH.value = new PATCH();
      return PATCH;
  })();
  var unCustomMethod = function (v) {
      return v;
  };
  var showMethod = new Data_Show.Show(function (v) {
      if (v instanceof OPTIONS) {
          return "OPTIONS";
      };
      if (v instanceof GET) {
          return "GET";
      };
      if (v instanceof HEAD) {
          return "HEAD";
      };
      if (v instanceof POST) {
          return "POST";
      };
      if (v instanceof PUT) {
          return "PUT";
      };
      if (v instanceof DELETE) {
          return "DELETE";
      };
      if (v instanceof TRACE) {
          return "TRACE";
      };
      if (v instanceof CONNECT) {
          return "CONNECT";
      };
      if (v instanceof PROPFIND) {
          return "PROPFIND";
      };
      if (v instanceof PROPPATCH) {
          return "PROPPATCH";
      };
      if (v instanceof MKCOL) {
          return "MKCOL";
      };
      if (v instanceof COPY) {
          return "COPY";
      };
      if (v instanceof MOVE) {
          return "MOVE";
      };
      if (v instanceof LOCK) {
          return "LOCK";
      };
      if (v instanceof UNLOCK) {
          return "UNLOCK";
      };
      if (v instanceof PATCH) {
          return "PATCH";
      };
      throw new Error("Failed pattern match at Data.HTTP.Method line 43, column 3 - line 44, column 3: " + [ v.constructor.name ]);
  });
  var print = Data_Either.either(Data_Show.show(showMethod))(unCustomMethod);
  exports["OPTIONS"] = OPTIONS;
  exports["GET"] = GET;
  exports["HEAD"] = HEAD;
  exports["POST"] = POST;
  exports["PUT"] = PUT;
  exports["DELETE"] = DELETE;
  exports["TRACE"] = TRACE;
  exports["CONNECT"] = CONNECT;
  exports["PROPFIND"] = PROPFIND;
  exports["PROPPATCH"] = PROPPATCH;
  exports["MKCOL"] = MKCOL;
  exports["COPY"] = COPY;
  exports["MOVE"] = MOVE;
  exports["LOCK"] = LOCK;
  exports["UNLOCK"] = UNLOCK;
  exports["PATCH"] = PATCH;
  exports["print"] = print;
  exports["unCustomMethod"] = unCustomMethod;
  exports["showMethod"] = showMethod;
})(PS["Data.HTTP.Method"] = PS["Data.HTTP.Method"] || {});
(function(exports) {
  // Generated by purs version 0.11.3
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad_Eff_Exception_Unsafe = PS["Control.Monad.Eff.Exception.Unsafe"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Boolean = PS["Data.Boolean"];
  var Data_Digit = PS["Data.Digit"];
  var Data_Eq = PS["Data.Eq"];
  var Data_EuclideanRing = PS["Data.EuclideanRing"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Generic = PS["Data.Generic"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Int = PS["Data.Int"];
  var Data_List = PS["Data.List"];
  var Data_List_Types = PS["Data.List.Types"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var Data_String = PS["Data.String"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unfoldable = PS["Data.Unfoldable"];
  var Data_Unit = PS["Data.Unit"];
  var Global = PS["Global"];
  var Partial_Unsafe = PS["Partial.Unsafe"];
  var Prelude = PS["Prelude"];
  var Test_QuickCheck_Arbitrary = PS["Test.QuickCheck.Arbitrary"];
  var Test_QuickCheck_Gen = PS["Test.QuickCheck.Gen"];        
  var Plus = (function () {
      function Plus() {

      };
      Plus.value = new Plus();
      return Plus;
  })();
  var Minus = (function () {
      function Minus() {

      };
      Minus.value = new Minus();
      return Minus;
  })();
  var fromString = function (s) {
      var charlist = Data_List.fromFoldable(Data_Foldable.foldableArray)(Data_String.toCharArray(s));
      return Control_Bind.bind(Data_Maybe.bindMaybe)(Data_List.head(charlist))(function (v) {
          var signDigits = (function () {
              if (v === "-") {
                  return {
                      sign: Minus.value, 
                      digits: Data_List.drop(1)(charlist)
                  };
              };
              return {
                  sign: Plus.value, 
                  digits: charlist
              };
          })();
          return Control_Bind.bind(Data_Maybe.bindMaybe)(Data_List.elemIndex(Data_Eq.eqChar)(".")(signDigits.digits))(function (v1) {
              return Control_Bind.bind(Data_Maybe.bindMaybe)(Data_List.deleteAt(v1)(signDigits.digits))(function (v2) {
                  return Control_Bind.bind(Data_Maybe.bindMaybe)(Data_Traversable.sequence(Data_List_Types.traversableList)(Data_Maybe.applicativeMaybe)(Data_Functor.map(Data_List_Types.functorList)(Data_Digit.fromChar)(v2)))(function (v3) {
                      return Control_Applicative.pure(Data_Maybe.applicativeMaybe)({
                          sign: signDigits.sign, 
                          decimal: v1, 
                          digits: v3
                      });
                  });
              });
          });
      });
  };
  exports["fromString"] = fromString;
})(PS["Data.HugeNum"] = PS["Data.HugeNum"] || {});
(function(exports) {
  // Generated by purs version 0.11.3
  "use strict";
  var Control_Apply = PS["Control.Apply"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Generic = PS["Data.Generic"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];        
  var MediaType = function (x) {
      return x;
  }; 
  var newtypeMediaType = new Data_Newtype.Newtype(function (n) {
      return n;
  }, MediaType);
  exports["MediaType"] = MediaType;
  exports["newtypeMediaType"] = newtypeMediaType;
})(PS["Data.MediaType"] = PS["Data.MediaType"] || {});
(function(exports) {
  // Generated by purs version 0.11.3
  "use strict";
  var Data_MediaType = PS["Data.MediaType"];           
  var applicationJSON = "application/json";
  exports["applicationJSON"] = applicationJSON;
})(PS["Data.MediaType.Common"] = PS["Data.MediaType.Common"] || {});
(function(exports) {
    "use strict";

  exports["null"] = null;

  exports.notNull = function (x) {
    return x;
  };
})(PS["Data.Nullable"] = PS["Data.Nullable"] || {});
(function(exports) {
  // Generated by purs version 0.11.3
  "use strict";
  var $foreign = PS["Data.Nullable"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Function = PS["Data.Function"];
  var Data_Function_Uncurried = PS["Data.Function.Uncurried"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Show = PS["Data.Show"];
  var Prelude = PS["Prelude"];        
  var toNullable = Data_Maybe.maybe($foreign["null"])($foreign.notNull);
  exports["toNullable"] = toNullable;
})(PS["Data.Nullable"] = PS["Data.Nullable"] || {});
(function(exports) {
  // module Flare
  // jshint browser: true
  // jshint node: true

  "use strict";

  exports.renderString = function(target) {
    return function(content) {
      return function() {
        document.getElementById(target).innerHTML = content;
      };
    };
  };

  exports.removeChildren = function(target) {
    return function() {
      var el = document.getElementById(target);

      // http://stackoverflow.com/a/3955238/704831
      while (el.firstChild) {
        el.removeChild(el.firstChild);
      }
    };
  };

  exports.appendComponent = function(target) {
    return function(el) {
      return function() {
        document.getElementById(target).appendChild(el);
      };
    };
  };

  // This function maintains a global state `window.flareID` to generate unique
  // DOM element IDs. It is only called from functions with a DOM effect.
  function getUniqueID() {
    if (window.flareID === undefined) {
      window.flareID = 0;
    }
    window.flareID = window.flareID + 1;
    return "flare-component-" + window.flareID.toString();
  }

  function createComponent(inputType, elementCallback, eventType, eventListener) {
    return function(label) {
      return function(initial) {
        return function(send) {
          return function() {
            var uid = getUniqueID();
            var el = elementCallback(initial);
            el.className = "flare-input-" + inputType;
            el.id = uid;

            var div = document.createElement("div");
            div.className = "flare-input";

            if (label !== "") {
              var labelEl = document.createElement("label");
              labelEl.htmlFor = uid;
              labelEl.appendChild(document.createTextNode(label));
              div.appendChild(labelEl);
            }

            div.appendChild(el);

            el.addEventListener(eventType, function(e) {
              var value = eventListener(e.target, initial);
              send(value)();
            });

            return div;
          };
        };
      };
    };
  }

  exports.cNumber = createComponent("number",
    function(initial) {
      var input = document.createElement("input");
      input.type = "number";
      input.step = "any";
      input.value = initial.toString();
      return input;
    },
    "input",
    function(t, initial) {
      var val = parseFloat(t.value);
      return (isNaN(val) ? initial : val);
    }
  );

  function clamp(min, max, initial, value) {
    if (isNaN(value)) {
      return initial;
    } else if (value < min) {
      return min;
    } else if (value > max) {
      return max;
    }
    return value;
  }

  exports.cNumberRange = function(type) {
    return function(min) {
      return function(max) {
        return function(step) {
          return createComponent("number-" + type,
            function(initial) {
              var input = document.createElement("input");
              input.type = type;
              input.min = min.toString();
              input.max = max.toString();
              input.step = step.toString();
              input.value = initial.toString();
              return input;
            },
            "input",
            function(t, initial) {
              return clamp(min, max, initial, parseFloat(t.value));
            }
          );
        };
      };
    };
  };

  exports.cIntRange = function(type) {
    return function(min) {
      return function(max) {
        return createComponent("int-" + type,
          function(initial) {
            var input = document.createElement("input");
            input.type = type;
            input.min = min.toString();
            input.max = max.toString();
            input.step = "1";
            input.value = initial.toString();
            return input;
          },
          "input",
          function(t, initial) {
            return clamp(min, max, initial, parseInt(t.value, 10));
          }
        );
      };
    };
  };

  exports.cSelect = function(xs) {
    return function(toString) {
      return createComponent("select",
        function(initial) {
          var select = document.createElement("select");

          var x, op;
          for (var i = 0; i < xs.length + 1; i++) {
            x = (i === 0) ? initial : xs[i - 1];
            op = document.createElement("option");
            op.appendChild(document.createTextNode(toString(x)));
            select.appendChild(op);
          }

          return select;
        },
        "change",
        function(t, initial) {
          var ix = t.selectedIndex;
          if (ix === 0) {
            return initial;
          }
          return xs[ix - 1];
        }
      );
    };
  };


  exports.toFieldset = function(label) {
    return function(elements) {
      var fieldset = document.createElement("fieldset");

      if (label !== "") {
        var legend = document.createElement("legend");
        legend.appendChild(document.createTextNode(label));
        fieldset.appendChild(legend);
      }

      for (var i = 0; i < elements.length; i++) {
        fieldset.appendChild(elements[i]);
      }

      return fieldset;
    };
  };

  exports.cColor = createComponent("color",
    function(initial) {
      var input = document.createElement("input");
      input.type = "color";
      input.value = initial;
      return input;
    },
    "input",
    function(t, initial) {
      return t.value;
    }
  );

  function padNumber(num) {
    var str = num.toString();
    if (str.length == 1) {
      str = "0" + str;
    }
    return str;
  }
})(PS["Flare"] = PS["Flare"] || {});
(function(exports) {// module Signal

  function make(initial) {
    var subs = [];
    var val = initial;
    var sig = {
      subscribe: function(sub) {
        subs.push(sub);
        sub(val);
      },
      get: function() { return val; },
      set: function(newval) {
        val = newval;
        subs.forEach(function(sub) { sub(newval); });
      }
    };
    return sig;
  };

  exports.constant = make;

  exports.mapSig = function(fun) {
    return function(sig) {
      var out = make(fun(sig.get()));
      sig.subscribe(function(val) { out.set(fun(val)); });
      return out;
    };
  };


  exports.applySig = function(fun) {
    return function(sig) {
      var out = make(fun.get()(sig.get()));
      var produce = function() { out.set(fun.get()(sig.get())); };
      fun.subscribe(produce);
      sig.subscribe(produce);
      return out;
    };
  };

  exports.runSignal =
    function runSignal(sig) {
      return function() {
        sig.subscribe(function(val) {
          val();
        });
        return {};
      };
    };
})(PS["Signal"] = PS["Signal"] || {});
(function(exports) {
  // Generated by purs version 0.11.3
  "use strict";
  var $foreign = PS["Signal"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Prelude = PS["Prelude"];
  var functorSignal = new Data_Functor.Functor($foreign.mapSig);
  var applySignal = new Control_Apply.Apply(function () {
      return functorSignal;
  }, $foreign.applySig);
  var applicativeSignal = new Control_Applicative.Applicative(function () {
      return applySignal;
  }, $foreign.constant);
  exports["functorSignal"] = functorSignal;
  exports["applySignal"] = applySignal;
  exports["applicativeSignal"] = applicativeSignal;
  exports["constant"] = $foreign.constant;
  exports["runSignal"] = $foreign.runSignal;
})(PS["Signal"] = PS["Signal"] || {});
(function(exports) {// module Signal.Channel

  exports.channelP =
    function channelP(constant) {
      return function(v) {
        return function() {
          return constant(v);
        };
      };
    };

  exports.sendP =
    function sendP(chan) {
      return function(v) {
        return function() {
          chan.set(v);
        };
      };
    };

  exports.subscribe =
    function subscribe(chan) {
      return chan;
    };
})(PS["Signal.Channel"] = PS["Signal.Channel"] || {});
(function(exports) {
  // Generated by purs version 0.11.3
  "use strict";
  var $foreign = PS["Signal.Channel"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Prelude = PS["Prelude"];
  var Signal = PS["Signal"];        
  var send = $foreign.sendP;
  var channel = $foreign.channelP(Signal.constant);
  exports["channel"] = channel;
  exports["send"] = send;
  exports["subscribe"] = $foreign.subscribe;
})(PS["Signal.Channel"] = PS["Signal.Channel"] || {});
(function(exports) {
  // Generated by purs version 0.11.3
  "use strict";
  var $foreign = PS["Flare"];
  var Color = PS["Color"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var DOM = PS["DOM"];
  var DOM_Node_Types = PS["DOM.Node.Types"];
  var Data_Array = PS["Data.Array"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_Date = PS["Data.Date"];
  var Data_Date_Component = PS["Data.Date.Component"];
  var Data_Enum = PS["Data.Enum"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_List = PS["Data.List"];
  var Data_List_Types = PS["Data.List.Types"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Maybe_First = PS["Data.Maybe.First"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_NonEmpty = PS["Data.NonEmpty"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];
  var Data_Time = PS["Data.Time"];
  var Data_Time_Component = PS["Data.Time.Component"];
  var Data_Traversable = PS["Data.Traversable"];
  var Prelude = PS["Prelude"];
  var Signal = PS["Signal"];
  var Signal_Channel = PS["Signal.Channel"];        
  var Flare = (function () {
      function Flare(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Flare.create = function (value0) {
          return function (value1) {
              return new Flare(value0, value1);
          };
      };
      return Flare;
  })();
  var UI = function (x) {
      return x;
  };
  var setupFlare = function (v) {
      return function __do() {
          var v1 = v();
          return {
              components: v1.value0, 
              signal: v1.value1
          };
      };
  };
  var functorFlare = new Data_Functor.Functor(function (f) {
      return function (v) {
          return new Flare(v.value0, Data_Functor.map(Signal.functorSignal)(f)(v.value1));
      };
  });
  var functorUI = new Data_Functor.Functor(function (f) {
      return function (v) {
          return UI(Data_Functor.map(Control_Monad_Eff.functorEff)(Data_Functor.map(functorFlare)(f))(v));
      };
  });
  var flareWith = function (controls) {
      return function (handler) {
          return function (v) {
              return function __do() {
                  var v1 = v();
                  $foreign.removeChildren(controls)();
                  Data_Foldable.traverse_(Control_Monad_Eff.applicativeEff)(Data_Foldable.foldableArray)($foreign.appendComponent(controls))(v1.value0)();
                  return handler(v1.value1)();
              };
          };
      };
  };
  var runFlareWith = function (controls) {
      return function (handler) {
          return function (ui) {
              return flareWith(controls)(function ($107) {
                  return Signal.runSignal(Data_Functor.map(Signal.functorSignal)(handler)($107));
              })(ui);
          };
      };
  };
  var runFlare = function (controls) {
      return function (target) {
          return runFlareWith(controls)($foreign.renderString(target));
      };
  };
  var fieldset = function (label) {
      return function (v) {
          return UI(function __do() {
              var v1 = v();
              return new Flare([ $foreign.toFieldset(label)(v1.value0) ], v1.value1);
          });
      };
  };
  var createUI = function (createComp) {
      return function (label) {
          return function ($$default) {
              return UI(function __do() {
                  var v = Signal_Channel.channel($$default)();
                  var v1 = createComp(label)($$default)(Signal_Channel.send(v))();
                  var signal = Signal_Channel.subscribe(v);
                  return new Flare([ v1 ], signal);
              });
          };
      };
  };                           
  var intSlider = function (label) {
      return function (min) {
          return function (max) {
              return function ($$default) {
                  return createUI($foreign.cIntRange("range")(min)(max))(label)($$default);
              };
          };
      };
  };                             
  var number = createUI($foreign.cNumber);
  var numberSlider = function (label) {
      return function (min) {
          return function (max) {
              return function (step) {
                  return function ($$default) {
                      return createUI($foreign.cNumberRange("range")(min)(max)(step))(label)($$default);
                  };
              };
          };
      };
  };
  var select = function (dictFoldable) {
      return function (label) {
          return function (v) {
              return function (toString) {
                  return createUI($foreign.cSelect(Data_Array.fromFoldable(dictFoldable)(v.value1))(toString))(label)(v.value0);
              };
          };
      };
  };                   
  var color = function (label) {
      return function ($$default) {
          return Data_Functor.map(functorUI)(function ($110) {
              return Data_Maybe.fromMaybe($$default)(Color.fromHexString($110));
          })(createUI($foreign.cColor)(label)(Color.toHexString($$default)));
      };
  };
  var applyFlare = new Control_Apply.Apply(function () {
      return functorFlare;
  }, function (v) {
      return function (v1) {
          return new Flare(Data_Semigroup.append(Data_Semigroup.semigroupArray)(v.value0)(v1.value0), Control_Apply.apply(Signal.applySignal)(v.value1)(v1.value1));
      };
  });
  var applyUI = new Control_Apply.Apply(function () {
      return functorUI;
  }, function (v) {
      return function (v1) {
          return UI(Control_Apply.lift2(Control_Monad_Eff.applyEff)(Control_Apply.apply(applyFlare))(v)(v1));
      };
  });
  var applicativeFlare = new Control_Applicative.Applicative(function () {
      return applyFlare;
  }, function (x) {
      return new Flare([  ], Control_Applicative.pure(Signal.applicativeSignal)(x));
  });
  var applicativeUI = new Control_Applicative.Applicative(function () {
      return applyUI;
  }, function (x) {
      return UI(Control_Applicative.pure(Control_Monad_Eff.applicativeEff)(Control_Applicative.pure(applicativeFlare)(x)));
  });
  exports["color"] = color;
  exports["fieldset"] = fieldset;
  exports["flareWith"] = flareWith;
  exports["intSlider"] = intSlider;
  exports["number"] = number;
  exports["numberSlider"] = numberSlider;
  exports["runFlare"] = runFlare;
  exports["runFlareWith"] = runFlareWith;
  exports["select"] = select;
  exports["setupFlare"] = setupFlare;
  exports["functorFlare"] = functorFlare;
  exports["applyFlare"] = applyFlare;
  exports["applicativeFlare"] = applicativeFlare;
  exports["functorUI"] = functorUI;
  exports["applyUI"] = applyUI;
  exports["applicativeUI"] = applicativeUI;
})(PS["Flare"] = PS["Flare"] || {});
(function(exports) {
  // Generated by purs version 0.11.3
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad = PS["Control.Monad"];
  var Data_CatList = PS["Data.CatList"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];
  var Attr = (function () {
      function Attr(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Attr.create = function (value0) {
          return function (value1) {
              return new Attr(value0, value1);
          };
      };
      return Attr;
  })();
  var Attribute = (function () {
      function Attribute(value0) {
          this.value0 = value0;
      };
      Attribute.create = function (value0) {
          return new Attribute(value0);
      };
      return Attribute;
  })();
  var Element = (function () {
      function Element(value0, value1, value2, value3, value4) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
          this.value4 = value4;
      };
      Element.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return function (value4) {
                          return new Element(value0, value1, value2, value3, value4);
                      };
                  };
              };
          };
      };
      return Element;
  })();
  var Content = (function () {
      function Content(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Content.create = function (value0) {
          return function (value1) {
              return new Content(value0, value1);
          };
      };
      return Content;
  })();
  var Return = (function () {
      function Return(value0) {
          this.value0 = value0;
      };
      Return.create = function (value0) {
          return new Return(value0);
      };
      return Return;
  })();
  var Attributable = function ($$with) {
      this["with"] = $$with;
  };
  var $$with = function (dict) {
      return dict["with"];
  };
  var text = function (s) {
      return new Content(s, new Return(Data_Unit.unit));
  }; 
  var parent = function (el) {
      return function (kids) {
          return new Element(el, new Data_Maybe.Just(kids), Data_Monoid.mempty(Data_CatList.monoidCatList), Data_Monoid.mempty(Data_CatList.monoidCatList), new Return(Data_Unit.unit));
      };
  };
  var functorMarkupM = new Data_Functor.Functor(function (f) {
      return function (v) {
          if (v instanceof Element) {
              return new Element(v.value0, v.value1, v.value2, v.value3, Data_Functor.map(functorMarkupM)(f)(v.value4));
          };
          if (v instanceof Content) {
              return new Content(v.value0, Data_Functor.map(functorMarkupM)(f)(v.value1));
          };
          if (v instanceof Return) {
              return new Return(f(v.value0));
          };
          throw new Error("Failed pattern match at Text.Smolder.Markup line 55, column 3 - line 55, column 88: " + [ f.constructor.name, v.constructor.name ]);
      };
  });
  var attribute = function (key) {
      return function (value) {
          return new Attribute(Control_Applicative.pure(Data_CatList.applicativeCatList)(new Attr(key, value)));
      };
  };
  var attributableMarkupM = new Attributable(function (v) {
      return function (v1) {
          if (v instanceof Element) {
              return new Element(v.value0, v.value1, Data_Semigroup.append(Data_CatList.semigroupCatList)(v.value2)(v1.value0), v.value3, v.value4);
          };
          return v;
      };
  });
  var attributableMarkupMF = new Attributable(function (k) {
      return function (xs) {
          return function (m) {
              return $$with(attributableMarkupM)(k(m))(xs);
          };
      };
  });
  var monadMarkupM = new Control_Monad.Monad(function () {
      return applicativeMarkupM;
  }, function () {
      return bindMarkupM;
  });
  var bindMarkupM = new Control_Bind.Bind(function () {
      return applyMarkupM;
  }, function (v) {
      return function (f) {
          if (v instanceof Element) {
              return new Element(v.value0, v.value1, v.value2, v.value3, Control_Bind.bind(bindMarkupM)(v.value4)(f));
          };
          if (v instanceof Content) {
              return new Content(v.value0, Control_Bind.bind(bindMarkupM)(v.value1)(f));
          };
          if (v instanceof Return) {
              return f(v.value0);
          };
          throw new Error("Failed pattern match at Text.Smolder.Markup line 66, column 3 - line 66, column 90: " + [ v.constructor.name, f.constructor.name ]);
      };
  });
  var applyMarkupM = new Control_Apply.Apply(function () {
      return functorMarkupM;
  }, Control_Monad.ap(monadMarkupM));
  var applicativeMarkupM = new Control_Applicative.Applicative(function () {
      return applyMarkupM;
  }, Return.create);
  var semigroupMarkupM = new Data_Semigroup.Semigroup(function (x) {
      return function (y) {
          return Control_Apply.applySecond(applyMarkupM)(x)(y);
      };
  });
  var monoidMarkup = new Data_Monoid.Monoid(function () {
      return semigroupMarkupM;
  }, new Return(Data_Unit.unit));
  exports["Attr"] = Attr;
  exports["Element"] = Element;
  exports["Content"] = Content;
  exports["Return"] = Return;
  exports["Attributable"] = Attributable;
  exports["attribute"] = attribute;
  exports["parent"] = parent;
  exports["text"] = text;
  exports["with"] = $$with;
  exports["semigroupMarkupM"] = semigroupMarkupM;
  exports["monoidMarkup"] = monoidMarkup;
  exports["functorMarkupM"] = functorMarkupM;
  exports["applyMarkupM"] = applyMarkupM;
  exports["applicativeMarkupM"] = applicativeMarkupM;
  exports["bindMarkupM"] = bindMarkupM;
  exports["monadMarkupM"] = monadMarkupM;
  exports["attributableMarkupM"] = attributableMarkupM;
  exports["attributableMarkupMF"] = attributableMarkupMF;
})(PS["Text.Smolder.Markup"] = PS["Text.Smolder.Markup"] || {});
(function(exports) {
  // Generated by purs version 0.11.3
  "use strict";
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_CatList = PS["Data.CatList"];
  var Data_Functor = PS["Data.Functor"];
  var Data_List = PS["Data.List"];
  var Data_List_Types = PS["Data.List.Types"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_StrMap = PS["Data.StrMap"];
  var Data_Tuple = PS["Data.Tuple"];
  var Prelude = PS["Prelude"];
  var Text_Smolder_Markup = PS["Text.Smolder.Markup"];        
  var Element = (function () {
      function Element(value0, value1, value2, value3) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
      };
      Element.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return new Element(value0, value1, value2, value3);
                  };
              };
          };
      };
      return Element;
  })();
  var Text = (function () {
      function Text(value0) {
          this.value0 = value0;
      };
      Text.create = function (value0) {
          return new Text(value0);
      };
      return Text;
  })();
  var renderAttrs = (function () {
      var toTuple = function (v) {
          return new Data_Tuple.Tuple(v.value0, v.value1);
      };
      return function ($20) {
          return Data_StrMap.fromFoldable(Data_CatList.foldableCatList)(Data_Functor.map(Data_CatList.functorCatList)(toTuple)($20));
      };
  })();
  var renderMarkup = function (v) {
      if (v instanceof Text_Smolder_Markup.Element && v.value1 instanceof Data_Maybe.Just) {
          return new Data_List_Types.Cons(new Element(v.value0, renderAttrs(v.value2), v.value3, renderMarkup(v.value1.value0)), renderMarkup(v.value4));
      };
      if (v instanceof Text_Smolder_Markup.Element && v.value1 instanceof Data_Maybe.Nothing) {
          return new Data_List_Types.Cons(new Element(v.value0, renderAttrs(v.value2), v.value3, Data_List_Types.Nil.value), renderMarkup(v.value4));
      };
      if (v instanceof Text_Smolder_Markup.Content) {
          return new Data_List_Types.Cons(new Text(v.value0), renderMarkup(v.value1));
      };
      if (v instanceof Text_Smolder_Markup.Return) {
          return Data_List_Types.Nil.value;
      };
      throw new Error("Failed pattern match at Text.Smolder.Renderer.Util line 20, column 1 - line 21, column 86: " + [ v.constructor.name ]);
  };
  exports["Element"] = Element;
  exports["Text"] = Text;
  exports["renderMarkup"] = renderMarkup;
})(PS["Text.Smolder.Renderer.Util"] = PS["Text.Smolder.Renderer.Util"] || {});
(function(exports) {
  // Generated by purs version 0.11.3
  "use strict";
  var Control_Category = PS["Control.Category"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_List = PS["Data.List"];
  var Data_List_Types = PS["Data.List.Types"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_StrMap = PS["Data.StrMap"];
  var Data_String = PS["Data.String"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Tuple_Nested = PS["Data.Tuple.Nested"];
  var Prelude = PS["Prelude"];
  var Text_Smolder_Markup = PS["Text.Smolder.Markup"];
  var Text_Smolder_Renderer_Util = PS["Text.Smolder.Renderer.Util"];        
  var escapeMap = Data_StrMap.fromFoldable(Data_Foldable.foldableArray)([ new Data_Tuple.Tuple("&", "&amp;"), new Data_Tuple.Tuple("<", "&lt;"), new Data_Tuple.Tuple(">", "&gt;"), new Data_Tuple.Tuple("\"", "&quot;"), new Data_Tuple.Tuple("'", "&#39;"), new Data_Tuple.Tuple("/", "&#x2F;") ]);
  var escapeChar = function (s) {
      return Data_Maybe.maybe(s)(Control_Category.id(Control_Category.categoryFn))(Data_StrMap.lookup(s)(escapeMap));
  };
  var $$escape = function (s) {
      return Data_String.joinWith("")(Data_Functor.map(Data_Functor.functorArray)(escapeChar)(Data_String.split("")(s)));
  };
  var renderNode = function (v) {
      if (v instanceof Text_Smolder_Renderer_Util.Element) {
          var showTail = function (v1) {
              if (v1 instanceof Data_List_Types.Nil) {
                  return "/>";
              };
              return ">" + (Data_Foldable.fold(Data_List_Types.foldableList)(Data_Monoid.monoidString)(Data_Functor.map(Data_List_Types.functorList)(renderNode)(v1)) + ("</" + (v.value0 + ">")));
          };
          var showAttrs = function (a$prime) {
              var pair = function (k) {
                  return " " + (k + Data_Foldable.foldMap(Data_Foldable.foldableMaybe)(Data_Monoid.monoidString)(function (v1) {
                      return "=\"" + ($$escape(v1) + "\"");
                  })(Data_StrMap.lookup(k)(a$prime)));
              };
              return Data_Foldable.fold(Data_Foldable.foldableArray)(Data_Monoid.monoidString)(Data_Functor.map(Data_Functor.functorArray)(pair)(Data_StrMap.keys(a$prime)));
          };
          return "<" + (v.value0 + (showAttrs(v.value1) + showTail(v.value3)));
      };
      if (v instanceof Text_Smolder_Renderer_Util.Text) {
          return $$escape(v.value0);
      };
      throw new Error("Failed pattern match at Text.Smolder.Renderer.String line 36, column 1 - line 44, column 81: " + [ v.constructor.name ]);
  };
  var render = function ($9) {
      return Data_Foldable.fold(Data_List_Types.foldableList)(Data_Monoid.monoidString)(Data_Functor.map(Data_List_Types.functorList)(renderNode)(Text_Smolder_Renderer_Util.renderMarkup($9)));
  };
  exports["render"] = render;
  exports["renderNode"] = renderNode;
})(PS["Text.Smolder.Renderer.String"] = PS["Text.Smolder.Renderer.String"] || {});
(function(exports) {
  // Generated by purs version 0.11.3
  "use strict";
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var DOM = PS["DOM"];
  var Data_Functor = PS["Data.Functor"];
  var Flare = PS["Flare"];
  var Prelude = PS["Prelude"];
  var Signal_Channel = PS["Signal.Channel"];
  var Text_Smolder_Markup = PS["Text.Smolder.Markup"];
  var Text_Smolder_Renderer_String = PS["Text.Smolder.Renderer.String"];        
  var runFlareHTML = function (controls) {
      return function (target) {
          return function ($0) {
              return Flare.runFlare(controls)(target)(Data_Functor.map(Flare.functorUI)(Text_Smolder_Renderer_String.render)($0));
          };
      };
  };
  exports["runFlareHTML"] = runFlareHTML;
})(PS["Flare.Smolder"] = PS["Flare.Smolder"] || {});
(function(exports) {
  // module Test.FlareCheck
  // jshint browser: true
  // jshint node: true

  "use strict";

  exports.appendTest = function(parentId) {
    return function(title) {
      return function(doc) {
        return function(elements) {
          return function() {
            var parent = document.getElementById(parentId);
            var fieldset = document.createElement("fieldset");
            fieldset.className = "flarecheck-test";
            var legend = document.createElement("legend");
            legend.textContent = title;
            fieldset.appendChild(legend);

            if (doc !== "") {
              var docEl = document.createElement("p");
              docEl.innerHTML = doc;
              fieldset.appendChild(docEl);
            }

            for (var i = 0; i < elements.length; i++) {
              fieldset.appendChild(elements[i]);
            }

            var output = document.createElement("div");
            output.className = "flarecheck-output";
            fieldset.appendChild(output);

            parent.appendChild(fieldset);

            return output;
          };
        };
      };
    };
  };

  exports.setText = function(output) {
    return function(str) {
      return function() {
        var pre = output.firstChild;
        if (!pre) {
          pre = document.createElement("pre");
          pre.className = "flarecheck-output-settext";
          output.appendChild(pre);
        }
        pre.textContent = str;
      };
    };
  };

  exports.setHTML = function(output) {
    return function(code) {
      return function() {
        output.innerHTML = code;
      };
    };
  };
})(PS["Test.FlareCheck"] = PS["Test.FlareCheck"] || {});
(function(exports) {
  // Generated by purs version 0.11.3
  "use strict";
  var Text_Smolder_Markup = PS["Text.Smolder.Markup"];
  var tr = Text_Smolder_Markup.parent("tr");            
  var td = Text_Smolder_Markup.parent("td");      
  var table = Text_Smolder_Markup.parent("table");  
  var span = Text_Smolder_Markup.parent("span");        
  var pre = Text_Smolder_Markup.parent("pre");  
  var p = Text_Smolder_Markup.parent("p");  
  var div = Text_Smolder_Markup.parent("div");
  var code = Text_Smolder_Markup.parent("code");
  var b = Text_Smolder_Markup.parent("b");
  exports["b"] = b;
  exports["code"] = code;
  exports["div"] = div;
  exports["p"] = p;
  exports["pre"] = pre;
  exports["span"] = span;
  exports["table"] = table;
  exports["td"] = td;
  exports["tr"] = tr;
})(PS["Text.Smolder.HTML"] = PS["Text.Smolder.HTML"] || {});
(function(exports) {
  // Generated by purs version 0.11.3
  "use strict";
  var Text_Smolder_Markup = PS["Text.Smolder.Markup"];   
  var title = Text_Smolder_Markup.attribute("title");    
  var style = Text_Smolder_Markup.attribute("style");
  var className = Text_Smolder_Markup.attribute("class");
  exports["className"] = className;
  exports["style"] = style;
  exports["title"] = title;
})(PS["Text.Smolder.HTML.Attributes"] = PS["Text.Smolder.HTML.Attributes"] || {});
(function(exports) {
  // Generated by purs version 0.11.3
  "use strict";
  var $foreign = PS["Test.FlareCheck"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Category = PS["Control.Category"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var DOM = PS["DOM"];
  var DOM_Node_Types = PS["DOM.Node.Types"];
  var Data_Array = PS["Data.Array"];
  var Data_Array_Partial = PS["Data.Array.Partial"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_Char = PS["Data.Char"];
  var Data_Either = PS["Data.Either"];
  var Data_Enum = PS["Data.Enum"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Generic = PS["Data.Generic"];
  var Data_Int = PS["Data.Int"];
  var Data_List = PS["Data.List"];
  var Data_List_Types = PS["Data.List.Types"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_NonEmpty = PS["Data.NonEmpty"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];
  var Data_String = PS["Data.String"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unfoldable = PS["Data.Unfoldable"];
  var Data_Unit = PS["Data.Unit"];
  var Flare = PS["Flare"];
  var Global = PS["Global"];
  var Partial_Unsafe = PS["Partial.Unsafe"];
  var Prelude = PS["Prelude"];
  var Signal = PS["Signal"];
  var Signal_Channel = PS["Signal.Channel"];
  var Text_Smolder_HTML = PS["Text.Smolder.HTML"];
  var Text_Smolder_HTML_Attributes = PS["Text.Smolder.HTML.Attributes"];
  var Text_Smolder_Markup = PS["Text.Smolder.Markup"];
  var Text_Smolder_Renderer_String = PS["Text.Smolder.Renderer.String"];
  var Type_Proxy = PS["Type.Proxy"];
  var SmallNumber = function (x) {
      return x;
  };
  var SmallInt = function (x) {
      return x;
  };
  var SetText = (function () {
      function SetText(value0) {
          this.value0 = value0;
      };
      SetText.create = function (value0) {
          return new SetText(value0);
      };
      return SetText;
  })();
  var SetHTML = (function () {
      function SetHTML(value0) {
          this.value0 = value0;
      };
      SetHTML.create = function (value0) {
          return new SetHTML(value0);
      };
      return SetHTML;
  })();
  var Flammable = function (spark) {
      this.spark = spark;
  };
  var Interactive = function (interactive) {
      this.interactive = interactive;
  };
  var tooltip = function (tip) {
      return Text_Smolder_Markup["with"](Text_Smolder_Markup.attributableMarkupMF)(Text_Smolder_Markup["with"](Text_Smolder_Markup.attributableMarkupMF)(Text_Smolder_HTML.span)(Text_Smolder_HTML_Attributes.className("flarecheck-tooltip")))(Text_Smolder_HTML_Attributes.title(tip));
  };
  var spark = function (dict) {
      return dict.spark;
  };
  var render = function (output) {
      return function (v) {
          if (v instanceof SetText) {
              return $foreign.setText(output)(v.value0);
          };
          if (v instanceof SetHTML) {
              return $foreign.setHTML(output)(Text_Smolder_Renderer_String.render(v.value0));
          };
          throw new Error("Failed pattern match at Test.FlareCheck line 369, column 1 - line 369, column 49: " + [ output.constructor.name, v.constructor.name ]);
      };
  };                                                                                     
  var interactive = function (dict) {
      return dict.interactive;
  };
  var interactiveFunction = function (dictFlammable) {
      return function (dictInteractive) {
          return new Interactive(function (f) {
              return interactive(dictInteractive)(Control_Apply.apply(Flare.applyUI)(f)(spark(dictFlammable)));
          });
      };
  };
  var highlight = function (syntaxClass) {
      return function (value) {
          return Text_Smolder_Markup["with"](Text_Smolder_Markup.attributableMarkupMF)(Text_Smolder_HTML.span)(Text_Smolder_HTML_Attributes.className("flarecheck-" + syntaxClass))(Text_Smolder_Markup.text(value));
      };
  };
  var flareDoc$prime = function (dictInteractive) {
      return function (parentId) {
          return function (title) {
              return function (doc) {
                  return function (x) {
                      var flare = interactive(dictInteractive)(Control_Applicative.pure(Flare.applicativeUI)(x));
                      return function __do() {
                          var v = Flare.setupFlare(flare)();
                          var docString = Data_Maybe.fromMaybe("")(doc);
                          var v1 = $foreign.appendTest(parentId)(title)(docString)(v.components)();
                          return Signal.runSignal(Data_Functor.map(Signal.functorSignal)(render(v1))(v.signal))();
                      };
                  };
              };
          };
      };
  };                                                                 
  var flammableSmallNumber = new Flammable(Data_Functor.map(Flare.functorUI)(SmallNumber)(Flare.numberSlider("Number")(0.0)(1.0)(1.0e-5)(0.5)));
  var flammableSmallInt = new Flammable(Data_Functor.map(Flare.functorUI)(SmallInt)(Flare.intSlider("Int")(0)(100)(1)));
  var flammableNumber = new Flammable(Flare.number("Number")(3.14));
  var constructor = function ($$long) {
      var parts = Data_String.split(".")($$long);
      var name = Data_Array_Partial.last()(parts);
      var modString = (function () {
          var $73 = Data_Array.length(parts) === 1;
          if ($73) {
              return "Data constructor form unknown module";
          };
          return $$long;
      })();
      return tooltip(modString)(highlight("constructor")(name));
  };
  var prettyPrec = function (d) {
      return function (v) {
          if (v instanceof Data_Generic.SProd) {
              var showParen = function (v1) {
                  return function (x) {
                      if (!v1) {
                          return x;
                      };
                      if (v1) {
                          return Control_Bind.discard(Control_Bind.discardUnit)(Text_Smolder_Markup.bindMarkupM)(Text_Smolder_Markup.text("("))(function () {
                              return Control_Bind.discard(Control_Bind.discardUnit)(Text_Smolder_Markup.bindMarkupM)(x)(function () {
                                  return Text_Smolder_Markup.text(")");
                              });
                          });
                      };
                      throw new Error("Failed pattern match at Test.FlareCheck line 246, column 9 - line 246, column 30: " + [ v1.constructor.name, x.constructor.name ]);
                  };
              };
              var $78 = Data_Array["null"](v.value1);
              if ($78) {
                  return constructor(v.value0);
              };
              return showParen(d > 10)(Control_Bind.discard(Control_Bind.discardUnit)(Text_Smolder_Markup.bindMarkupM)(constructor(v.value0))(function () {
                  return Data_Foldable.for_(Text_Smolder_Markup.applicativeMarkupM)(Data_Foldable.foldableArray)(v.value1)(function (f) {
                      return Control_Bind.discard(Control_Bind.discardUnit)(Text_Smolder_Markup.bindMarkupM)(Text_Smolder_Markup.text(" "))(function () {
                          return prettyPrec(11)(f(Data_Unit.unit));
                      });
                  });
              }));
          };
          if (v instanceof Data_Generic.SRecord) {
              var recEntry = function (x) {
                  return Control_Bind.discard(Control_Bind.discardUnit)(Text_Smolder_Markup.bindMarkupM)(highlight("record-field")(x.recLabel))(function () {
                      return Control_Bind.discard(Control_Bind.discardUnit)(Text_Smolder_Markup.bindMarkupM)(Text_Smolder_Markup.text(": "))(function () {
                          return prettyPrec(0)(x.recValue(Data_Unit.unit));
                      });
                  });
              };
              return Control_Bind.discard(Control_Bind.discardUnit)(Text_Smolder_Markup.bindMarkupM)(Text_Smolder_Markup.text("{ "))(function () {
                  return Control_Bind.discard(Control_Bind.discardUnit)(Text_Smolder_Markup.bindMarkupM)(Data_Foldable.intercalate(Data_Foldable.foldableArray)(Text_Smolder_Markup.monoidMarkup)(Text_Smolder_Markup.text(", "))(Data_Functor.map(Data_Functor.functorArray)(recEntry)(v.value0)))(function () {
                      return Text_Smolder_Markup.text(" }");
                  });
              });
          };
          if (v instanceof Data_Generic.SBoolean) {
              return tooltip("Boolean")(highlight("boolean")(Data_Show.show(Data_Show.showBoolean)(v.value0)));
          };
          if (v instanceof Data_Generic.SNumber) {
              return tooltip("Number")(highlight("number")(Data_Show.show(Data_Show.showNumber)(v.value0)));
          };
          if (v instanceof Data_Generic.SInt) {
              return tooltip("Int")(highlight("number")(Data_Show.show(Data_Show.showInt)(v.value0)));
          };
          if (v instanceof Data_Generic.SUnit) {
              return tooltip("Unit")(Text_Smolder_Markup.text(Data_Show.show(Data_Unit.showUnit)(Data_Unit.unit)));
          };
          if (v instanceof Data_Generic.SString) {
              var tip = "String of length " + Data_Show.show(Data_Show.showInt)(Data_String.length(v.value0));
              return tooltip(tip)(highlight("string")(Data_Show.show(Data_Show.showString)(v.value0)));
          };
          if (v instanceof Data_Generic.SChar) {
              var tip = "Char (with char code " + (Data_Show.show(Data_Show.showInt)(Data_Char.toCharCode(v.value0)) + ")");
              return tooltip(tip)(highlight("string")(Data_Show.show(Data_Show.showChar)(v.value0)));
          };
          if (v instanceof Data_Generic.SArray) {
              var tip = "Array of length " + Data_Show.show(Data_Show.showInt)(Data_Array.length(v.value0));
              return tooltip(tip)(Control_Bind.discard(Control_Bind.discardUnit)(Text_Smolder_Markup.bindMarkupM)(Text_Smolder_Markup.text("["))(function () {
                  return Control_Bind.discard(Control_Bind.discardUnit)(Text_Smolder_Markup.bindMarkupM)(Data_Foldable.intercalate(Data_Foldable.foldableArray)(Text_Smolder_Markup.monoidMarkup)(Text_Smolder_Markup.text(", "))(Data_Functor.map(Data_Functor.functorArray)(function (x) {
                      return prettyPrec(0)(x(Data_Unit.unit));
                  })(v.value0)))(function () {
                      return Text_Smolder_Markup.text("]");
                  });
              }));
          };
          throw new Error("Failed pattern match at Test.FlareCheck line 237, column 1 - line 252, column 1: " + [ d.constructor.name, v.constructor.name ]);
      };
  };
  var pretty = prettyPrec(0);
  var prettyPrint = function (dictGeneric) {
      return function ($98) {
          return pretty(Data_Generic.toSpine(dictGeneric)($98));
      };
  };
  var interactiveGeneric = function (dictGeneric) {
      return function (ui) {
          return Data_Functor.map(Flare.functorUI)(function ($103) {
              return SetHTML.create(Text_Smolder_HTML.pre(prettyPrint(dictGeneric)($103)));
          })(ui);
      };
  };                                                                                
  var interactiveNumber = new Interactive(interactiveGeneric(Data_Generic.genericNumber));
  var interactiveString = new Interactive(interactiveGeneric(Data_Generic.genericString));
  exports["SetText"] = SetText;
  exports["SetHTML"] = SetHTML;
  exports["SmallInt"] = SmallInt;
  exports["SmallNumber"] = SmallNumber;
  exports["Flammable"] = Flammable;
  exports["Interactive"] = Interactive;
  exports["flareDoc'"] = flareDoc$prime;
  exports["interactive"] = interactive;
  exports["interactiveGeneric"] = interactiveGeneric;
  exports["spark"] = spark;
  exports["flammableNumber"] = flammableNumber;
  exports["flammableSmallInt"] = flammableSmallInt;
  exports["flammableSmallNumber"] = flammableSmallNumber;
  exports["interactiveNumber"] = interactiveNumber;
  exports["interactiveString"] = interactiveString;
  exports["interactiveFunction"] = interactiveFunction;
})(PS["Test.FlareCheck"] = PS["Test.FlareCheck"] || {});
(function(exports) {
  /* global exports */
  /* global XMLHttpRequest */
  /* global module */
  /* global process */
  "use strict";

  // module Network.HTTP.Affjax

  // jshint maxparams: 5
  exports._ajax = function (mkHeader, options, canceler, errback, callback) {
    var platformSpecific = { };
    if (typeof module !== "undefined" && module.require && !(typeof process !== "undefined" && process.versions["electron"])) {
      // We are on node.js
      platformSpecific.newXHR = function () {
        var XHR = module.require("xhr2");
        return new XHR();
      };

      platformSpecific.fixupUrl = function (url) {
        var urllib = module.require("url");
        var u = urllib.parse(url);
        u.protocol = u.protocol || "http:";
        u.hostname = u.hostname || "localhost";
        return urllib.format(u);
      };

      platformSpecific.getResponse = function (xhr) {
        return xhr.response;
      };
    } else {
      // We are in the browser
      platformSpecific.newXHR = function () {
        return new XMLHttpRequest();
      };

      platformSpecific.fixupUrl = function (url) {
        return url || "/";
      };

      platformSpecific.getResponse = function (xhr) {
        return xhr.response;
      };
    }

    return function () {
      var xhr = platformSpecific.newXHR();
      var fixedUrl = platformSpecific.fixupUrl(options.url);
      xhr.open(options.method || "GET", fixedUrl, true, options.username, options.password);
      if (options.headers) {
        try {
          for (var i = 0, header; (header = options.headers[i]) != null; i++) {
            xhr.setRequestHeader(header.field, header.value);
          }
        }
        catch (e) {
          errback(e)();
        }
      }
      xhr.onerror = function () {
        errback(new Error("AJAX request failed: " + options.method + " " + options.url))();
      };
      xhr.onload = function () {
        callback({
          status: xhr.status,
          headers: xhr.getAllResponseHeaders().split("\r\n")
            .filter(function (header) {
              return header.length > 0;
            })
            .map(function (header) {
              var i = header.indexOf(":");
              return mkHeader(header.substring(0, i))(header.substring(i + 2));
            }),
          response: platformSpecific.getResponse(xhr)
        })();
      };
      xhr.responseType = options.responseType;
      xhr.withCredentials = options.withCredentials;
      xhr.send(options.content);
      return canceler(xhr);
    };
  };

  // jshint maxparams: 4
  exports._cancelAjax = function (xhr, cancelError, errback, callback) {
    return function () {
      try { xhr.abort(); } catch (e) { return callback(false)(); }
      return callback(true)();
    };
  };
})(PS["Network.HTTP.Affjax"] = PS["Network.HTTP.Affjax"] || {});
(function(exports) {
  // Generated by purs version 0.11.3
  "use strict";
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var DOM_File_Types = PS["DOM.File.Types"];
  var DOM_Node_Types = PS["DOM.Node.Types"];
  var DOM_XHR_Types = PS["DOM.XHR.Types"];
  var Data_Argonaut_Core = PS["Data.Argonaut.Core"];
  var Data_ArrayBuffer_Types = PS["Data.ArrayBuffer.Types"];
  var Data_FormURLEncoded = PS["Data.FormURLEncoded"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_MediaType = PS["Data.MediaType"];
  var Data_MediaType_Common = PS["Data.MediaType.Common"];
  var Data_Show = PS["Data.Show"];
  var Data_Tuple = PS["Data.Tuple"];
  var Prelude = PS["Prelude"];
  var Unsafe_Coerce = PS["Unsafe.Coerce"];        
  var Requestable = function (toRequest) {
      this.toRequest = toRequest;
  };
  var toRequest = function (dict) {
      return dict.toRequest;
  }; 
  var defaultToRequest = function ($0) {
      return Data_Tuple.Tuple.create(Data_Maybe.Nothing.value)(Unsafe_Coerce.unsafeCoerce($0));
  };                                                                   
  var requestableUnit = new Requestable(defaultToRequest);
  exports["Requestable"] = Requestable;
  exports["toRequest"] = toRequest;
  exports["requestableUnit"] = requestableUnit;
})(PS["Network.HTTP.Affjax.Request"] = PS["Network.HTTP.Affjax.Request"] || {});
(function(exports) {
  // Generated by purs version 0.11.3
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Monad_Except_Trans = PS["Control.Monad.Except.Trans"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var DOM_File_Types = PS["DOM.File.Types"];
  var DOM_Node_Types = PS["DOM.Node.Types"];
  var Data_Argonaut_Core = PS["Data.Argonaut.Core"];
  var Data_ArrayBuffer_Types = PS["Data.ArrayBuffer.Types"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foreign = PS["Data.Foreign"];
  var Data_Function = PS["Data.Function"];
  var Data_Identity = PS["Data.Identity"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_MediaType = PS["Data.MediaType"];
  var Data_MediaType_Common = PS["Data.MediaType.Common"];
  var Data_Show = PS["Data.Show"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];
  var Unsafe_Coerce = PS["Unsafe.Coerce"];        
  var ArrayBufferResponse = (function () {
      function ArrayBufferResponse() {

      };
      ArrayBufferResponse.value = new ArrayBufferResponse();
      return ArrayBufferResponse;
  })();
  var BlobResponse = (function () {
      function BlobResponse() {

      };
      BlobResponse.value = new BlobResponse();
      return BlobResponse;
  })();
  var DocumentResponse = (function () {
      function DocumentResponse() {

      };
      DocumentResponse.value = new DocumentResponse();
      return DocumentResponse;
  })();
  var JSONResponse = (function () {
      function JSONResponse() {

      };
      JSONResponse.value = new JSONResponse();
      return JSONResponse;
  })();
  var StringResponse = (function () {
      function StringResponse() {

      };
      StringResponse.value = new StringResponse();
      return StringResponse;
  })();
  var Respondable = function (fromResponse, responseType) {
      this.fromResponse = fromResponse;
      this.responseType = responseType;
  }; 
  var responseTypeToString = function (v) {
      if (v instanceof ArrayBufferResponse) {
          return "arraybuffer";
      };
      if (v instanceof BlobResponse) {
          return "blob";
      };
      if (v instanceof DocumentResponse) {
          return "document";
      };
      if (v instanceof JSONResponse) {
          return "text";
      };
      if (v instanceof StringResponse) {
          return "text";
      };
      throw new Error("Failed pattern match at Network.HTTP.Affjax.Response line 49, column 1 - line 50, column 1: " + [ v.constructor.name ]);
  };
  var responseType = function (dict) {
      return dict.responseType;
  };                                                                                                                                     
  var responsableJson = new Respondable(function ($8) {
      return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.monadIdentity))(Unsafe_Coerce.unsafeCoerce($8));
  }, new Data_Tuple.Tuple(new Data_Maybe.Just(Data_MediaType_Common.applicationJSON), JSONResponse.value));                                                             
  var fromResponse = function (dict) {
      return dict.fromResponse;
  };
  exports["ArrayBufferResponse"] = ArrayBufferResponse;
  exports["BlobResponse"] = BlobResponse;
  exports["DocumentResponse"] = DocumentResponse;
  exports["JSONResponse"] = JSONResponse;
  exports["StringResponse"] = StringResponse;
  exports["Respondable"] = Respondable;
  exports["fromResponse"] = fromResponse;
  exports["responseType"] = responseType;
  exports["responseTypeToString"] = responseTypeToString;
  exports["responsableJson"] = responsableJson;
})(PS["Network.HTTP.Affjax.Response"] = PS["Network.HTTP.Affjax.Response"] || {});
(function(exports) {
  // Generated by purs version 0.11.3
  "use strict";
  var Data_Eq = PS["Data.Eq"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_MediaType = PS["Data.MediaType"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];
  var Prelude = PS["Prelude"];        
  var Accept = (function () {
      function Accept(value0) {
          this.value0 = value0;
      };
      Accept.create = function (value0) {
          return new Accept(value0);
      };
      return Accept;
  })();
  var ContentType = (function () {
      function ContentType(value0) {
          this.value0 = value0;
      };
      ContentType.create = function (value0) {
          return new ContentType(value0);
      };
      return ContentType;
  })();
  var RequestHeader = (function () {
      function RequestHeader(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      RequestHeader.create = function (value0) {
          return function (value1) {
              return new RequestHeader(value0, value1);
          };
      };
      return RequestHeader;
  })();
  var requestHeaderValue = function (v) {
      if (v instanceof Accept) {
          return Data_Newtype.unwrap(Data_MediaType.newtypeMediaType)(v.value0);
      };
      if (v instanceof ContentType) {
          return Data_Newtype.unwrap(Data_MediaType.newtypeMediaType)(v.value0);
      };
      if (v instanceof RequestHeader) {
          return v.value1;
      };
      throw new Error("Failed pattern match at Network.HTTP.RequestHeader line 30, column 1 - line 30, column 41: " + [ v.constructor.name ]);
  };
  var requestHeaderName = function (v) {
      if (v instanceof Accept) {
          return "Accept";
      };
      if (v instanceof ContentType) {
          return "Content-Type";
      };
      if (v instanceof RequestHeader) {
          return v.value0;
      };
      throw new Error("Failed pattern match at Network.HTTP.RequestHeader line 25, column 1 - line 26, column 1: " + [ v.constructor.name ]);
  };
  exports["Accept"] = Accept;
  exports["ContentType"] = ContentType;
  exports["RequestHeader"] = RequestHeader;
  exports["requestHeaderName"] = requestHeaderName;
  exports["requestHeaderValue"] = requestHeaderValue;
})(PS["Network.HTTP.RequestHeader"] = PS["Network.HTTP.RequestHeader"] || {});
(function(exports) {
  // Generated by purs version 0.11.3
  "use strict";
  var Control_Apply = PS["Control.Apply"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Generic = PS["Data.Generic"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];        
  var ResponseHeader = (function () {
      function ResponseHeader(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      ResponseHeader.create = function (value0) {
          return function (value1) {
              return new ResponseHeader(value0, value1);
          };
      };
      return ResponseHeader;
  })();
  var responseHeader = function (field) {
      return function (value) {
          return new ResponseHeader(field, value);
      };
  };
  exports["responseHeader"] = responseHeader;
})(PS["Network.HTTP.ResponseHeader"] = PS["Network.HTTP.ResponseHeader"] || {});
(function(exports) {
  // Generated by purs version 0.11.3
  "use strict";
  var $foreign = PS["Network.HTTP.Affjax"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad_Aff = PS["Control.Monad.Aff"];
  var Control_Monad_Aff_AVar = PS["Control.Monad.Aff.AVar"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_Eff_Class = PS["Control.Monad.Eff.Class"];
  var Control_Monad_Eff_Exception = PS["Control.Monad.Eff.Exception"];
  var Control_Monad_Eff_Ref = PS["Control.Monad.Eff.Ref"];
  var Control_Monad_Error_Class = PS["Control.Monad.Error.Class"];
  var Control_Monad_Except = PS["Control.Monad.Except"];
  var Control_Monad_Except_Trans = PS["Control.Monad.Except.Trans"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var DOM_XHR_Types = PS["DOM.XHR.Types"];
  var Data_Argonaut_Parser = PS["Data.Argonaut.Parser"];
  var Data_Array = PS["Data.Array"];
  var Data_Either = PS["Data.Either"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Foreign = PS["Data.Foreign"];
  var Data_Function = PS["Data.Function"];
  var Data_Function_Uncurried = PS["Data.Function.Uncurried"];
  var Data_Functor = PS["Data.Functor"];
  var Data_HTTP_Method = PS["Data.HTTP.Method"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Identity = PS["Data.Identity"];
  var Data_Int = PS["Data.Int"];
  var Data_List_Types = PS["Data.List.Types"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_MediaType = PS["Data.MediaType"];
  var Data_Nullable = PS["Data.Nullable"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var Data_Time_Duration = PS["Data.Time.Duration"];
  var Data_Tuple = PS["Data.Tuple"];
  var $$Math = PS["Math"];
  var Network_HTTP_Affjax_Request = PS["Network.HTTP.Affjax.Request"];
  var Network_HTTP_Affjax_Response = PS["Network.HTTP.Affjax.Response"];
  var Network_HTTP_RequestHeader = PS["Network.HTTP.RequestHeader"];
  var Network_HTTP_ResponseHeader = PS["Network.HTTP.ResponseHeader"];
  var Network_HTTP_StatusCode = PS["Network.HTTP.StatusCode"];
  var Prelude = PS["Prelude"];
  var defaultRequest = {
      method: new Data_Either.Left(Data_HTTP_Method.GET.value), 
      url: "/", 
      headers: [  ], 
      content: Data_Maybe.Nothing.value, 
      username: Data_Maybe.Nothing.value, 
      password: Data_Maybe.Nothing.value, 
      withCredentials: false
  };
  var cancelAjax = function (xhr) {
      return function (err) {
          return Control_Monad_Aff.makeAff(function (eb) {
              return function (cb) {
                  return $foreign._cancelAjax(xhr, err, eb, cb);
              };
          });
      };
  };
  var affjax$prime = function (dictRequestable) {
      return function (dictRespondable) {
          return function (req) {
              return function (eb) {
                  return function (cb) {
                      var responseSettings = Network_HTTP_Affjax_Response.responseType(dictRespondable);
                      var requestSettings = (function () {
                          var v = Data_Functor.map(Data_Maybe.functorMaybe)(Network_HTTP_Affjax_Request.toRequest(dictRequestable))(req.content);
                          if (v instanceof Data_Maybe.Nothing) {
                              return new Data_Tuple.Tuple(Data_Maybe.Nothing.value, Data_Maybe.Nothing.value);
                          };
                          if (v instanceof Data_Maybe.Just) {
                              return new Data_Tuple.Tuple(v.value0.value0, new Data_Maybe.Just(v.value0.value1));
                          };
                          throw new Error("Failed pattern match at Network.HTTP.Affjax line 262, column 21 - line 264, column 49: " + [ v.constructor.name ]);
                      })();
                      var parseJSON = function ($105) {
                          return Data_Either.either(function ($106) {
                              return Data_Foreign.fail(Data_Foreign.JSONError.create($106));
                          })(function ($107) {
                              return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.monadIdentity))(Data_Foreign.toForeign($107));
                          })(Data_Argonaut_Parser.jsonParser($105));
                      };
                      var fromResponse$prime = (function () {
                          var v = Data_Tuple.snd(responseSettings);
                          if (v instanceof Network_HTTP_Affjax_Response.JSONResponse) {
                              return Control_Bind.composeKleisliFlipped(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Network_HTTP_Affjax_Response.fromResponse(dictRespondable))(Control_Bind.composeKleisliFlipped(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(parseJSON)(Data_Foreign.readString));
                          };
                          return Network_HTTP_Affjax_Response.fromResponse(dictRespondable);
                      })();
                      var cb$prime = function (res) {
                          var v = Data_Functor.map(Data_Either.functorEither)(function (v1) {
                              var $72 = {};
                              for (var $73 in res) {
                                  if ({}.hasOwnProperty.call(res, $73)) {
                                      $72[$73] = res[$73];
                                  };
                              };
                              $72.response = v1;
                              return $72;
                          })(Control_Monad_Except.runExcept(fromResponse$prime(res.response)));
                          if (v instanceof Data_Either.Left) {
                              return eb(Control_Monad_Eff_Exception.error(Data_Show.show(Data_List_Types.showNonEmptyList(Data_Foreign.showForeignError))(v.value0)));
                          };
                          if (v instanceof Data_Either.Right) {
                              return cb(v.value0);
                          };
                          throw new Error("Failed pattern match at Network.HTTP.Affjax line 281, column 13 - line 283, column 26: " + [ v.constructor.name ]);
                      };
                      var addHeader = function (mh) {
                          return function (hs) {
                              if (mh instanceof Data_Maybe.Just && !Data_Foldable.any(Data_Foldable.foldableArray)(Data_HeytingAlgebra.heytingAlgebraBoolean)(Data_Function.on(Data_Eq.eq(Data_Eq.eqString))(Network_HTTP_RequestHeader.requestHeaderName)(mh.value0))(hs)) {
                                  return Data_Array.snoc(hs)(mh.value0);
                              };
                              return hs;
                          };
                      };
                      var headers = addHeader(Data_Functor.map(Data_Maybe.functorMaybe)(Network_HTTP_RequestHeader.ContentType.create)(Data_Tuple.fst(requestSettings)))(addHeader(Data_Functor.map(Data_Maybe.functorMaybe)(Network_HTTP_RequestHeader.Accept.create)(Data_Tuple.fst(responseSettings)))(req.headers));
                      var req$prime = {
                          method: Data_HTTP_Method.print(req.method), 
                          url: req.url, 
                          headers: Data_Functor.map(Data_Functor.functorArray)(function (h) {
                              return {
                                  field: Network_HTTP_RequestHeader.requestHeaderName(h), 
                                  value: Network_HTTP_RequestHeader.requestHeaderValue(h)
                              };
                          })(headers), 
                          content: Data_Nullable.toNullable(Data_Tuple.snd(requestSettings)), 
                          responseType: Network_HTTP_Affjax_Response.responseTypeToString(Data_Tuple.snd(responseSettings)), 
                          username: Data_Nullable.toNullable(req.username), 
                          password: Data_Nullable.toNullable(req.password), 
                          withCredentials: req.withCredentials
                      };
                      return $foreign._ajax(Network_HTTP_ResponseHeader.responseHeader, req$prime, cancelAjax, eb, cb$prime);
                  };
              };
          };
      };
  };
  var affjax = function (dictRequestable) {
      return function (dictRespondable) {
          return function ($108) {
              return Control_Monad_Aff["makeAff'"](affjax$prime(dictRequestable)(dictRespondable)($108));
          };
      };
  };                                                                   
  var get = function (dictRespondable) {
      return function (u) {
          return affjax(Network_HTTP_Affjax_Request.requestableUnit)(dictRespondable)((function () {
              var $83 = {};
              for (var $84 in defaultRequest) {
                  if ({}.hasOwnProperty.call(defaultRequest, $84)) {
                      $83[$84] = defaultRequest[$84];
                  };
              };
              $83.url = u;
              return $83;
          })());
      };
  };
  exports["affjax"] = affjax;
  exports["defaultRequest"] = defaultRequest;
  exports["get"] = get;
})(PS["Network.HTTP.Affjax"] = PS["Network.HTTP.Affjax"] || {});
(function(exports) {
  // Generated by purs version 0.11.3
  "use strict";
  var Data_Eq = PS["Data.Eq"];
  var Data_EuclideanRing = PS["Data.EuclideanRing"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var Data_String = PS["Data.String"];
  var Prelude = PS["Prelude"];
  var updatePosString = function (pos$prime) {
      return function (str) {
          var updatePosChar = function (v) {
              return function (c) {
                  if (c === "\x0a") {
                      return {
                          line: v.line + 1 | 0, 
                          column: 1
                      };
                  };
                  if (c === "\x0d") {
                      return {
                          line: v.line + 1 | 0, 
                          column: 1
                      };
                  };
                  if (c === "\x09") {
                      return {
                          line: v.line, 
                          column: (v.column + 8 | 0) - (v.column - 1 | 0) % 8 | 0
                      };
                  };
                  return {
                      line: v.line, 
                      column: v.column + 1 | 0
                  };
              };
          };
          return Data_Foldable.foldl(Data_Foldable.foldableArray)(updatePosChar)(pos$prime)(Data_String.split(Data_Newtype.wrap(Data_String.newtypePattern)(""))(str));
      };
  }; 
  var initialPos = {
      line: 1, 
      column: 1
  };
  exports["initialPos"] = initialPos;
  exports["updatePosString"] = updatePosString;
})(PS["Text.Parsing.Parser.Pos"] = PS["Text.Parsing.Parser.Pos"] || {});
(function(exports) {
  // Generated by purs version 0.11.3
  "use strict";
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Lazy = PS["Control.Lazy"];
  var Control_Monad = PS["Control.Monad"];
  var Control_Monad_Error_Class = PS["Control.Monad.Error.Class"];
  var Control_Monad_Except = PS["Control.Monad.Except"];
  var Control_Monad_Except_Trans = PS["Control.Monad.Except.Trans"];
  var Control_Monad_Rec_Class = PS["Control.Monad.Rec.Class"];
  var Control_Monad_State = PS["Control.Monad.State"];
  var Control_Monad_State_Class = PS["Control.Monad.State.Class"];
  var Control_Monad_State_Trans = PS["Control.Monad.State.Trans"];
  var Control_Monad_Trans_Class = PS["Control.Monad.Trans.Class"];
  var Control_MonadPlus = PS["Control.MonadPlus"];
  var Control_MonadZero = PS["Control.MonadZero"];
  var Control_Plus = PS["Control.Plus"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Either = PS["Data.Either"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Functor = PS["Data.Functor"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Identity = PS["Data.Identity"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];
  var Data_Tuple = PS["Data.Tuple"];
  var Prelude = PS["Prelude"];
  var Text_Parsing_Parser_Pos = PS["Text.Parsing.Parser.Pos"];        
  var ParseState = (function () {
      function ParseState(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      ParseState.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new ParseState(value0, value1, value2);
              };
          };
      };
      return ParseState;
  })();
  var ParseError = (function () {
      function ParseError(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      ParseError.create = function (value0) {
          return function (value1) {
              return new ParseError(value0, value1);
          };
      };
      return ParseError;
  })();
  var ParserT = function (x) {
      return x;
  };
  var parseErrorMessage = function (v) {
      return v.value0;
  };
  var newtypeParserT = new Data_Newtype.Newtype(function (n) {
      return n;
  }, ParserT);
  var runParserT = function (dictMonad) {
      return function (s) {
          return function (p) {
              var initialState = new ParseState(s, Text_Parsing_Parser_Pos.initialPos, false);
              return Control_Monad_State_Trans.evalStateT(((dictMonad.Bind1()).Apply0()).Functor0())(Control_Monad_Except_Trans.runExceptT(Data_Newtype.unwrap(newtypeParserT)(p)))(initialState);
          };
      };
  };
  var runParser = function (s) {
      return function ($90) {
          return Data_Newtype.unwrap(Data_Identity.newtypeIdentity)(runParserT(Data_Identity.monadIdentity)(s)($90));
      };
  }; 
  var monadThrowParserT = function (dictMonad) {
      return Control_Monad_Except_Trans.monadThrowExceptT(Control_Monad_State_Trans.monadStateT(dictMonad));
  };
  var monadStateParserT = function (dictMonad) {
      return Control_Monad_Except_Trans.monadStateExceptT(Control_Monad_State_Trans.monadStateStateT(dictMonad));
  };
  var position = function (dictMonad) {
      return Control_Monad_State_Class.gets(monadStateParserT(dictMonad))(function (v) {
          return v.value1;
      });
  };
  var lazyParserT = new Control_Lazy.Lazy(function (f) {
      return Control_Lazy.defer(Control_Monad_State_Trans.lazyStateT)(function ($93) {
          return Control_Monad_Except_Trans.runExceptT(Data_Newtype.unwrap(newtypeParserT)(f($93)));
      });
  });                           
  var functorParserT = function (dictFunctor) {
      return Control_Monad_Except_Trans.functorExceptT(Control_Monad_State_Trans.functorStateT(dictFunctor));
  };
  var failWithPosition = function (dictMonad) {
      return function (message) {
          return function (position1) {
              return Control_Monad_Error_Class.throwError(monadThrowParserT(dictMonad))(new ParseError(message, position1));
          };
      };
  };
  var bindParserT = function (dictMonad) {
      return Control_Monad_Except_Trans.bindExceptT(Control_Monad_State_Trans.monadStateT(dictMonad));
  };
  var fail = function (dictMonad) {
      return function (message) {
          return Control_Bind.bindFlipped(bindParserT(dictMonad))(failWithPosition(dictMonad)(message))(position(dictMonad));
      };
  };
  var applyParserT = function (dictMonad) {
      return Control_Monad_Except_Trans.applyExceptT(Control_Monad_State_Trans.monadStateT(dictMonad));
  };
  var applicativeParserT = function (dictMonad) {
      return Control_Monad_Except_Trans.applicativeExceptT(Control_Monad_State_Trans.monadStateT(dictMonad));
  };
  var altParserT = function (dictMonad) {
      return new Control_Alt.Alt(function () {
          return functorParserT(((dictMonad.Bind1()).Apply0()).Functor0());
      }, function (p1) {
          return function (p2) {
              return ParserT(Control_Monad_Except_Trans.ExceptT(Control_Monad_State_Trans.StateT(function (v) {
                  return Control_Bind.bind(dictMonad.Bind1())(Control_Monad_State_Trans.runStateT(Control_Monad_Except_Trans.runExceptT(Data_Newtype.unwrap(newtypeParserT)(p1)))(new ParseState(v.value0, v.value1, false)))(function (v1) {
                      if (v1.value0 instanceof Data_Either.Left && !v1.value1.value2) {
                          return Control_Monad_State_Trans.runStateT(Control_Monad_Except_Trans.runExceptT(Data_Newtype.unwrap(newtypeParserT)(p2)))(v);
                      };
                      return Control_Applicative.pure(dictMonad.Applicative0())(new Data_Tuple.Tuple(v1.value0, v1.value1));
                  });
              })));
          };
      });
  };
  var plusParserT = function (dictMonad) {
      return new Control_Plus.Plus(function () {
          return altParserT(dictMonad);
      }, fail(dictMonad)("No alternative"));
  };
  var alternativeParserT = function (dictMonad) {
      return new Control_Alternative.Alternative(function () {
          return applicativeParserT(dictMonad);
      }, function () {
          return plusParserT(dictMonad);
      });
  };
  exports["ParseError"] = ParseError;
  exports["ParseState"] = ParseState;
  exports["ParserT"] = ParserT;
  exports["fail"] = fail;
  exports["failWithPosition"] = failWithPosition;
  exports["parseErrorMessage"] = parseErrorMessage;
  exports["position"] = position;
  exports["runParser"] = runParser;
  exports["runParserT"] = runParserT;
  exports["newtypeParserT"] = newtypeParserT;
  exports["lazyParserT"] = lazyParserT;
  exports["functorParserT"] = functorParserT;
  exports["applyParserT"] = applyParserT;
  exports["applicativeParserT"] = applicativeParserT;
  exports["bindParserT"] = bindParserT;
  exports["monadStateParserT"] = monadStateParserT;
  exports["monadThrowParserT"] = monadThrowParserT;
  exports["altParserT"] = altParserT;
  exports["plusParserT"] = plusParserT;
  exports["alternativeParserT"] = alternativeParserT;
})(PS["Text.Parsing.Parser"] = PS["Text.Parsing.Parser"] || {});
(function(exports) {
  // Generated by purs version 0.11.3
  "use strict";
  var Control_Alt = PS["Control.Alt"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad_Except = PS["Control.Monad.Except"];
  var Control_Monad_Except_Trans = PS["Control.Monad.Except.Trans"];
  var Control_Monad_State = PS["Control.Monad.State"];
  var Control_Monad_State_Trans = PS["Control.Monad.State.Trans"];
  var Control_Plus = PS["Control.Plus"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Either = PS["Data.Either"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_List = PS["Data.List"];
  var Data_List_Types = PS["Data.List.Types"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];
  var Text_Parsing_Parser = PS["Text.Parsing.Parser"];        
  var withErrorMessage = function (dictMonad) {
      return function (p) {
          return function (msg) {
              return Control_Alt.alt(Text_Parsing_Parser.altParserT(dictMonad))(p)(Text_Parsing_Parser.fail(dictMonad)("Expected " + msg));
          };
      };
  };
  var tryRethrow = function (dictMonad) {
      return function (p) {
          return Text_Parsing_Parser.ParserT(Control_Monad_Except_Trans.ExceptT(Control_Monad_State_Trans.StateT(function (v) {
              return Control_Bind.bind(dictMonad.Bind1())(Control_Monad_State_Trans.runStateT(Control_Monad_Except_Trans.runExceptT(Data_Newtype.unwrap(Text_Parsing_Parser.newtypeParserT)(p)))(v))(function (v1) {
                  if (v1.value0 instanceof Data_Either.Left) {
                      return Control_Applicative.pure(dictMonad.Applicative0())(new Data_Tuple.Tuple(new Data_Either.Left(new Text_Parsing_Parser.ParseError(v1.value0.value0.value0, v.value1)), new Text_Parsing_Parser.ParseState(v1.value1.value0, v1.value1.value1, v.value2)));
                  };
                  return Control_Applicative.pure(dictMonad.Applicative0())(new Data_Tuple.Tuple(v1.value0, v1.value1));
              });
          })));
      };
  };
  var $$try = function (dictMonad) {
      return function (p) {
          return Text_Parsing_Parser.ParserT(Control_Monad_Except_Trans.ExceptT(Control_Monad_State_Trans.StateT(function (v) {
              return Control_Bind.bind(dictMonad.Bind1())(Control_Monad_State_Trans.runStateT(Control_Monad_Except_Trans.runExceptT(Data_Newtype.unwrap(Text_Parsing_Parser.newtypeParserT)(p)))(v))(function (v1) {
                  if (v1.value0 instanceof Data_Either.Left) {
                      return Control_Applicative.pure(dictMonad.Applicative0())(new Data_Tuple.Tuple(v1.value0, new Text_Parsing_Parser.ParseState(v1.value1.value0, v1.value1.value1, v.value2)));
                  };
                  return Control_Applicative.pure(dictMonad.Applicative0())(new Data_Tuple.Tuple(v1.value0, v1.value1));
              });
          })));
      };
  };
  var skipMany1 = function (dictMonad) {
      return function (p) {
          return Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(p)(function (v) {
              return Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(skipMany(dictMonad)(p))(function (v1) {
                  return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(dictMonad))(Data_Unit.unit);
              });
          });
      };
  };
  var skipMany = function (dictMonad) {
      return function (p) {
          return Control_Alt.alt(Text_Parsing_Parser.altParserT(dictMonad))(skipMany1(dictMonad)(p))(Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(dictMonad))(Data_Unit.unit));
      };
  };
  var sepBy1 = function (dictMonad) {
      return function (p) {
          return function (sep) {
              return Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(p)(function (v) {
                  return Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(Data_List.many(Text_Parsing_Parser.alternativeParserT(dictMonad))(Text_Parsing_Parser.lazyParserT)(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(dictMonad))(sep)(p)))(function (v1) {
                      return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(dictMonad))(new Data_List_Types.Cons(v, v1));
                  });
              });
          };
      };
  };
  var sepBy = function (dictMonad) {
      return function (p) {
          return function (sep) {
              return Control_Alt.alt(Text_Parsing_Parser.altParserT(dictMonad))(sepBy1(dictMonad)(p)(sep))(Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(dictMonad))(Data_List_Types.Nil.value));
          };
      };
  };
  var option = function (dictMonad) {
      return function (a) {
          return function (p) {
              return Control_Alt.alt(Text_Parsing_Parser.altParserT(dictMonad))(p)(Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(dictMonad))(a));
          };
      };
  };
  var optionMaybe = function (dictMonad) {
      return function (p) {
          return option(dictMonad)(Data_Maybe.Nothing.value)(Data_Functor.map(Text_Parsing_Parser.functorParserT(((dictMonad.Bind1()).Apply0()).Functor0()))(Data_Maybe.Just.create)(p));
      };
  };
  var manyTill = function (dictMonad) {
      return function (p) {
          return function (end) {
              var scan = Control_Alt.alt(Text_Parsing_Parser.altParserT(dictMonad))(Data_Functor.voidLeft(Text_Parsing_Parser.functorParserT(((dictMonad.Bind1()).Apply0()).Functor0()))(end)(Data_List_Types.Nil.value))(Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(p)(function (v) {
                  return Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(scan)(function (v1) {
                      return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(dictMonad))(new Data_List_Types.Cons(v, v1));
                  });
              }));
              return scan;
          };
      };
  };
  var many1Till = function (dictMonad) {
      return function (p) {
          return function (end) {
              return Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(p)(function (v) {
                  return Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(manyTill(dictMonad)(p)(end))(function (v1) {
                      return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(dictMonad))(new Data_List_Types.Cons(v, v1));
                  });
              });
          };
      };
  };
  exports["many1Till"] = many1Till;
  exports["manyTill"] = manyTill;
  exports["option"] = option;
  exports["optionMaybe"] = optionMaybe;
  exports["sepBy"] = sepBy;
  exports["sepBy1"] = sepBy1;
  exports["skipMany"] = skipMany;
  exports["skipMany1"] = skipMany1;
  exports["try"] = $$try;
  exports["tryRethrow"] = tryRethrow;
  exports["withErrorMessage"] = withErrorMessage;
})(PS["Text.Parsing.Parser.Combinators"] = PS["Text.Parsing.Parser.Combinators"] || {});
(function(exports) {
  // Generated by purs version 0.11.3
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad_State = PS["Control.Monad.State"];
  var Control_Monad_State_Class = PS["Control.Monad.State.Class"];
  var Data_Array = PS["Data.Array"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];
  var Data_String = PS["Data.String"];
  var Prelude = PS["Prelude"];
  var Text_Parsing_Parser = PS["Text.Parsing.Parser"];
  var Text_Parsing_Parser_Combinators = PS["Text.Parsing.Parser.Combinators"];
  var Text_Parsing_Parser_Pos = PS["Text.Parsing.Parser.Pos"];        
  var StringLike = function (drop, indexOf, $$null, uncons) {
      this.drop = drop;
      this.indexOf = indexOf;
      this["null"] = $$null;
      this.uncons = uncons;
  };
  var uncons = function (dict) {
      return dict.uncons;
  };
  var stringLikeString = new StringLike(Data_String.drop, Data_String.indexOf, Data_String["null"], Data_String.uncons);
  var $$null = function (dict) {
      return dict["null"];
  };
  var indexOf = function (dict) {
      return dict.indexOf;
  };
  var eof = function (dictStringLike) {
      return function (dictMonad) {
          return Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(Control_Monad_State_Class.gets(Text_Parsing_Parser.monadStateParserT(dictMonad))(function (v) {
              return v.value0;
          }))(function (v) {
              return Control_Applicative.unless(Text_Parsing_Parser.applicativeParserT(dictMonad))($$null(dictStringLike)(v))(Text_Parsing_Parser.fail(dictMonad)("Expected EOF"));
          });
      };
  };
  var drop = function (dict) {
      return dict.drop;
  };
  var string = function (dictStringLike) {
      return function (dictMonad) {
          return function (str) {
              return Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(Control_Monad_State_Class.gets(Text_Parsing_Parser.monadStateParserT(dictMonad))(function (v) {
                  return v.value0;
              }))(function (v) {
                  var v1 = indexOf(dictStringLike)(Data_Newtype.wrap(Data_String.newtypePattern)(str))(v);
                  if (v1 instanceof Data_Maybe.Just && v1.value0 === 0) {
                      return Control_Bind.discard(Control_Bind.discardUnit)(Text_Parsing_Parser.bindParserT(dictMonad))(Control_Monad_State_Class.modify(Text_Parsing_Parser.monadStateParserT(dictMonad))(function (v2) {
                          return new Text_Parsing_Parser.ParseState(drop(dictStringLike)(Data_String.length(str))(v), Text_Parsing_Parser_Pos.updatePosString(v2.value1)(str), true);
                      }))(function () {
                          return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(dictMonad))(str);
                      });
                  };
                  return Text_Parsing_Parser.fail(dictMonad)("Expected " + Data_Show.show(Data_Show.showString)(str));
              });
          };
      };
  };
  var anyChar = function (dictStringLike) {
      return function (dictMonad) {
          return Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(Control_Monad_State_Class.gets(Text_Parsing_Parser.monadStateParserT(dictMonad))(function (v) {
              return v.value0;
          }))(function (v) {
              var v1 = uncons(dictStringLike)(v);
              if (v1 instanceof Data_Maybe.Nothing) {
                  return Text_Parsing_Parser.fail(dictMonad)("Unexpected EOF");
              };
              if (v1 instanceof Data_Maybe.Just) {
                  return Control_Bind.discard(Control_Bind.discardUnit)(Text_Parsing_Parser.bindParserT(dictMonad))(Control_Monad_State_Class.modify(Text_Parsing_Parser.monadStateParserT(dictMonad))(function (v2) {
                      return new Text_Parsing_Parser.ParseState(v1.value0.tail, Text_Parsing_Parser_Pos.updatePosString(v2.value1)(Data_String.singleton(v1.value0.head)), true);
                  }))(function () {
                      return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(dictMonad))(v1.value0.head);
                  });
              };
              throw new Error("Failed pattern match at Text.Parsing.Parser.String line 54, column 3 - line 61, column 16: " + [ v1.constructor.name ]);
          });
      };
  };
  var satisfy = function (dictStringLike) {
      return function (dictMonad) {
          return function (f) {
              return Text_Parsing_Parser_Combinators.tryRethrow(dictMonad)(Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(anyChar(dictStringLike)(dictMonad))(function (v) {
                  var $61 = f(v);
                  if ($61) {
                      return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(dictMonad))(v);
                  };
                  return Text_Parsing_Parser.fail(dictMonad)("Character '" + (Data_String.singleton(v) + "' did not satisfy predicate"));
              }));
          };
      };
  };
  var $$char = function (dictStringLike) {
      return function (dictMonad) {
          return function (c) {
              return Text_Parsing_Parser_Combinators.withErrorMessage(dictMonad)(satisfy(dictStringLike)(dictMonad)(function (v) {
                  return v === c;
              }))(Data_Show.show(Data_Show.showChar)(c));
          };
      };
  };
  var noneOf = function (dictStringLike) {
      return function (dictMonad) {
          return function (ss) {
              return Text_Parsing_Parser_Combinators.withErrorMessage(dictMonad)(satisfy(dictStringLike)(dictMonad)(Data_Function.flip(Data_Foldable.notElem(Data_Foldable.foldableArray)(Data_Eq.eqChar))(ss)))("none of " + Data_Show.show(Data_Show.showArray(Data_Show.showChar))(ss));
          };
      };
  };
  var oneOf = function (dictStringLike) {
      return function (dictMonad) {
          return function (ss) {
              return Text_Parsing_Parser_Combinators.withErrorMessage(dictMonad)(satisfy(dictStringLike)(dictMonad)(Data_Function.flip(Data_Foldable.elem(Data_Foldable.foldableArray)(Data_Eq.eqChar))(ss)))("one of " + Data_Show.show(Data_Show.showArray(Data_Show.showChar))(ss));
          };
      };
  };
  exports["StringLike"] = StringLike;
  exports["anyChar"] = anyChar;
  exports["char"] = $$char;
  exports["drop"] = drop;
  exports["eof"] = eof;
  exports["indexOf"] = indexOf;
  exports["noneOf"] = noneOf;
  exports["oneOf"] = oneOf;
  exports["satisfy"] = satisfy;
  exports["string"] = string;
  exports["uncons"] = uncons;
  exports["stringLikeString"] = stringLikeString;
})(PS["Text.Parsing.Parser.String"] = PS["Text.Parsing.Parser.String"] || {});
(function(exports) {
  // Generated by purs version 0.11.3
  "use strict";
  var Control_Apply = PS["Control.Apply"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Either = PS["Data.Either"];
  var Data_Function = PS["Data.Function"];
  var Data_Identity = PS["Data.Identity"];
  var Data_String = PS["Data.String"];
  var Data_String_Regex = PS["Data.String.Regex"];
  var Data_String_Regex_Flags = PS["Data.String.Regex.Flags"];
  var Partial_Unsafe = PS["Partial.Unsafe"];
  var Prelude = PS["Prelude"];
  var Text_Parsing_Parser = PS["Text.Parsing.Parser"];
  var Text_Parsing_Parser_Combinators = PS["Text.Parsing.Parser.Combinators"];
  var Text_Parsing_Parser_String = PS["Text.Parsing.Parser.String"];        
  var isWhitespace = (function () {
      var wsRegex = Data_Either.fromRight()(Data_String_Regex.regex("^\\s$")(Data_String_Regex_Flags.noFlags));
      return function ($2) {
          return Data_String_Regex.test(wsRegex)(Data_String.singleton($2));
      };
  })();
  var skipSpaces = Text_Parsing_Parser_Combinators.skipMany(Data_Identity.monadIdentity)(Text_Parsing_Parser_String.satisfy(Text_Parsing_Parser_String.stringLikeString)(Data_Identity.monadIdentity)(isWhitespace));
  var parens = function (p) {
      return Control_Apply.applyFirst(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Control_Apply.applyFirst(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_String.string(Text_Parsing_Parser_String.stringLikeString)(Data_Identity.monadIdentity)("("))(skipSpaces))(p))(skipSpaces))(Text_Parsing_Parser_String.string(Text_Parsing_Parser_String.stringLikeString)(Data_Identity.monadIdentity)(")"));
  };
  var squares = function (p) {
      return Control_Apply.applyFirst(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Control_Apply.applyFirst(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_String.string(Text_Parsing_Parser_String.stringLikeString)(Data_Identity.monadIdentity)("["))(skipSpaces))(p))(skipSpaces))(Text_Parsing_Parser_String.string(Text_Parsing_Parser_String.stringLikeString)(Data_Identity.monadIdentity)("]"));
  };
  var isEmailAddress = (function () {
      var wsEmail = Data_Either.fromRight()(Data_String_Regex.regex("^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$")(Data_String_Regex_Flags.noFlags));
      return Data_String_Regex.test(wsEmail);
  })();
  var braces = function (p) {
      return Control_Apply.applyFirst(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Control_Apply.applyFirst(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_String.string(Text_Parsing_Parser_String.stringLikeString)(Data_Identity.monadIdentity)("{"))(skipSpaces))(p))(skipSpaces))(Text_Parsing_Parser_String.string(Text_Parsing_Parser_String.stringLikeString)(Data_Identity.monadIdentity)("}"));
  };
  exports["braces"] = braces;
  exports["isEmailAddress"] = isEmailAddress;
  exports["isWhitespace"] = isWhitespace;
  exports["parens"] = parens;
  exports["skipSpaces"] = skipSpaces;
  exports["squares"] = squares;
})(PS["Text.Markdown.SlamDown.Parser.Utils"] = PS["Text.Markdown.SlamDown.Parser.Utils"] || {});
(function(exports) {
  // Generated by purs version 0.11.3
  "use strict";
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad_Free = PS["Control.Monad.Free"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_DateTime = PS["Data.DateTime"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_HugeNum = PS["Data.HugeNum"];
  var Data_Identity = PS["Data.Identity"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];
  var Data_Time = PS["Data.Time"];
  var Data_Time_Component = PS["Data.Time.Component"];
  var Prelude = PS["Prelude"];
  var Test_StrongCheck_Arbitrary = PS["Test.StrongCheck.Arbitrary"];
  var Test_StrongCheck_Data_ArbDateTime = PS["Test.StrongCheck.Data.ArbDateTime"];
  var Test_StrongCheck_Gen = PS["Test.StrongCheck.Gen"];        
  var Minutes = (function () {
      function Minutes() {

      };
      Minutes.value = new Minutes();
      return Minutes;
  })();
  var Seconds = (function () {
      function Seconds() {

      };
      Seconds.value = new Seconds();
      return Seconds;
  })();
  var PlainText = (function () {
      function PlainText(value0) {
          this.value0 = value0;
      };
      PlainText.create = function (value0) {
          return new PlainText(value0);
      };
      return PlainText;
  })();
  var Numeric = (function () {
      function Numeric(value0) {
          this.value0 = value0;
      };
      Numeric.create = function (value0) {
          return new Numeric(value0);
      };
      return Numeric;
  })();
  var $$Date = (function () {
      function $$Date(value0) {
          this.value0 = value0;
      };
      $$Date.create = function (value0) {
          return new $$Date(value0);
      };
      return $$Date;
  })();
  var Time = (function () {
      function Time(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Time.create = function (value0) {
          return function (value1) {
              return new Time(value0, value1);
          };
      };
      return Time;
  })();
  var DateTime = (function () {
      function DateTime(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      DateTime.create = function (value0) {
          return function (value1) {
              return new DateTime(value0, value1);
          };
      };
      return DateTime;
  })();
  var traverseTextBox = function (dictApplicative) {
      return function (eta) {
          return function (v) {
              if (v instanceof PlainText) {
                  return Data_Functor.map((dictApplicative.Apply0()).Functor0())(PlainText.create)(eta(v.value0));
              };
              if (v instanceof Numeric) {
                  return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Numeric.create)(eta(v.value0));
              };
              if (v instanceof $$Date) {
                  return Data_Functor.map((dictApplicative.Apply0()).Functor0())($$Date.create)(eta(v.value0));
              };
              if (v instanceof Time) {
                  return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Time.create(v.value0))(eta(v.value1));
              };
              if (v instanceof DateTime) {
                  return Data_Functor.map((dictApplicative.Apply0()).Functor0())(DateTime.create(v.value0))(eta(v.value1));
              };
              throw new Error("Failed pattern match at Text.Markdown.SlamDown.Syntax.TextBox line 56, column 23 - line 61, column 48: " + [ v.constructor.name ]);
          };
      };
  };
  var transTextBox = function (eta) {
      return function ($163) {
          return Data_Newtype.unwrap(Data_Identity.newtypeIdentity)(traverseTextBox(Data_Identity.applicativeIdentity)(function ($164) {
              return Data_Identity.Identity(eta($164));
          })($163));
      };
  };
  var eqTimePrecision = new Data_Eq.Eq(function (x) {
      return function (y) {
          if (x instanceof Minutes && y instanceof Minutes) {
              return true;
          };
          if (x instanceof Seconds && y instanceof Seconds) {
              return true;
          };
          return false;
      };
  });
  exports["PlainText"] = PlainText;
  exports["Numeric"] = Numeric;
  exports["Date"] = $$Date;
  exports["Time"] = Time;
  exports["DateTime"] = DateTime;
  exports["Minutes"] = Minutes;
  exports["Seconds"] = Seconds;
  exports["transTextBox"] = transTextBox;
  exports["traverseTextBox"] = traverseTextBox;
  exports["eqTimePrecision"] = eqTimePrecision;
})(PS["Text.Markdown.SlamDown.Syntax.TextBox"] = PS["Text.Markdown.SlamDown.Syntax.TextBox"] || {});
(function(exports) {
  // Generated by purs version 0.11.3
  "use strict";
  var Control_Category = PS["Control.Category"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Ord = PS["Data.Ord"];
  var Prelude = PS["Prelude"];        
  var Value = function (Eq0, Ord1, renderValue, stringValue) {
      this.Eq0 = Eq0;
      this.Ord1 = Ord1;
      this.renderValue = renderValue;
      this.stringValue = stringValue;
  };
  var valueString = new Value(function () {
      return Data_Eq.eqString;
  }, function () {
      return Data_Ord.ordString;
  }, Control_Category.id(Control_Category.categoryFn), Control_Category.id(Control_Category.categoryFn));
  var stringValue = function (dict) {
      return dict.stringValue;
  };
  var renderValue = function (dict) {
      return dict.renderValue;
  };
  exports["Value"] = Value;
  exports["renderValue"] = renderValue;
  exports["stringValue"] = stringValue;
  exports["valueString"] = valueString;
})(PS["Text.Markdown.SlamDown.Syntax.Value"] = PS["Text.Markdown.SlamDown.Syntax.Value"] || {});
(function(exports) {
  // Generated by purs version 0.11.3
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Category = PS["Control.Category"];
  var Control_Monad_Free = PS["Control.Monad.Free"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Array = PS["Data.Array"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Functor_Compose = PS["Data.Functor.Compose"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Identity = PS["Data.Identity"];
  var Data_List = PS["Data.List"];
  var Data_List_Types = PS["Data.List.Types"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Set = PS["Data.Set"];
  var Data_Show = PS["Data.Show"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Tuple = PS["Data.Tuple"];
  var Partial_Unsafe = PS["Partial.Unsafe"];
  var Prelude = PS["Prelude"];
  var Test_StrongCheck_Arbitrary = PS["Test.StrongCheck.Arbitrary"];
  var Test_StrongCheck_Data_ArbDateTime = PS["Test.StrongCheck.Data.ArbDateTime"];
  var Test_StrongCheck_Gen = PS["Test.StrongCheck.Gen"];
  var Text_Markdown_SlamDown_Syntax_TextBox = PS["Text.Markdown.SlamDown.Syntax.TextBox"];
  var Text_Markdown_SlamDown_Syntax_Value = PS["Text.Markdown.SlamDown.Syntax.Value"];        
  var TextBox = (function () {
      function TextBox(value0) {
          this.value0 = value0;
      };
      TextBox.create = function (value0) {
          return new TextBox(value0);
      };
      return TextBox;
  })();
  var RadioButtons = (function () {
      function RadioButtons(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      RadioButtons.create = function (value0) {
          return function (value1) {
              return new RadioButtons(value0, value1);
          };
      };
      return RadioButtons;
  })();
  var CheckBoxes = (function () {
      function CheckBoxes(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      CheckBoxes.create = function (value0) {
          return function (value1) {
              return new CheckBoxes(value0, value1);
          };
      };
      return CheckBoxes;
  })();
  var DropDown = (function () {
      function DropDown(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      DropDown.create = function (value0) {
          return function (value1) {
              return new DropDown(value0, value1);
          };
      };
      return DropDown;
  })();
  var Literal = (function () {
      function Literal(value0) {
          this.value0 = value0;
      };
      Literal.create = function (value0) {
          return new Literal(value0);
      };
      return Literal;
  })();
  var Unevaluated = (function () {
      function Unevaluated(value0) {
          this.value0 = value0;
      };
      Unevaluated.create = function (value0) {
          return new Unevaluated(value0);
      };
      return Unevaluated;
  })();
  exports["Literal"] = Literal;
  exports["Unevaluated"] = Unevaluated;
  exports["TextBox"] = TextBox;
  exports["RadioButtons"] = RadioButtons;
  exports["CheckBoxes"] = CheckBoxes;
  exports["DropDown"] = DropDown;
})(PS["Text.Markdown.SlamDown.Syntax.FormField"] = PS["Text.Markdown.SlamDown.Syntax.FormField"] || {});
(function(exports) {
  // Generated by purs version 0.11.3
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad_Free = PS["Control.Monad.Free"];
  var Data_Date = PS["Data.Date"];
  var Data_DateTime = PS["Data.DateTime"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Functor_Compose = PS["Data.Functor.Compose"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_HugeNum = PS["Data.HugeNum"];
  var Data_List = PS["Data.List"];
  var Data_List_Types = PS["Data.List.Types"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Set = PS["Data.Set"];
  var Data_Show = PS["Data.Show"];
  var Data_Time = PS["Data.Time"];
  var Prelude = PS["Prelude"];
  var Test_StrongCheck_Arbitrary = PS["Test.StrongCheck.Arbitrary"];
  var Test_StrongCheck_Gen = PS["Test.StrongCheck.Gen"];
  var Text_Markdown_SlamDown_Syntax_FormField = PS["Text.Markdown.SlamDown.Syntax.FormField"];
  var Text_Markdown_SlamDown_Syntax_TextBox = PS["Text.Markdown.SlamDown.Syntax.TextBox"];        
  var InlineLink = (function () {
      function InlineLink(value0) {
          this.value0 = value0;
      };
      InlineLink.create = function (value0) {
          return new InlineLink(value0);
      };
      return InlineLink;
  })();
  var ReferenceLink = (function () {
      function ReferenceLink(value0) {
          this.value0 = value0;
      };
      ReferenceLink.create = function (value0) {
          return new ReferenceLink(value0);
      };
      return ReferenceLink;
  })();
  var Str = (function () {
      function Str(value0) {
          this.value0 = value0;
      };
      Str.create = function (value0) {
          return new Str(value0);
      };
      return Str;
  })();
  var Entity = (function () {
      function Entity(value0) {
          this.value0 = value0;
      };
      Entity.create = function (value0) {
          return new Entity(value0);
      };
      return Entity;
  })();
  var Space = (function () {
      function Space() {

      };
      Space.value = new Space();
      return Space;
  })();
  var SoftBreak = (function () {
      function SoftBreak() {

      };
      SoftBreak.value = new SoftBreak();
      return SoftBreak;
  })();
  var LineBreak = (function () {
      function LineBreak() {

      };
      LineBreak.value = new LineBreak();
      return LineBreak;
  })();
  var Emph = (function () {
      function Emph(value0) {
          this.value0 = value0;
      };
      Emph.create = function (value0) {
          return new Emph(value0);
      };
      return Emph;
  })();
  var Strong = (function () {
      function Strong(value0) {
          this.value0 = value0;
      };
      Strong.create = function (value0) {
          return new Strong(value0);
      };
      return Strong;
  })();
  var Code = (function () {
      function Code(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Code.create = function (value0) {
          return function (value1) {
              return new Code(value0, value1);
          };
      };
      return Code;
  })();
  var Link = (function () {
      function Link(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Link.create = function (value0) {
          return function (value1) {
              return new Link(value0, value1);
          };
      };
      return Link;
  })();
  var Image = (function () {
      function Image(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Image.create = function (value0) {
          return function (value1) {
              return new Image(value0, value1);
          };
      };
      return Image;
  })();
  var FormField = (function () {
      function FormField(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      FormField.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new FormField(value0, value1, value2);
              };
          };
      };
      return FormField;
  })();
  exports["Str"] = Str;
  exports["Entity"] = Entity;
  exports["Space"] = Space;
  exports["SoftBreak"] = SoftBreak;
  exports["LineBreak"] = LineBreak;
  exports["Emph"] = Emph;
  exports["Strong"] = Strong;
  exports["Code"] = Code;
  exports["Link"] = Link;
  exports["Image"] = Image;
  exports["FormField"] = FormField;
  exports["InlineLink"] = InlineLink;
  exports["ReferenceLink"] = ReferenceLink;
})(PS["Text.Markdown.SlamDown.Syntax.Inline"] = PS["Text.Markdown.SlamDown.Syntax.Inline"] || {});
(function(exports) {
  // Generated by purs version 0.11.3
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad_Free = PS["Control.Monad.Free"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_List = PS["Data.List"];
  var Data_List_Types = PS["Data.List.Types"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];
  var Prelude = PS["Prelude"];
  var Test_StrongCheck_Arbitrary = PS["Test.StrongCheck.Arbitrary"];
  var Test_StrongCheck_Gen = PS["Test.StrongCheck.Gen"];
  var Text_Markdown_SlamDown_Syntax_Inline = PS["Text.Markdown.SlamDown.Syntax.Inline"];        
  var Bullet = (function () {
      function Bullet(value0) {
          this.value0 = value0;
      };
      Bullet.create = function (value0) {
          return new Bullet(value0);
      };
      return Bullet;
  })();
  var Ordered = (function () {
      function Ordered(value0) {
          this.value0 = value0;
      };
      Ordered.create = function (value0) {
          return new Ordered(value0);
      };
      return Ordered;
  })();
  var Indented = (function () {
      function Indented() {

      };
      Indented.value = new Indented();
      return Indented;
  })();
  var Fenced = (function () {
      function Fenced(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Fenced.create = function (value0) {
          return function (value1) {
              return new Fenced(value0, value1);
          };
      };
      return Fenced;
  })();
  var Paragraph = (function () {
      function Paragraph(value0) {
          this.value0 = value0;
      };
      Paragraph.create = function (value0) {
          return new Paragraph(value0);
      };
      return Paragraph;
  })();
  var Header = (function () {
      function Header(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Header.create = function (value0) {
          return function (value1) {
              return new Header(value0, value1);
          };
      };
      return Header;
  })();
  var Blockquote = (function () {
      function Blockquote(value0) {
          this.value0 = value0;
      };
      Blockquote.create = function (value0) {
          return new Blockquote(value0);
      };
      return Blockquote;
  })();
  var Lst = (function () {
      function Lst(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Lst.create = function (value0) {
          return function (value1) {
              return new Lst(value0, value1);
          };
      };
      return Lst;
  })();
  var CodeBlock = (function () {
      function CodeBlock(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      CodeBlock.create = function (value0) {
          return function (value1) {
              return new CodeBlock(value0, value1);
          };
      };
      return CodeBlock;
  })();
  var LinkReference = (function () {
      function LinkReference(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      LinkReference.create = function (value0) {
          return function (value1) {
              return new LinkReference(value0, value1);
          };
      };
      return LinkReference;
  })();
  var Rule = (function () {
      function Rule() {

      };
      Rule.value = new Rule();
      return Rule;
  })();
  var eqListType = new Data_Eq.Eq(function (x) {
      return function (y) {
          if (x instanceof Bullet && y instanceof Bullet) {
              return x.value0 === y.value0;
          };
          if (x instanceof Ordered && y instanceof Ordered) {
              return x.value0 === y.value0;
          };
          return false;
      };
  });
  exports["Paragraph"] = Paragraph;
  exports["Header"] = Header;
  exports["Blockquote"] = Blockquote;
  exports["Lst"] = Lst;
  exports["CodeBlock"] = CodeBlock;
  exports["LinkReference"] = LinkReference;
  exports["Rule"] = Rule;
  exports["Indented"] = Indented;
  exports["Fenced"] = Fenced;
  exports["Bullet"] = Bullet;
  exports["Ordered"] = Ordered;
  exports["eqListType"] = eqListType;
})(PS["Text.Markdown.SlamDown.Syntax.Block"] = PS["Text.Markdown.SlamDown.Syntax.Block"] || {});
(function(exports) {
  // Generated by purs version 0.11.3
  "use strict";
  var Control_Monad_Free = PS["Control.Monad.Free"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Functor = PS["Data.Functor"];
  var Data_List = PS["Data.List"];
  var Data_List_Types = PS["Data.List.Types"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];
  var Prelude = PS["Prelude"];
  var Test_StrongCheck_Arbitrary = PS["Test.StrongCheck.Arbitrary"];
  var Test_StrongCheck_Gen = PS["Test.StrongCheck.Gen"];
  var Text_Markdown_SlamDown_Syntax_Block = PS["Text.Markdown.SlamDown.Syntax.Block"];
  var Text_Markdown_SlamDown_Syntax_FormField = PS["Text.Markdown.SlamDown.Syntax.FormField"];
  var Text_Markdown_SlamDown_Syntax_Inline = PS["Text.Markdown.SlamDown.Syntax.Inline"];        
  var SlamDown = (function () {
      function SlamDown(value0) {
          this.value0 = value0;
      };
      SlamDown.create = function (value0) {
          return new SlamDown(value0);
      };
      return SlamDown;
  })();
  exports["SlamDown"] = SlamDown;
})(PS["Text.Markdown.SlamDown.Syntax"] = PS["Text.Markdown.SlamDown.Syntax"] || {});
(function(exports) {
  // Generated by purs version 0.11.3
  "use strict";
  var Control_Alt = PS["Control.Alt"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Category = PS["Control.Category"];
  var Control_Lazy = PS["Control.Lazy"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Array = PS["Data.Array"];
  var Data_Bifunctor = PS["Data.Bifunctor"];
  var Data_Boolean = PS["Data.Boolean"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_Const = PS["Data.Const"];
  var Data_Date = PS["Data.Date"];
  var Data_Date_Component = PS["Data.Date.Component"];
  var Data_DateTime = PS["Data.DateTime"];
  var Data_Either = PS["Data.Either"];
  var Data_Enum = PS["Data.Enum"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Functor_Compose = PS["Data.Functor.Compose"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_HugeNum = PS["Data.HugeNum"];
  var Data_Identity = PS["Data.Identity"];
  var Data_Int = PS["Data.Int"];
  var Data_List = PS["Data.List"];
  var Data_List_Types = PS["Data.List.Types"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_String = PS["Data.String"];
  var Data_Time = PS["Data.Time"];
  var Data_Time_Component = PS["Data.Time.Component"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unit = PS["Data.Unit"];
  var Data_Validation_Semigroup = PS["Data.Validation.Semigroup"];
  var Prelude = PS["Prelude"];
  var Text_Markdown_SlamDown_Parser_Utils = PS["Text.Markdown.SlamDown.Parser.Utils"];
  var Text_Markdown_SlamDown_Syntax = PS["Text.Markdown.SlamDown.Syntax"];
  var Text_Markdown_SlamDown_Syntax_FormField = PS["Text.Markdown.SlamDown.Syntax.FormField"];
  var Text_Markdown_SlamDown_Syntax_Inline = PS["Text.Markdown.SlamDown.Syntax.Inline"];
  var Text_Markdown_SlamDown_Syntax_TextBox = PS["Text.Markdown.SlamDown.Syntax.TextBox"];
  var Text_Markdown_SlamDown_Syntax_Value = PS["Text.Markdown.SlamDown.Syntax.Value"];
  var Text_Parsing_Parser = PS["Text.Parsing.Parser"];
  var Text_Parsing_Parser_Combinators = PS["Text.Parsing.Parser.Combinators"];
  var Text_Parsing_Parser_String = PS["Text.Parsing.Parser.String"];
  var someOf = function ($186) {
      return Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(function ($187) {
          return Data_String.fromCharArray(Data_Array.fromFoldable(Data_List_Types.foldableList)($187));
      })(Data_List.some(Text_Parsing_Parser.alternativeParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser.lazyParserT)(Text_Parsing_Parser_String.satisfy(Text_Parsing_Parser_String.stringLikeString)(Data_Identity.monadIdentity)($186)));
  };
  var unevaluated = Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_String.string(Text_Parsing_Parser_String.stringLikeString)(Data_Identity.monadIdentity)("!"))(function (v) {
      return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(someOf(function (x) {
          return Data_String.singleton(x) === "`";
      }))(function (v1) {
          return Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(function ($188) {
              return Text_Markdown_SlamDown_Syntax_FormField.Unevaluated.create(Data_String.fromCharArray(Data_Array.fromFoldable(Data_List_Types.foldableList)($188)));
          })(Text_Parsing_Parser_Combinators.manyTill(Data_Identity.monadIdentity)(Text_Parsing_Parser_String.anyChar(Text_Parsing_Parser_String.stringLikeString)(Data_Identity.monadIdentity))(Text_Parsing_Parser_String.string(Text_Parsing_Parser_String.stringLikeString)(Data_Identity.monadIdentity)(v1)));
      });
  });
  var manyOf = function ($189) {
      return Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(function ($190) {
          return Data_String.fromCharArray(Data_Array.fromFoldable(Data_List_Types.foldableList)($190));
      })(Data_List.many(Text_Parsing_Parser.alternativeParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser.lazyParserT)(Text_Parsing_Parser_String.satisfy(Text_Parsing_Parser_String.stringLikeString)(Data_Identity.monadIdentity)($189)));
  };
  var hash = Data_Functor["void"](Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(Text_Parsing_Parser_String.string(Text_Parsing_Parser_String.stringLikeString)(Data_Identity.monadIdentity)("#"));
  var expr = function (f) {
      return function (p) {
          return Control_Alt.alt(Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_Combinators["try"](Data_Identity.monadIdentity)(f(unevaluated)))(Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(Text_Markdown_SlamDown_Syntax_FormField.Literal.create)(p));
      };
  };
  var dot = Data_Functor["void"](Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(Text_Parsing_Parser_String.string(Text_Parsing_Parser_String.stringLikeString)(Data_Identity.monadIdentity)("."));
  var dash = Data_Functor["void"](Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(Text_Parsing_Parser_String.string(Text_Parsing_Parser_String.stringLikeString)(Data_Identity.monadIdentity)("-"));
  var consolidate = function (xs) {
      if (xs instanceof Data_List_Types.Nil) {
          return Data_List_Types.Nil.value;
      };
      if (xs instanceof Data_List_Types.Cons && (xs.value0 instanceof Text_Markdown_SlamDown_Syntax_Inline.Str && (xs.value1 instanceof Data_List_Types.Cons && xs.value1.value0 instanceof Text_Markdown_SlamDown_Syntax_Inline.Str))) {
          return consolidate(new Data_List_Types.Cons(new Text_Markdown_SlamDown_Syntax_Inline.Str(xs.value0.value0 + xs.value1.value0.value0), xs.value1.value1));
      };
      if (xs instanceof Data_List_Types.Cons) {
          return Data_List_Types.Cons.create(xs.value0)(consolidate(xs.value1));
      };
      throw new Error("Failed pattern match at Text.Markdown.SlamDown.Parser.Inline line 52, column 3 - line 56, column 44: " + [ xs.constructor.name ]);
  };
  var colon = Data_Functor["void"](Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(Text_Parsing_Parser_String.string(Text_Parsing_Parser_String.stringLikeString)(Data_Identity.monadIdentity)(":"));
  var parseTextBox = function (isPlainText) {
      return function (eta) {
          return function (template) {
              var parsePlainTextValue = manyOf(isPlainText);
              var digit = Text_Parsing_Parser_String.oneOf(Text_Parsing_Parser_String.stringLikeString)(Data_Identity.monadIdentity)([ "0", "1", "2", "3", "4", "5", "6", "7", "8", "9" ]);
              var digitN = Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(digit)(function (v) {
                  return Data_Maybe.maybe(Text_Parsing_Parser.fail(Data_Identity.monadIdentity)("Failed parsing digit"))(Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity)))(Data_Int.fromString(Data_String.fromCharArray(Control_Applicative.pure(Control_Applicative.applicativeArray)(v))));
              });
              var parseYear = Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(digitN)(function (v) {
                  return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(digitN)(function (v1) {
                      return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(digitN)(function (v2) {
                          return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(digitN)(function (v3) {
                              return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))((((1000 * v | 0) + (100 * v1 | 0) | 0) + (10 * v2 | 0) | 0) + v3 | 0);
                          });
                      });
                  });
              });
              var digits = Data_Functor.mapFlipped(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(Data_List.some(Text_Parsing_Parser.alternativeParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser.lazyParserT)(digit))(function ($191) {
                  return Data_String.fromCharArray(Data_Array.fromFoldable(Data_List_Types.foldableList)($191));
              });
              var natural = Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(digits)(function (v) {
                  return Data_Maybe.maybe(Text_Parsing_Parser.fail(Data_Identity.monadIdentity)("Failed parsing natural"))(Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity)))(Data_Int.fromString(v));
              });
              var parseDateValue = Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(parseYear)(function (v) {
                  return Control_Bind.discard(Control_Bind.discardUnit)(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Text_Markdown_SlamDown_Parser_Utils.skipSpaces)(dash))(Text_Markdown_SlamDown_Parser_Utils.skipSpaces))(function () {
                      return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(natural)(function (v1) {
                          return Control_Bind.discard(Control_Bind.discardUnit)(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Control_Applicative.when(Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))(v1 > 12)(Text_Parsing_Parser.fail(Data_Identity.monadIdentity)("Invalid month")))(function () {
                              return Control_Bind.discard(Control_Bind.discardUnit)(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Text_Markdown_SlamDown_Parser_Utils.skipSpaces)(dash))(Text_Markdown_SlamDown_Parser_Utils.skipSpaces))(function () {
                                  return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(natural)(function (v2) {
                                      return Control_Bind.discard(Control_Bind.discardUnit)(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Control_Applicative.when(Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))(v2 > 31)(Text_Parsing_Parser.fail(Data_Identity.monadIdentity)("Invalid day")))(function () {
                                          var v3 = Control_Apply.apply(Data_Maybe.applyMaybe)(Control_Apply.apply(Data_Maybe.applyMaybe)(Data_Functor.map(Data_Maybe.functorMaybe)(Data_Date.canonicalDate)(Data_Enum.toEnum(Data_Date_Component.boundedEnumYear)(v)))(Data_Enum.toEnum(Data_Date_Component.boundedEnumMonth)(v1)))(Data_Enum.toEnum(Data_Date_Component.boundedEnumDay)(v2));
                                          if (v3 instanceof Data_Maybe.Nothing) {
                                              return Text_Parsing_Parser.fail(Data_Identity.monadIdentity)("Invalid date");
                                          };
                                          if (v3 instanceof Data_Maybe.Just) {
                                              return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))(v3.value0);
                                          };
                                          throw new Error("Failed pattern match at Text.Markdown.SlamDown.Parser.Inline line 440, column 7 - line 442, column 28: " + [ v3.constructor.name ]);
                                      });
                                  });
                              });
                          });
                      });
                  });
              });
              var parseTimeValue = function (prec) {
                  return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(natural)(function (v) {
                      return Control_Bind.discard(Control_Bind.discardUnit)(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Control_Applicative.when(Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))(v > 23)(Text_Parsing_Parser.fail(Data_Identity.monadIdentity)("Invalid hours")))(function () {
                          return Control_Bind.discard(Control_Bind.discardUnit)(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Text_Markdown_SlamDown_Parser_Utils.skipSpaces)(colon))(Text_Markdown_SlamDown_Parser_Utils.skipSpaces))(function () {
                              return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(natural)(function (v1) {
                                  return Control_Bind.discard(Control_Bind.discardUnit)(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Control_Applicative.when(Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))(v1 > 59)(Text_Parsing_Parser.fail(Data_Identity.monadIdentity)("Invalid minutes")))(function () {
                                      return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))((function () {
                                          if (prec instanceof Text_Markdown_SlamDown_Syntax_TextBox.Minutes) {
                                              return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_Combinators["try"](Data_Identity.monadIdentity)(Text_Parsing_Parser_Combinators.optionMaybe(Data_Identity.monadIdentity)(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Text_Markdown_SlamDown_Parser_Utils.skipSpaces)(colon))))(function (v2) {
                                                  return Control_Bind.discard(Control_Bind.discardUnit)(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Control_Applicative.when(Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))(Data_Maybe.isJust(v2))(Text_Parsing_Parser.fail(Data_Identity.monadIdentity)("Unexpected seconds component")))(function () {
                                                      return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))(Data_Maybe.Nothing.value);
                                                  });
                                              });
                                          };
                                          if (prec instanceof Text_Markdown_SlamDown_Syntax_TextBox.Seconds) {
                                              return Control_Bind.discard(Control_Bind.discardUnit)(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Text_Markdown_SlamDown_Parser_Utils.skipSpaces)(colon))(Text_Markdown_SlamDown_Parser_Utils.skipSpaces))(function () {
                                                  return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(natural)(function (v2) {
                                                      return Control_Bind.discard(Control_Bind.discardUnit)(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Control_Applicative.when(Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))(v2 > 59)(Text_Parsing_Parser.fail(Data_Identity.monadIdentity)("Invalid seconds")))(function () {
                                                          return Control_Bind.discard(Control_Bind.discardUnit)(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Text_Markdown_SlamDown_Parser_Utils.skipSpaces)(function () {
                                                              return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))(new Data_Maybe.Just(v2));
                                                          });
                                                      });
                                                  });
                                              });
                                          };
                                          throw new Error("Failed pattern match at Text.Markdown.SlamDown.Parser.Inline line 451, column 17 - line 461, column 29: " + [ prec.constructor.name ]);
                                      })())(function (v2) {
                                          return Control_Bind.discard(Control_Bind.discardUnit)(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Text_Markdown_SlamDown_Parser_Utils.skipSpaces)(function () {
                                              return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_Combinators.optionMaybe(Data_Identity.monadIdentity)(Control_Alt.alt(Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(Data_Functor.voidRight(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(false)(Control_Alt.alt(Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_String.string(Text_Parsing_Parser_String.stringLikeString)(Data_Identity.monadIdentity)("PM"))(Text_Parsing_Parser_String.string(Text_Parsing_Parser_String.stringLikeString)(Data_Identity.monadIdentity)("pm"))))(Data_Functor.voidRight(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(true)(Control_Alt.alt(Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_String.string(Text_Parsing_Parser_String.stringLikeString)(Data_Identity.monadIdentity)("AM"))(Text_Parsing_Parser_String.string(Text_Parsing_Parser_String.stringLikeString)(Data_Identity.monadIdentity)("am"))))))(function (v3) {
                                                  var hours$prime = (function () {
                                                      if (v3 instanceof Data_Maybe.Nothing) {
                                                          return v;
                                                      };
                                                      if (v3 instanceof Data_Maybe.Just) {
                                                          var $111 = !v3.value0 && v < 12;
                                                          if ($111) {
                                                              return v + 12 | 0;
                                                          };
                                                          var $112 = v3.value0 && v === 12;
                                                          if ($112) {
                                                              return 0;
                                                          };
                                                          return v;
                                                      };
                                                      throw new Error("Failed pattern match at Text.Markdown.SlamDown.Parser.Inline line 468, column 13 - line 475, column 27: " + [ v3.constructor.name ]);
                                                  })();
                                                  var v4 = Control_Apply.apply(Data_Maybe.applyMaybe)(Control_Apply.apply(Data_Maybe.applyMaybe)(Control_Apply.apply(Data_Maybe.applyMaybe)(Data_Functor.map(Data_Maybe.functorMaybe)(Data_Time.Time.create)(Data_Enum.toEnum(Data_Time_Component.boundedEnumHour)(hours$prime)))(Data_Enum.toEnum(Data_Time_Component.boundedEnumMinute)(v1)))(Data_Enum.toEnum(Data_Time_Component.boundedEnumSecond)(Data_Maybe.fromMaybe(0)(v2))))(Control_Applicative.pure(Data_Maybe.applicativeMaybe)(Data_Bounded.bottom(Data_Time_Component.boundedMillisecond)));
                                                  if (v4 instanceof Data_Maybe.Nothing) {
                                                      return Text_Parsing_Parser.fail(Data_Identity.monadIdentity)("Invalid time");
                                                  };
                                                  if (v4 instanceof Data_Maybe.Just) {
                                                      return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))(v4.value0);
                                                  };
                                                  throw new Error("Failed pattern match at Text.Markdown.SlamDown.Parser.Inline line 476, column 7 - line 478, column 26: " + [ v4.constructor.name ]);
                                              });
                                          });
                                      });
                                  });
                              });
                          });
                      });
                  });
              };
              var parseDateTimeValue = function (prec) {
                  return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(parseDateValue)(function (v) {
                      return Control_Bind.discard(Control_Bind.discardUnit)(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Control_Alt.alt(Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_Combinators["try"](Data_Identity.monadIdentity)(Data_Functor["void"](Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(Text_Parsing_Parser_String.string(Text_Parsing_Parser_String.stringLikeString)(Data_Identity.monadIdentity)("T"))))(Text_Markdown_SlamDown_Parser_Utils.skipSpaces))(function () {
                          return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(parseTimeValue(prec))(function (v1) {
                              return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))(new Data_DateTime.DateTime(v, v1));
                          });
                      });
                  });
              };
              var parseNumericValue = Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Control_Alt.alt(Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_Combinators["try"](Data_Identity.monadIdentity)(Data_Functor.voidRight(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(-1 | 0)(Text_Parsing_Parser_String["char"](Text_Parsing_Parser_String.stringLikeString)(Data_Identity.monadIdentity)("-"))))(Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))(1)))(function (v) {
                  return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(digits)(function (v1) {
                      return Control_Bind.discard(Control_Bind.discardUnit)(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Text_Markdown_SlamDown_Parser_Utils.skipSpaces)(function () {
                          return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_Combinators.optionMaybe(Data_Identity.monadIdentity)(dot))(function (v2) {
                              return Control_Bind.discard(Control_Bind.discardUnit)(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Text_Markdown_SlamDown_Parser_Utils.skipSpaces)(function () {
                                  return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))((function () {
                                      if (v2 instanceof Data_Maybe.Just) {
                                          return Text_Parsing_Parser_Combinators.optionMaybe(Data_Identity.monadIdentity)(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Text_Markdown_SlamDown_Parser_Utils.skipSpaces)(digits));
                                      };
                                      if (v2 instanceof Data_Maybe.Nothing) {
                                          return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))(Data_Maybe.Nothing.value);
                                      };
                                      throw new Error("Failed pattern match at Text.Markdown.SlamDown.Parser.Inline line 488, column 9 - line 492, column 27: " + [ v2.constructor.name ]);
                                  })())(function (v3) {
                                      return Data_Maybe.maybe(Text_Parsing_Parser.fail(Data_Identity.monadIdentity)("Failed parsing decimal"))(Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity)))(Data_HugeNum.fromString(v1 + ("." + Data_Maybe.fromMaybe("")(v3))));
                                  });
                              });
                          });
                      });
                  });
              });
              if (template instanceof Text_Markdown_SlamDown_Syntax_TextBox.DateTime) {
                  return Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(Text_Markdown_SlamDown_Syntax_TextBox.DateTime.create(template.value0))(eta(parseDateTimeValue(template.value0)));
              };
              if (template instanceof Text_Markdown_SlamDown_Syntax_TextBox["Date"]) {
                  return Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(Text_Markdown_SlamDown_Syntax_TextBox["Date"].create)(eta(parseDateValue));
              };
              if (template instanceof Text_Markdown_SlamDown_Syntax_TextBox.Time) {
                  return Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(Text_Markdown_SlamDown_Syntax_TextBox.Time.create(template.value0))(eta(parseTimeValue(template.value0)));
              };
              if (template instanceof Text_Markdown_SlamDown_Syntax_TextBox.Numeric) {
                  return Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(Text_Markdown_SlamDown_Syntax_TextBox.Numeric.create)(eta(parseNumericValue));
              };
              if (template instanceof Text_Markdown_SlamDown_Syntax_TextBox.PlainText) {
                  return Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(Text_Markdown_SlamDown_Syntax_TextBox.PlainText.create)(eta(parsePlainTextValue));
              };
              throw new Error("Failed pattern match at Text.Markdown.SlamDown.Parser.Inline line 416, column 3 - line 421, column 62: " + [ template.constructor.name ]);
          };
      };
  };
  var inlines = function (dictValue) {
      var space = (function () {
          var toSpace = function (cs) {
              if (Data_Foldable.elem(Data_List_Types.foldableList)(Data_Eq.eqString)("\x0a")(cs)) {
                  var v = Data_List.take(2)(cs);
                  if (v instanceof Data_List_Types.Cons && (v.value0 === " " && (v.value1 instanceof Data_List_Types.Cons && (v.value1.value0 === " " && v.value1.value1 instanceof Data_List_Types.Nil)))) {
                      return Text_Markdown_SlamDown_Syntax_Inline.LineBreak.value;
                  };
                  return Text_Markdown_SlamDown_Syntax_Inline.SoftBreak.value;
              };
              if (Data_Boolean.otherwise) {
                  return Text_Markdown_SlamDown_Syntax_Inline.Space.value;
              };
              throw new Error("Failed pattern match at Text.Markdown.SlamDown.Parser.Inline line 192, column 5 - line 197, column 29: " + [ cs.constructor.name ]);
          };
          return Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(function ($192) {
              return toSpace((function (v) {
                  return Data_Functor.map(Data_List_Types.functorList)(Data_String.singleton)(v);
              })($192));
          })(Data_List.some(Text_Parsing_Parser.alternativeParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser.lazyParserT)(Text_Parsing_Parser_String.satisfy(Text_Parsing_Parser_String.stringLikeString)(Data_Identity.monadIdentity)(Text_Markdown_SlamDown_Parser_Utils.isWhitespace)));
      })();
      var other = Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(Data_String.singleton)(Text_Parsing_Parser_String.anyChar(Text_Parsing_Parser_String.stringLikeString)(Data_Identity.monadIdentity)))(function (v) {
          var $139 = v === "\\";
          if ($139) {
              return Control_Alt.alt(Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(Control_Alt.alt(Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(function ($193) {
                  return Text_Markdown_SlamDown_Syntax_Inline.Str.create(Data_String.singleton($193));
              })(Text_Parsing_Parser_String.anyChar(Text_Parsing_Parser_String.stringLikeString)(Data_Identity.monadIdentity)))(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_String.satisfy(Text_Parsing_Parser_String.stringLikeString)(Data_Identity.monadIdentity)(function (x) {
                  return Data_String.singleton(x) === "\x0a";
              }))(Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))(Text_Markdown_SlamDown_Syntax_Inline.LineBreak.value))))(Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))(new Text_Markdown_SlamDown_Syntax_Inline.Str("\\")));
          };
          return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))(new Text_Markdown_SlamDown_Syntax_Inline.Str(v));
      });
      var isAlphaNum = function (c) {
          var s = Data_String.singleton(c);
          return s >= "a" && s <= "z" || (s >= "A" && s <= "Z" || s >= "0" && s <= "9");
      };
      var formElement = (function () {
          var und = someOf(function (x) {
              return x === "_";
          });
          var radioButtons = (function () {
              var literalRadioButtons = Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Data_List.some(Text_Parsing_Parser.alternativeParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser.lazyParserT)(Text_Parsing_Parser_Combinators["try"](Data_Identity.monadIdentity)((function () {
                  var item = Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(function ($194) {
                      return Text_Markdown_SlamDown_Syntax_Value.stringValue(dictValue)(Data_String.trim($194));
                  })(manyOf(function (c) {
                      return !Data_Foldable.elem(Data_Foldable.foldableArray)(Data_Eq.eqChar)(c)([ "(", ")", "!", "`" ]);
                  }));
                  return Control_Bind.discard(Control_Bind.discardUnit)(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Text_Markdown_SlamDown_Parser_Utils.skipSpaces)(function () {
                      return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Control_Alt.alt(Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_String.string(Text_Parsing_Parser_String.stringLikeString)(Data_Identity.monadIdentity)("(x)"))(Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))(true)))(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_String.string(Text_Parsing_Parser_String.stringLikeString)(Data_Identity.monadIdentity)("()"))(Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))(false))))(function (v) {
                          return Control_Bind.discard(Control_Bind.discardUnit)(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Text_Markdown_SlamDown_Parser_Utils.skipSpaces)(function () {
                              return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(item)(function (v1) {
                                  return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))(new Data_Tuple.Tuple(v, v1));
                              });
                          });
                      });
                  });
              })())))(function (v) {
                  return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))((function () {
                      var v1 = Data_List.filter(Data_Tuple.fst)(v);
                      if (v1 instanceof Data_List_Types.Cons && v1.value1 instanceof Data_List_Types.Nil) {
                          return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))(v1.value0.value1);
                      };
                      return Text_Parsing_Parser.fail(Data_Identity.monadIdentity)("Invalid number of selected radio buttons");
                  })())(function (v1) {
                      return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))(new Text_Markdown_SlamDown_Syntax_FormField.RadioButtons(new Text_Markdown_SlamDown_Syntax_FormField.Literal(v1), new Text_Markdown_SlamDown_Syntax_FormField.Literal(Data_Functor.map(Data_List_Types.functorList)(Data_Tuple.snd)(v))));
                  });
              });
              var evaluatedRadioButtons = Control_Apply.apply(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(Text_Markdown_SlamDown_Syntax_FormField.RadioButtons.create)(Text_Markdown_SlamDown_Parser_Utils.parens(unevaluated)))(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Text_Markdown_SlamDown_Parser_Utils.skipSpaces)(unevaluated));
              return Control_Alt.alt(Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(literalRadioButtons)(evaluatedRadioButtons);
          })();
          var parseTextBoxTemplate = (function () {
              var parseTimeTemplate = function (prec) {
                  return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(und)(function (v) {
                      return Control_Bind.discard(Control_Bind.discardUnit)(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Text_Markdown_SlamDown_Parser_Utils.skipSpaces)(colon))(Text_Markdown_SlamDown_Parser_Utils.skipSpaces))(function () {
                          return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(und)(function (v1) {
                              return Control_Applicative.when(Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))(Data_Eq.eq(Text_Markdown_SlamDown_Syntax_TextBox.eqTimePrecision)(prec)(Text_Markdown_SlamDown_Syntax_TextBox.Seconds.value))(Control_Bind.discard(Control_Bind.discardUnit)(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Text_Markdown_SlamDown_Parser_Utils.skipSpaces)(colon))(Text_Markdown_SlamDown_Parser_Utils.skipSpaces))(function () {
                                  return Data_Functor["void"](Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(und);
                              }));
                          });
                      });
                  });
              };
              var parseNumericTemplate = Control_Bind.discard(Control_Bind.discardUnit)(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(hash)(function () {
                  return und;
              });
              var parseDateTemplate = Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(und)(function (v) {
                  return Control_Bind.discard(Control_Bind.discardUnit)(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Text_Markdown_SlamDown_Parser_Utils.skipSpaces)(dash))(Text_Markdown_SlamDown_Parser_Utils.skipSpaces))(function () {
                      return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(und)(function (v1) {
                          return Control_Bind.discard(Control_Bind.discardUnit)(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Text_Markdown_SlamDown_Parser_Utils.skipSpaces)(dash))(Text_Markdown_SlamDown_Parser_Utils.skipSpaces))(function () {
                              return und;
                          });
                      });
                  });
              });
              var parseDateTimeTemplate = function (prec) {
                  return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(parseDateTemplate)(function (v) {
                      return Control_Bind.discard(Control_Bind.discardUnit)(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Text_Markdown_SlamDown_Parser_Utils.skipSpaces)(function () {
                          return parseTimeTemplate(prec);
                      });
                  });
              };
              return Control_Alt.alt(Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(Control_Alt.alt(Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(Control_Alt.alt(Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(Control_Alt.alt(Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(Control_Alt.alt(Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(Control_Alt.alt(Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(Data_Functor.voidRight(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(new Text_Markdown_SlamDown_Syntax_TextBox.DateTime(Text_Markdown_SlamDown_Syntax_TextBox.Seconds.value, Data_Unit.unit))(Text_Parsing_Parser_Combinators["try"](Data_Identity.monadIdentity)(parseDateTimeTemplate(Text_Markdown_SlamDown_Syntax_TextBox.Seconds.value))))(Data_Functor.voidRight(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(new Text_Markdown_SlamDown_Syntax_TextBox.DateTime(Text_Markdown_SlamDown_Syntax_TextBox.Minutes.value, Data_Unit.unit))(Text_Parsing_Parser_Combinators["try"](Data_Identity.monadIdentity)(parseDateTimeTemplate(Text_Markdown_SlamDown_Syntax_TextBox.Minutes.value)))))(Data_Functor.voidRight(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(new Text_Markdown_SlamDown_Syntax_TextBox["Date"](Data_Unit.unit))(Text_Parsing_Parser_Combinators["try"](Data_Identity.monadIdentity)(parseDateTemplate))))(Data_Functor.voidRight(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(new Text_Markdown_SlamDown_Syntax_TextBox.Time(Text_Markdown_SlamDown_Syntax_TextBox.Seconds.value, Data_Unit.unit))(Text_Parsing_Parser_Combinators["try"](Data_Identity.monadIdentity)(parseTimeTemplate(Text_Markdown_SlamDown_Syntax_TextBox.Seconds.value)))))(Data_Functor.voidRight(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(new Text_Markdown_SlamDown_Syntax_TextBox.Time(Text_Markdown_SlamDown_Syntax_TextBox.Minutes.value, Data_Unit.unit))(Text_Parsing_Parser_Combinators["try"](Data_Identity.monadIdentity)(parseTimeTemplate(Text_Markdown_SlamDown_Syntax_TextBox.Minutes.value)))))(Data_Functor.voidRight(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(new Text_Markdown_SlamDown_Syntax_TextBox.Numeric(Data_Unit.unit))(Text_Parsing_Parser_Combinators["try"](Data_Identity.monadIdentity)(parseNumericTemplate))))(Data_Functor.voidRight(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(new Text_Markdown_SlamDown_Syntax_TextBox.PlainText(Data_Unit.unit))(und));
          })();
          var textBox = Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(parseTextBoxTemplate)(function (v) {
              return Control_Bind.discard(Control_Bind.discardUnit)(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Text_Markdown_SlamDown_Parser_Utils.skipSpaces)(function () {
                  return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_Combinators.optionMaybe(Data_Identity.monadIdentity)(Text_Parsing_Parser_String.string(Text_Parsing_Parser_String.stringLikeString)(Data_Identity.monadIdentity)("(")))(function (v1) {
                      if (v1 instanceof Data_Maybe.Nothing) {
                          return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))(Data_Either.Right.create(Text_Markdown_SlamDown_Syntax_FormField.TextBox.create(Text_Markdown_SlamDown_Syntax_TextBox.transTextBox(Data_Function["const"](Data_Maybe.Nothing.value))(v))));
                      };
                      if (v1 instanceof Data_Maybe.Just) {
                          return Control_Bind.discard(Control_Bind.discardUnit)(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Text_Markdown_SlamDown_Parser_Utils.skipSpaces)(function () {
                              return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_Combinators.optionMaybe(Data_Identity.monadIdentity)(Text_Parsing_Parser_Combinators["try"](Data_Identity.monadIdentity)(parseTextBox(function (v2) {
                                  return v2 !== ")";
                              })(expr(Control_Category.id(Control_Category.categoryFn)))(v))))(function (v2) {
                                  if (v2 instanceof Data_Maybe.Just) {
                                      return Control_Bind.discard(Control_Bind.discardUnit)(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Text_Markdown_SlamDown_Parser_Utils.skipSpaces)(function () {
                                          return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_String.string(Text_Parsing_Parser_String.stringLikeString)(Data_Identity.monadIdentity)(")"))(function (v3) {
                                              return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))(Data_Either.Right.create(Text_Markdown_SlamDown_Syntax_FormField.TextBox.create(Text_Markdown_SlamDown_Syntax_TextBox.transTextBox(function ($195) {
                                                  return Data_Functor_Compose.Compose(Data_Maybe.Just.create($195));
                                              })(v2.value0))));
                                          });
                                      });
                                  };
                                  if (v2 instanceof Data_Maybe.Nothing) {
                                      return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))(new Data_Either.Left((function () {
                                          if (v instanceof Text_Markdown_SlamDown_Syntax_TextBox.DateTime && v.value0 instanceof Text_Markdown_SlamDown_Syntax_TextBox.Minutes) {
                                              return "Invalid datetime default value, please use \"YYYY-MM-DD HH:mm\" format";
                                          };
                                          if (v instanceof Text_Markdown_SlamDown_Syntax_TextBox.DateTime && v.value0 instanceof Text_Markdown_SlamDown_Syntax_TextBox.Seconds) {
                                              return "Invalid datetime default value, please use \"YYYY-MM-DD HH:mm:ss\" format";
                                          };
                                          if (v instanceof Text_Markdown_SlamDown_Syntax_TextBox["Date"]) {
                                              return "Invalid date default value, please use \"YYYY-MM-DD\" format";
                                          };
                                          if (v instanceof Text_Markdown_SlamDown_Syntax_TextBox.Time && v.value0 instanceof Text_Markdown_SlamDown_Syntax_TextBox.Minutes) {
                                              return "Invalid time default value, please use \"HH:mm\" format";
                                          };
                                          if (v instanceof Text_Markdown_SlamDown_Syntax_TextBox.Time && v.value0 instanceof Text_Markdown_SlamDown_Syntax_TextBox.Seconds) {
                                              return "Invalid time default value, please use \"HH:mm:ss\" format";
                                          };
                                          if (v instanceof Text_Markdown_SlamDown_Syntax_TextBox.Numeric) {
                                              return "Invalid numeric default value";
                                          };
                                          if (v instanceof Text_Markdown_SlamDown_Syntax_TextBox.PlainText) {
                                              return "Invalid default value";
                                          };
                                          throw new Error("Failed pattern match at Text.Markdown.SlamDown.Parser.Inline line 294, column 27 - line 310, column 5: " + [ v.constructor.name ]);
                                      })()));
                                  };
                                  throw new Error("Failed pattern match at Text.Markdown.SlamDown.Parser.Inline line 288, column 11 - line 310, column 5: " + [ v2.constructor.name ]);
                              });
                          });
                      };
                      throw new Error("Failed pattern match at Text.Markdown.SlamDown.Parser.Inline line 283, column 7 - line 310, column 5: " + [ v1.constructor.name ]);
                  });
              });
          });
          var dropDown = (function () {
              var item = Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(function ($196) {
                  return Text_Markdown_SlamDown_Syntax_Value.stringValue(dictValue)(Data_String.trim($196));
              })(manyOf(function (c) {
                  return !Data_Foldable.elem(Data_Foldable.foldableArray)(Data_Eq.eqChar)(c)([ "{", "}", ",", "!", "`", "(", ")" ]);
              }));
              return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Text_Markdown_SlamDown_Parser_Utils.braces(expr(Control_Category.id(Control_Category.categoryFn))(Text_Parsing_Parser_Combinators.sepBy(Data_Identity.monadIdentity)(Text_Parsing_Parser_Combinators["try"](Data_Identity.monadIdentity)(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Text_Markdown_SlamDown_Parser_Utils.skipSpaces)(item)))(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Text_Markdown_SlamDown_Parser_Utils.skipSpaces)(Text_Parsing_Parser_String.string(Text_Parsing_Parser_String.stringLikeString)(Data_Identity.monadIdentity)(","))))))(function (v) {
                  return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_Combinators.optionMaybe(Data_Identity.monadIdentity)(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Text_Markdown_SlamDown_Parser_Utils.skipSpaces)(Text_Markdown_SlamDown_Parser_Utils.parens(expr(Control_Category.id(Control_Category.categoryFn))(item)))))(function (v1) {
                      return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))(new Text_Markdown_SlamDown_Syntax_FormField.DropDown(v1, v));
                  });
              });
          })();
          var checkBoxes = (function () {
              var literalCheckBoxes = Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Data_List.some(Text_Parsing_Parser.alternativeParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser.lazyParserT)(Text_Parsing_Parser_Combinators["try"](Data_Identity.monadIdentity)((function () {
                  var item = Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(function ($197) {
                      return Text_Markdown_SlamDown_Syntax_Value.stringValue(dictValue)(Data_String.trim($197));
                  })(manyOf(function (c) {
                      return !Data_Foldable.elem(Data_Foldable.foldableArray)(Data_Eq.eqChar)(c)([ "[", "]", "!", "`" ]);
                  }));
                  return Control_Bind.discard(Control_Bind.discardUnit)(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Text_Markdown_SlamDown_Parser_Utils.skipSpaces)(function () {
                      return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Control_Alt.alt(Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_String.string(Text_Parsing_Parser_String.stringLikeString)(Data_Identity.monadIdentity)("[x]"))(Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))(true)))(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_String.string(Text_Parsing_Parser_String.stringLikeString)(Data_Identity.monadIdentity)("[]"))(Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))(false))))(function (v) {
                          return Control_Bind.discard(Control_Bind.discardUnit)(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Text_Markdown_SlamDown_Parser_Utils.skipSpaces)(function () {
                              return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(item)(function (v1) {
                                  return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))(new Data_Tuple.Tuple(v, v1));
                              });
                          });
                      });
                  });
              })())))(function (v) {
                  return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))(new Text_Markdown_SlamDown_Syntax_FormField.CheckBoxes(Text_Markdown_SlamDown_Syntax_FormField.Literal.create(Data_Functor.map(Data_List_Types.functorList)(Data_Tuple.snd)(Data_List.filter(Data_Tuple.fst)(v))), Text_Markdown_SlamDown_Syntax_FormField.Literal.create(Data_Functor.map(Data_List_Types.functorList)(Data_Tuple.snd)(v))));
              });
              var evaluatedCheckBoxes = Control_Apply.apply(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(Text_Markdown_SlamDown_Syntax_FormField.CheckBoxes.create)(Text_Markdown_SlamDown_Parser_Utils.squares(unevaluated)))(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Text_Markdown_SlamDown_Parser_Utils.skipSpaces)(unevaluated));
              return Control_Alt.alt(Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(literalCheckBoxes)(evaluatedCheckBoxes);
          })();
          return Control_Alt.alt(Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(Control_Alt.alt(Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(Control_Alt.alt(Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_Combinators["try"](Data_Identity.monadIdentity)(textBox))(Text_Parsing_Parser_Combinators["try"](Data_Identity.monadIdentity)(Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(Data_Either.Right.create)(radioButtons))))(Text_Parsing_Parser_Combinators["try"](Data_Identity.monadIdentity)(Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(Data_Either.Right.create)(checkBoxes))))(Text_Parsing_Parser_Combinators["try"](Data_Identity.monadIdentity)(Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(Data_Either.Right.create)(dropDown)));
      })();
      var formField = (function () {
          var required = Text_Parsing_Parser_Combinators.option(Data_Identity.monadIdentity)(false)(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_String.string(Text_Parsing_Parser_String.stringLikeString)(Data_Identity.monadIdentity)("*"))(Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))(true)));
          var label = Control_Alt.alt(Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(someOf(isAlphaNum))(Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(function ($198) {
              return Data_String.fromCharArray(Data_Array.fromFoldable(Data_List_Types.foldableList)($198));
          })(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_String.string(Text_Parsing_Parser_String.stringLikeString)(Data_Identity.monadIdentity)("["))(Text_Parsing_Parser_Combinators.manyTill(Data_Identity.monadIdentity)(Text_Parsing_Parser_String.anyChar(Text_Parsing_Parser_String.stringLikeString)(Data_Identity.monadIdentity))(Text_Parsing_Parser_String.string(Text_Parsing_Parser_String.stringLikeString)(Data_Identity.monadIdentity)("]")))));
          return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(label)(function (v) {
              return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Control_Bind.discard(Control_Bind.discardUnit)(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Text_Markdown_SlamDown_Parser_Utils.skipSpaces)(function () {
                  return required;
              }))(function (v1) {
                  return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Control_Bind.discard(Control_Bind.discardUnit)(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Text_Markdown_SlamDown_Parser_Utils.skipSpaces)(function () {
                      return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_String.string(Text_Parsing_Parser_String.stringLikeString)(Data_Identity.monadIdentity)("="))(function (v2) {
                          return Control_Bind.discard(Control_Bind.discardUnit)(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Text_Markdown_SlamDown_Parser_Utils.skipSpaces)(function () {
                              return formElement;
                          });
                      });
                  }))(function (v2) {
                      return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))(Data_Functor.map(Data_Either.functorEither)(Text_Markdown_SlamDown_Syntax_Inline.FormField.create(v)(v1))(v2));
                  });
              });
          });
      })();
      var entity = Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_String.string(Text_Parsing_Parser_String.stringLikeString)(Data_Identity.monadIdentity)("&"))(function (v) {
          return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(function ($199) {
              return Data_String.fromCharArray(Data_Array.fromFoldable(Data_List_Types.foldableList)($199));
          })(Text_Parsing_Parser_Combinators.many1Till(Data_Identity.monadIdentity)(Text_Parsing_Parser_String.noneOf(Text_Parsing_Parser_String.stringLikeString)(Data_Identity.monadIdentity)(Data_String.toCharArray(";")))(Text_Parsing_Parser_String.string(Text_Parsing_Parser_String.stringLikeString)(Data_Identity.monadIdentity)(";"))))(function (v1) {
              return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))(Text_Markdown_SlamDown_Syntax_Inline.Entity.create("&" + (v1 + ";")));
          });
      });
      var emphasis = function (p) {
          return function (f) {
              return function (s) {
                  return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_String.string(Text_Parsing_Parser_String.stringLikeString)(Data_Identity.monadIdentity)(s))(function (v) {
                      return Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(f)(Text_Parsing_Parser_Combinators.manyTill(Data_Identity.monadIdentity)(p)(Text_Parsing_Parser_String.string(Text_Parsing_Parser_String.stringLikeString)(Data_Identity.monadIdentity)(s)));
                  });
              };
          };
      };
      var strong = function (p) {
          return Control_Alt.alt(Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(emphasis(p)(Text_Markdown_SlamDown_Syntax_Inline.Strong.create)("**"))(emphasis(p)(Text_Markdown_SlamDown_Syntax_Inline.Strong.create)("__"));
      };
      var strongEmph = function (p) {
          var f = function (is) {
              return Text_Markdown_SlamDown_Syntax_Inline.Strong.create(Data_List.singleton(new Text_Markdown_SlamDown_Syntax_Inline.Emph(is)));
          };
          return Control_Alt.alt(Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(emphasis(p)(f)("***"))(emphasis(p)(f)("___"));
      };
      var emph = function (p) {
          return Control_Alt.alt(Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(emphasis(p)(Text_Markdown_SlamDown_Syntax_Inline.Emph.create)("*"))(emphasis(p)(Text_Markdown_SlamDown_Syntax_Inline.Emph.create)("_"));
      };
      var code = Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_Combinators.option(Data_Identity.monadIdentity)(false)(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_String.string(Text_Parsing_Parser_String.stringLikeString)(Data_Identity.monadIdentity)("!"))(Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))(true))))(function (v) {
          return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(someOf(function (x) {
              return Data_String.singleton(x) === "`";
          }))(function (v1) {
              return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(function ($200) {
                  return Data_String.fromCharArray(Data_Array.fromFoldable(Data_List_Types.foldableList)($200));
              })(Text_Parsing_Parser_Combinators.manyTill(Data_Identity.monadIdentity)(Text_Parsing_Parser_String.anyChar(Text_Parsing_Parser_String.stringLikeString)(Data_Identity.monadIdentity))(Text_Parsing_Parser_String.string(Text_Parsing_Parser_String.stringLikeString)(Data_Identity.monadIdentity)(v1))))(function (v2) {
                  return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))(Text_Markdown_SlamDown_Syntax_Inline.Code.create(v)(Data_String.trim(v2)));
              });
          });
      });
      var autolink = (function () {
          var autoLabel = function (s) {
              if (Text_Markdown_SlamDown_Parser_Utils.isEmailAddress(s)) {
                  return "mailto:" + s;
              };
              if (Data_Boolean.otherwise) {
                  return s;
              };
              throw new Error("Failed pattern match at Text.Markdown.SlamDown.Parser.Inline line 238, column 5 - line 240, column 22: " + [ s.constructor.name ]);
          };
          return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_String.string(Text_Parsing_Parser_String.stringLikeString)(Data_Identity.monadIdentity)("<"))(function (v) {
              return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(function ($201) {
                  return Data_String.fromCharArray(Data_Array.fromFoldable(Data_List_Types.foldableList)($201));
              })(Text_Parsing_Parser_Combinators.many1Till(Data_Identity.monadIdentity)(Text_Parsing_Parser_String.anyChar(Text_Parsing_Parser_String.stringLikeString)(Data_Identity.monadIdentity))(Text_Parsing_Parser_String.string(Text_Parsing_Parser_String.stringLikeString)(Data_Identity.monadIdentity)(">"))))(function (v1) {
                  return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))(new Text_Markdown_SlamDown_Syntax_Inline.Link(Data_List.singleton(new Text_Markdown_SlamDown_Syntax_Inline.Str(autoLabel(v1))), new Text_Markdown_SlamDown_Syntax_Inline.InlineLink(v1)));
              });
          });
      })();
      var alphaNumStr = Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(Text_Markdown_SlamDown_Syntax_Inline.Str.create)(someOf(isAlphaNum));
      var inline0 = Control_Lazy.fix(Text_Parsing_Parser.lazyParserT)(function (p) {
          return Control_Alt.alt(Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(Control_Alt.alt(Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(Control_Alt.alt(Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(Control_Alt.alt(Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(Control_Alt.alt(Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(Control_Alt.alt(Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(Control_Alt.alt(Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(alphaNumStr)(space))(strongEmph(p)))(strong(p)))(emph(p)))(code))(autolink))(entity);
      });
      var link = (function () {
          var referenceLink = Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(Text_Markdown_SlamDown_Syntax_Inline.ReferenceLink.create)(Text_Parsing_Parser_Combinators.optionMaybe(Data_Identity.monadIdentity)(Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(function ($202) {
              return Data_String.fromCharArray(Data_Array.fromFoldable(Data_List_Types.foldableList)($202));
          })(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_String.string(Text_Parsing_Parser_String.stringLikeString)(Data_Identity.monadIdentity)("["))(Text_Parsing_Parser_Combinators.manyTill(Data_Identity.monadIdentity)(Text_Parsing_Parser_String.anyChar(Text_Parsing_Parser_String.stringLikeString)(Data_Identity.monadIdentity))(Text_Parsing_Parser_String.string(Text_Parsing_Parser_String.stringLikeString)(Data_Identity.monadIdentity)("]"))))));
          var linkLabel = Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_String.string(Text_Parsing_Parser_String.stringLikeString)(Data_Identity.monadIdentity)("["))(Text_Parsing_Parser_Combinators.manyTill(Data_Identity.monadIdentity)(Control_Alt.alt(Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(inline0)(other))(Text_Parsing_Parser_String.string(Text_Parsing_Parser_String.stringLikeString)(Data_Identity.monadIdentity)("]")));
          var inlineLink = Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(function ($203) {
              return Text_Markdown_SlamDown_Syntax_Inline.InlineLink.create(Data_String.fromCharArray(Data_Array.fromFoldable(Data_List_Types.foldableList)($203)));
          })(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_String.string(Text_Parsing_Parser_String.stringLikeString)(Data_Identity.monadIdentity)("("))(Text_Parsing_Parser_Combinators.manyTill(Data_Identity.monadIdentity)(Text_Parsing_Parser_String.anyChar(Text_Parsing_Parser_String.stringLikeString)(Data_Identity.monadIdentity))(Text_Parsing_Parser_String.string(Text_Parsing_Parser_String.stringLikeString)(Data_Identity.monadIdentity)(")"))));
          var linkTarget = Control_Alt.alt(Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(inlineLink)(referenceLink);
          return Control_Apply.apply(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(Text_Markdown_SlamDown_Syntax_Inline.Link.create)(linkLabel))(linkTarget);
      })();
      var inline1 = Control_Alt.alt(Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_Combinators["try"](Data_Identity.monadIdentity)(inline0))(Text_Parsing_Parser_Combinators["try"](Data_Identity.monadIdentity)(link));
      var image = (function () {
          var imageUrl = Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(function ($204) {
              return Data_String.fromCharArray(Data_Array.fromFoldable(Data_List_Types.foldableList)($204));
          })(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_String.string(Text_Parsing_Parser_String.stringLikeString)(Data_Identity.monadIdentity)("("))(Text_Parsing_Parser_Combinators.manyTill(Data_Identity.monadIdentity)(Text_Parsing_Parser_String.anyChar(Text_Parsing_Parser_String.stringLikeString)(Data_Identity.monadIdentity))(Text_Parsing_Parser_String.string(Text_Parsing_Parser_String.stringLikeString)(Data_Identity.monadIdentity)(")"))));
          var imageLabel = Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_String.string(Text_Parsing_Parser_String.stringLikeString)(Data_Identity.monadIdentity)("!["))(Text_Parsing_Parser_Combinators.manyTill(Data_Identity.monadIdentity)(Control_Alt.alt(Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(inline1)(other))(Text_Parsing_Parser_String.string(Text_Parsing_Parser_String.stringLikeString)(Data_Identity.monadIdentity)("]")));
          return Control_Apply.apply(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(Text_Markdown_SlamDown_Syntax_Inline.Image.create)(imageLabel))(imageUrl);
      })();
      var inline2 = Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Control_Alt.alt(Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(Control_Alt.alt(Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(Control_Alt.alt(Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_Combinators["try"](Data_Identity.monadIdentity)(formField))(Text_Parsing_Parser_Combinators["try"](Data_Identity.monadIdentity)(Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(Data_Either.Right.create)(inline1))))(Text_Parsing_Parser_Combinators["try"](Data_Identity.monadIdentity)(Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(Data_Either.Right.create)(image))))(Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(Data_Either.Right.create)(other)))(function (v) {
          if (v instanceof Data_Either.Right) {
              return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))(v.value0);
          };
          if (v instanceof Data_Either.Left) {
              return Text_Parsing_Parser.fail(Data_Identity.monadIdentity)(v.value0);
          };
          throw new Error("Failed pattern match at Text.Markdown.SlamDown.Parser.Inline line 155, column 5 - line 157, column 24: " + [ v.constructor.name ]);
      });
      return Control_Apply.applyFirst(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Data_List.many(Text_Parsing_Parser.alternativeParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser.lazyParserT)(inline2))(Text_Parsing_Parser_String.eof(Text_Parsing_Parser_String.stringLikeString)(Data_Identity.monadIdentity));
  };
  var parseInlines = function (dictValue) {
      return function (s) {
          return Data_Functor.map(Data_Either.functorEither)(consolidate)(Data_Bifunctor.lmap(Data_Either.bifunctorEither)(Text_Parsing_Parser.parseErrorMessage)(Text_Parsing_Parser.runParser(Data_String.joinWith("\x0a")(Data_Array.fromFoldable(Data_List_Types.foldableList)(s)))(inlines(dictValue))));
      };
  };
  exports["parseInlines"] = parseInlines;
  exports["parseTextBox"] = parseTextBox;
})(PS["Text.Markdown.SlamDown.Parser.Inline"] = PS["Text.Markdown.SlamDown.Parser.Inline"] || {});
(function(exports) {
  // Generated by purs version 0.11.3
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Array = PS["Data.Array"];
  var Data_Either = PS["Data.Either"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Identity = PS["Data.Identity"];
  var Data_List_Types = PS["Data.List.Types"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_String = PS["Data.String"];
  var Prelude = PS["Prelude"];
  var Text_Markdown_SlamDown_Parser_Utils = PS["Text.Markdown.SlamDown.Parser.Utils"];
  var Text_Markdown_SlamDown_Syntax = PS["Text.Markdown.SlamDown.Syntax"];
  var Text_Markdown_SlamDown_Syntax_Block = PS["Text.Markdown.SlamDown.Syntax.Block"];
  var Text_Parsing_Parser = PS["Text.Parsing.Parser"];
  var Text_Parsing_Parser_Combinators = PS["Text.Parsing.Parser.Combinators"];
  var Text_Parsing_Parser_String = PS["Text.Parsing.Parser.String"];        
  var linkReference = (function () {
      var charsToString = function ($6) {
          return Data_String.trim(Data_String.fromCharArray(Data_Array.fromFoldable(Data_List_Types.foldableList)($6)));
      };
      return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(charsToString)(Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_String.string(Text_Parsing_Parser_String.stringLikeString)(Data_Identity.monadIdentity)("["))(function (v) {
          return Control_Bind.discard(Control_Bind.discardUnit)(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Text_Markdown_SlamDown_Parser_Utils.skipSpaces)(function () {
              return Text_Parsing_Parser_Combinators.manyTill(Data_Identity.monadIdentity)(Text_Parsing_Parser_String.anyChar(Text_Parsing_Parser_String.stringLikeString)(Data_Identity.monadIdentity))(Text_Parsing_Parser_String.string(Text_Parsing_Parser_String.stringLikeString)(Data_Identity.monadIdentity)("]"));
          });
      })))(function (v) {
          return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_String.string(Text_Parsing_Parser_String.stringLikeString)(Data_Identity.monadIdentity)(":"))(function (v1) {
              return Control_Bind.discard(Control_Bind.discardUnit)(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Text_Markdown_SlamDown_Parser_Utils.skipSpaces)(function () {
                  return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(charsToString)(Text_Parsing_Parser_Combinators.manyTill(Data_Identity.monadIdentity)(Text_Parsing_Parser_String.anyChar(Text_Parsing_Parser_String.stringLikeString)(Data_Identity.monadIdentity))(Text_Parsing_Parser_String.eof(Text_Parsing_Parser_String.stringLikeString)(Data_Identity.monadIdentity))))(function (v2) {
                      return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))(new Text_Markdown_SlamDown_Syntax_Block.LinkReference(v, v2));
                  });
              });
          });
      });
  })();
  var parseLinkReference = function ($7) {
      return Data_Either.either(Data_Function["const"](Data_Maybe.Nothing.value))(Data_Maybe.Just.create)(Data_Function.flip(Text_Parsing_Parser.runParser)(linkReference)($7));
  };
  exports["parseLinkReference"] = parseLinkReference;
})(PS["Text.Markdown.SlamDown.Parser.References"] = PS["Text.Markdown.SlamDown.Parser.References"] || {});
(function(exports) {
  // Generated by purs version 0.11.3
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Boolean = PS["Data.Boolean"];
  var Data_Either = PS["Data.Either"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_List = PS["Data.List"];
  var Data_List_Types = PS["Data.List.Types"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_String = PS["Data.String"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Validation_Semigroup = PS["Data.Validation.Semigroup"];
  var Partial_Unsafe = PS["Partial.Unsafe"];
  var Prelude = PS["Prelude"];
  var Text_Markdown_SlamDown_Parser_Inline = PS["Text.Markdown.SlamDown.Parser.Inline"];
  var Text_Markdown_SlamDown_Parser_References = PS["Text.Markdown.SlamDown.Parser.References"];
  var Text_Markdown_SlamDown_Syntax = PS["Text.Markdown.SlamDown.Syntax"];
  var Text_Markdown_SlamDown_Syntax_Block = PS["Text.Markdown.SlamDown.Syntax.Block"];        
  var CText = (function () {
      function CText(value0) {
          this.value0 = value0;
      };
      CText.create = function (value0) {
          return new CText(value0);
      };
      return CText;
  })();
  var CBlank = (function () {
      function CBlank() {

      };
      CBlank.value = new CBlank();
      return CBlank;
  })();
  var CRule = (function () {
      function CRule() {

      };
      CRule.value = new CRule();
      return CRule;
  })();
  var CATXHeader = (function () {
      function CATXHeader(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      CATXHeader.create = function (value0) {
          return function (value1) {
              return new CATXHeader(value0, value1);
          };
      };
      return CATXHeader;
  })();
  var CSetextHeader = (function () {
      function CSetextHeader(value0) {
          this.value0 = value0;
      };
      CSetextHeader.create = function (value0) {
          return new CSetextHeader(value0);
      };
      return CSetextHeader;
  })();
  var CBlockquote = (function () {
      function CBlockquote(value0) {
          this.value0 = value0;
      };
      CBlockquote.create = function (value0) {
          return new CBlockquote(value0);
      };
      return CBlockquote;
  })();
  var CListItem = (function () {
      function CListItem(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      CListItem.create = function (value0) {
          return function (value1) {
              return new CListItem(value0, value1);
          };
      };
      return CListItem;
  })();
  var CCodeBlockFenced = (function () {
      function CCodeBlockFenced(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      CCodeBlockFenced.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new CCodeBlockFenced(value0, value1, value2);
              };
          };
      };
      return CCodeBlockFenced;
  })();
  var CCodeBlockIndented = (function () {
      function CCodeBlockIndented(value0) {
          this.value0 = value0;
      };
      CCodeBlockIndented.create = function (value0) {
          return new CCodeBlockIndented(value0);
      };
      return CCodeBlockIndented;
  })();
  var CLinkReference = (function () {
      function CLinkReference(value0) {
          this.value0 = value0;
      };
      CLinkReference.create = function (value0) {
          return new CLinkReference(value0);
      };
      return CLinkReference;
  })();
  var tabsToSpaces = Data_String.replace("\x09")("    ");
  var splitATXHeader = function (s) {
      var level = Data_String.count(function (c) {
          return Data_String.singleton(c) === "#";
      })(s);
      var contents = Data_String.drop(level + 1 | 0)(s);
      return {
          level: level, 
          contents: contents
      };
  };
  var setextLevel = function (s) {
      if (Data_String.take(1)(s) === "=") {
          return 1;
      };
      if (Data_Boolean.otherwise) {
          return 2;
      };
      throw new Error("Failed pattern match at Text.Markdown.SlamDown.Parser line 99, column 1 - line 103, column 1: " + [ s.constructor.name ]);
  };
  var min = function (dictOrd) {
      return function (n) {
          return function (m) {
              var $45 = Data_Ord.lessThan(dictOrd)(n)(m);
              if ($45) {
                  return n;
              };
              return m;
          };
      };
  };
  var isTextContainer = function (v) {
      if (v instanceof CText) {
          return true;
      };
      return false;
  };
  var isSpace = function (v) {
      if (v === " ") {
          return true;
      };
      return false;
  };
  var removeNonIndentingSpaces = function (s) {
      if (Data_String.count(function ($122) {
          return isSpace(Data_String.singleton($122));
      })(s) < 4) {
          return Data_String.dropWhile(function ($123) {
              return isSpace(Data_String.singleton($123));
          })(s);
      };
      if (Data_Boolean.otherwise) {
          return s;
      };
      throw new Error("Failed pattern match at Text.Markdown.SlamDown.Parser line 58, column 1 - line 60, column 18: " + [ s.constructor.name ]);
  };
  var isRuleChar = function (v) {
      if (v === "*") {
          return true;
      };
      if (v === "-") {
          return true;
      };
      if (v === "_") {
          return true;
      };
      return false;
  };
  var isListItem = function (v) {
      return function (v1) {
          if (v1 instanceof CListItem) {
              return Data_Eq.eq(Text_Markdown_SlamDown_Syntax_Block.eqListType)(v)(v1.value0);
          };
          return false;
      };
  };
  var isLinkReference = function (s) {
      return Data_String.take(1)(s) === "[" && Data_Maybe.isJust(Text_Markdown_SlamDown_Parser_References.parseLinkReference(s));
  };
  var isFenceChar = function (v) {
      if (v === "~") {
          return true;
      };
      if (v === "`") {
          return true;
      };
      return false;
  };
  var isEvaluatedCode = function (s) {
      return Data_String.take(1)(s) === "!";
  };
  var isDigit = function (v) {
      if (v === "0") {
          return true;
      };
      if (v === "1") {
          return true;
      };
      if (v === "2") {
          return true;
      };
      if (v === "3") {
          return true;
      };
      if (v === "4") {
          return true;
      };
      if (v === "5") {
          return true;
      };
      if (v === "6") {
          return true;
      };
      if (v === "7") {
          return true;
      };
      if (v === "8") {
          return true;
      };
      if (v === "9") {
          return true;
      };
      return false;
  };
  var isCodeFence = function (s) {
      var isSimpleFence = function (s$prime) {
          return Data_String.count(function ($124) {
              return isFenceChar(Data_String.singleton($124));
          })(s$prime) >= 3;
      };
      return isSimpleFence(s) || isEvaluatedCode(s) && isSimpleFence(Data_String.drop(1)(s));
  };
  var isBlockquoteLine = function (s) {
      return Data_String.take(1)(removeNonIndentingSpaces(s)) === ">";
  };
  var splitBlockquote = function (ss) {
      var blockquoteContents = function (s) {
          return Data_String.drop((function () {
              var $57 = Data_String.take(2)(s) === "> ";
              if ($57) {
                  return 2;
              };
              return 1;
          })())(s);
      };
      var sp = Data_List.span(isBlockquoteLine)(ss);
      var bq = Data_Functor.map(Data_List_Types.functorList)(function ($125) {
          return blockquoteContents(removeNonIndentingSpaces($125));
      })(sp.init);
      return {
          blockquoteLines: bq, 
          otherLines: sp.rest
      };
  };
  var isATXHeader = function (s) {
      var level = Data_String.count(function (c) {
          return Data_String.singleton(c) === "#";
      })(s);
      var rest = Data_String.drop(level)(s);
      return level >= 1 && (level <= 6 && Data_String.take(1)(rest) === " ");
  };
  var getCText = function (v) {
      if (v instanceof CText) {
          return v.value0;
      };
      return "";
  };
  var getCListItem = function (v) {
      if (v instanceof CListItem) {
          return v.value1;
      };
      return Data_List_Types.Nil.value;
  };
  var parseBlocks = function (dictValue) {
      return function (v) {
          if (v instanceof Data_List_Types.Nil) {
              return Control_Applicative.pure(Data_Either.applicativeEither)(Data_List_Types.Nil.value);
          };
          if (v instanceof Data_List_Types.Cons && (v.value0 instanceof CText && (v.value1 instanceof Data_List_Types.Cons && v.value1.value0 instanceof CSetextHeader))) {
              return Control_Bind.bind(Data_Either.bindEither)(Text_Markdown_SlamDown_Parser_Inline.parseInlines(dictValue)(Data_List.singleton(v.value0.value0)))(function (v1) {
                  return Control_Bind.bind(Data_Either.bindEither)(parseBlocks(dictValue)(v.value1.value1))(function (v2) {
                      return Control_Applicative.pure(Data_Either.applicativeEither)(new Data_List_Types.Cons(new Text_Markdown_SlamDown_Syntax_Block.Header(v.value1.value0.value0, v1), v2));
                  });
              });
          };
          if (v instanceof Data_List_Types.Cons && v.value0 instanceof CText) {
              var sp = Data_List.span(isTextContainer)(v.value1);
              return Control_Bind.bind(Data_Either.bindEither)(Text_Markdown_SlamDown_Parser_Inline.parseInlines(dictValue)(new Data_List_Types.Cons(v.value0.value0, Data_Functor.map(Data_List_Types.functorList)(getCText)(sp.init))))(function (v1) {
                  return Control_Bind.bind(Data_Either.bindEither)(parseBlocks(dictValue)(sp.rest))(function (v2) {
                      return Control_Applicative.pure(Data_Either.applicativeEither)(new Data_List_Types.Cons(new Text_Markdown_SlamDown_Syntax_Block.Paragraph(v1), v2));
                  });
              });
          };
          if (v instanceof Data_List_Types.Cons && v.value0 instanceof CRule) {
              return Data_Functor.map(Data_Either.functorEither)(function (v1) {
                  return new Data_List_Types.Cons(Text_Markdown_SlamDown_Syntax_Block.Rule.value, v1);
              })(parseBlocks(dictValue)(v.value1));
          };
          if (v instanceof Data_List_Types.Cons && v.value0 instanceof CATXHeader) {
              return Control_Bind.bind(Data_Either.bindEither)(Text_Markdown_SlamDown_Parser_Inline.parseInlines(dictValue)(Data_List.singleton(v.value0.value1)))(function (v1) {
                  return Control_Bind.bind(Data_Either.bindEither)(parseBlocks(dictValue)(v.value1))(function (v2) {
                      return Control_Applicative.pure(Data_Either.applicativeEither)(new Data_List_Types.Cons(new Text_Markdown_SlamDown_Syntax_Block.Header(v.value0.value0, v1), v2));
                  });
              });
          };
          if (v instanceof Data_List_Types.Cons && v.value0 instanceof CBlockquote) {
              return Control_Bind.bind(Data_Either.bindEither)(parseBlocks(dictValue)(v.value0.value0))(function (v1) {
                  return Control_Bind.bind(Data_Either.bindEither)(parseBlocks(dictValue)(v.value1))(function (v2) {
                      return Control_Applicative.pure(Data_Either.applicativeEither)(new Data_List_Types.Cons(new Text_Markdown_SlamDown_Syntax_Block.Blockquote(v1), v2));
                  });
              });
          };
          if (v instanceof Data_List_Types.Cons && v.value0 instanceof CListItem) {
              var sp = Data_List.span(isListItem(v.value0.value0))(v.value1);
              return Control_Bind.bind(Data_Either.bindEither)(parseBlocks(dictValue)(v.value0.value1))(function (v1) {
                  return Control_Bind.bind(Data_Either.bindEither)(Data_Traversable.traverse(Data_List_Types.traversableList)(Data_Either.applicativeEither)(function ($126) {
                      return parseBlocks(dictValue)(getCListItem($126));
                  })(sp.init))(function (v2) {
                      return Control_Bind.bind(Data_Either.bindEither)(parseBlocks(dictValue)(sp.rest))(function (v3) {
                          return Control_Applicative.pure(Data_Either.applicativeEither)(new Data_List_Types.Cons(new Text_Markdown_SlamDown_Syntax_Block.Lst(v.value0.value0, new Data_List_Types.Cons(v1, v2)), v3));
                      });
                  });
              });
          };
          if (v instanceof Data_List_Types.Cons && v.value0 instanceof CCodeBlockIndented) {
              return Data_Functor.map(Data_Either.functorEither)(function (v1) {
                  return new Data_List_Types.Cons(new Text_Markdown_SlamDown_Syntax_Block.CodeBlock(Text_Markdown_SlamDown_Syntax_Block.Indented.value, v.value0.value0), v1);
              })(parseBlocks(dictValue)(v.value1));
          };
          if (v instanceof Data_List_Types.Cons && v.value0 instanceof CCodeBlockFenced) {
              return Data_Functor.map(Data_Either.functorEither)(function (v1) {
                  return new Data_List_Types.Cons(new Text_Markdown_SlamDown_Syntax_Block.CodeBlock(new Text_Markdown_SlamDown_Syntax_Block.Fenced(v.value0.value0, v.value0.value1), v.value0.value2), v1);
              })(parseBlocks(dictValue)(v.value1));
          };
          if (v instanceof Data_List_Types.Cons && v.value0 instanceof CLinkReference) {
              return Data_Functor.map(Data_Either.functorEither)(function (v1) {
                  return new Data_List_Types.Cons(v.value0.value0, v1);
              })(parseBlocks(dictValue)(v.value1));
          };
          if (v instanceof Data_List_Types.Cons) {
              return parseBlocks(dictValue)(v.value1);
          };
          throw new Error("Failed pattern match at Text.Markdown.SlamDown.Parser line 319, column 3 - line 355, column 21: " + [ v.constructor.name ]);
      };
  };
  var fromIndentedChunk = Data_String.drop(4);
  var countLeadingSpaces = Data_String.count(function ($127) {
      return isSpace(Data_String.singleton($127));
  });
  var isBulleted = function (s) {
      var isBullet = function (v) {
          if (v === "*") {
              return true;
          };
          if (v === "+") {
              return true;
          };
          if (v === "-") {
              return true;
          };
          return false;
      };
      var ls = countLeadingSpaces(Data_String.drop(1)(s));
      var b = Data_String.take(1)(s);
      return isBullet(b) && (ls > 0 && ls < 5);
  };
  var listItemType = function (s) {
      if (isBulleted(s)) {
          return new Text_Markdown_SlamDown_Syntax_Block.Bullet(Data_String.take(1)(s));
      };
      if (Data_Boolean.otherwise) {
          var n = Data_String.count(function ($128) {
              return isDigit(Data_String.singleton($128));
          })(s);
          return new Text_Markdown_SlamDown_Syntax_Block.Ordered(Data_String.take(1)(Data_String.drop(n)(s)));
      };
      throw new Error("Failed pattern match at Text.Markdown.SlamDown.Parser line 146, column 1 - line 150, column 44: " + [ s.constructor.name ]);
  };
  var isIndentedTo = function (n) {
      return function (s) {
          return countLeadingSpaces(s) >= n;
      };
  };
  var isIndentedChunk = function (s) {
      return isIndentedTo(4)(s);
  };
  var splitIndentedChunks = function (ss) {
      var sp = Data_List.span(isIndentedChunk)(ss);
      var codeLines = Data_Functor.map(Data_List_Types.functorList)(fromIndentedChunk)(sp.init);
      return {
          codeLines: codeLines, 
          otherLines: sp.rest
      };
  };
  var isOrderedListMarker = function (s) {
      var n = Data_String.count(function ($129) {
          return isDigit(Data_String.singleton($129));
      })(s);
      var next = Data_String.take(1)(Data_String.drop(n)(s));
      var ls = countLeadingSpaces(Data_String.drop(n + 1 | 0)(s));
      return n > 0 && ((next === "." || next === ")") && ls > 0);
  };
  var isListItemLine = function (s) {
      var s$prime = removeNonIndentingSpaces(s);
      return isBulleted(s$prime) || isOrderedListMarker(s$prime);
  };
  var listItemIndent = function (s) {
      if (isBulleted(s)) {
          return 1 + min(Data_Ord.ordInt)(4)(countLeadingSpaces(Data_String.drop(1)(s))) | 0;
      };
      if (Data_Boolean.otherwise) {
          var n = Data_String.count(function ($130) {
              return isDigit(Data_String.singleton($130));
          })(s);
          return (n + 1 | 0) + min(Data_Ord.ordInt)(4)(countLeadingSpaces(Data_String.drop(n + 1 | 0)(s))) | 0;
      };
      throw new Error("Failed pattern match at Text.Markdown.SlamDown.Parser line 153, column 1 - line 157, column 63: " + [ s.constructor.name ]);
  };
  var splitListItem = function (s) {
      return function (ss) {
          var s1 = removeNonIndentingSpaces(s);
          var listType = listItemType(s1);
          var indent = listItemIndent(s1);
          var sp = Data_List.span(isIndentedTo(indent))(ss);
          var listItemLines = Data_List_Types.Cons.create(Data_String.drop(indent)(s1))(Data_Functor.map(Data_List_Types.functorList)(Data_String.drop(indent))(sp.init));
          return {
              listType: listType, 
              listItemLines: listItemLines, 
              otherLines: sp.rest
          };
      };
  };
  var splitCodeFence = function (indent) {
      return function (fence) {
          return function (ss) {
              var removeIndentTo = function (s) {
                  return Data_String.drop(min(Data_Ord.ordInt)(indent)(countLeadingSpaces(s)))(s);
              };
              var isClosingFence = function (s) {
                  return Data_String.count(function (c) {
                      return Data_String.singleton(c) === fence;
                  })(removeNonIndentingSpaces(s)) >= 3;
              };
              var sp = Data_List.span(function ($131) {
                  return !isClosingFence($131);
              })(ss);
              var codeLines = Data_Functor.map(Data_List_Types.functorList)(removeIndentTo)(sp.init);
              return {
                  codeLines: codeLines, 
                  otherLines: Data_List.drop(1)(sp.rest)
              };
          };
      };
  };
  var codeFenceInfo = function ($132) {
      return Data_String.trim(Data_String.dropWhile(function ($133) {
          return isFenceChar(Data_String.singleton($133));
      })($132));
  };
  var codeFenceChar = Data_String.take(1);
  var allChars = function (p) {
      return function ($134) {
          return Data_Foldable.all(Data_Foldable.foldableArray)(Data_HeytingAlgebra.heytingAlgebraBoolean)(p)(Data_String.split("")($134));
      };
  };
  var isRule = function (s) {
      return allChars(isRuleChar)(s) && (Data_String.length(s) >= 3 && allChars(Data_Eq.eq(Data_Eq.eqString)(Data_String.take(1)(s)))(s));
  };
  var isSetextHeader = function (v) {
      return function (v1) {
          if (v1 instanceof Data_Maybe.Just && v1.value0 instanceof CText) {
              return Data_String.length(v) >= 1 && Data_Foldable.any(Data_Foldable.foldableArray)(Data_HeytingAlgebra.heytingAlgebraBoolean)(function (c) {
                  return allChars(Data_Eq.eq(Data_Eq.eqString)(c))(v);
              })([ "=", "-" ]);
          };
          return false;
      };
  };
  var parseContainers = function (acc) {
      return function (v) {
          if (v instanceof Data_List_Types.Nil) {
              return Data_List.reverse(acc);
          };
          if (v instanceof Data_List_Types.Cons) {
              if (allChars(isSpace)(v.value0)) {
                  return parseContainers(new Data_List_Types.Cons(CBlank.value, acc))(v.value1);
              };
              if (isATXHeader(removeNonIndentingSpaces(v.value0))) {
                  var o = splitATXHeader(removeNonIndentingSpaces(v.value0));
                  return parseContainers(new Data_List_Types.Cons(new CATXHeader(o.level, o.contents), acc))(v.value1);
              };
              if (isSetextHeader(removeNonIndentingSpaces(Data_String.trim(v.value0)))(Data_List.last(acc))) {
                  return parseContainers(new Data_List_Types.Cons(CSetextHeader.create(setextLevel(removeNonIndentingSpaces(Data_String.trim(v.value0)))), acc))(v.value1);
              };
              if (isRule(removeNonIndentingSpaces(v.value0))) {
                  return parseContainers(new Data_List_Types.Cons(CRule.value, acc))(v.value1);
              };
              if (isBlockquoteLine(v.value0)) {
                  var o = splitBlockquote(new Data_List_Types.Cons(v.value0, v.value1));
                  return parseContainers(new Data_List_Types.Cons(new CBlockquote(parseContainers(Data_Monoid.mempty(Data_List_Types.monoidList))(o.blockquoteLines)), acc))(o.otherLines);
              };
              if (isListItemLine(v.value0)) {
                  var o = splitListItem(v.value0)(v.value1);
                  return parseContainers(new Data_List_Types.Cons(CListItem.create(o.listType)(parseContainers(Data_Monoid.mempty(Data_List_Types.monoidList))(o.listItemLines)), acc))(o.otherLines);
              };
              if (isIndentedChunk(v.value0)) {
                  var o = splitIndentedChunks(new Data_List_Types.Cons(v.value0, v.value1));
                  return parseContainers(new Data_List_Types.Cons(new CCodeBlockIndented(o.codeLines), acc))(o.otherLines);
              };
              if (isCodeFence(removeNonIndentingSpaces(v.value0))) {
                  var s1 = removeNonIndentingSpaces(v.value0);
                  var $$eval = isEvaluatedCode(s1);
                  var s2 = (function () {
                      if ($$eval) {
                          return Data_String.drop(1)(s1);
                      };
                      return s1;
                  })();
                  var info = codeFenceInfo(s2);
                  var ch = codeFenceChar(s2);
                  var o = splitCodeFence(countLeadingSpaces(v.value0))(ch)(v.value1);
                  return parseContainers(new Data_List_Types.Cons(new CCodeBlockFenced($$eval, info, o.codeLines), acc))(o.otherLines);
              };
              if (isLinkReference(removeNonIndentingSpaces(v.value0))) {
                  var s1 = removeNonIndentingSpaces(v.value0);
                  var b = Data_Maybe.fromJust()(Text_Markdown_SlamDown_Parser_References.parseLinkReference(s1));
                  return parseContainers(new Data_List_Types.Cons(new CLinkReference(b), acc))(v.value1);
              };
              if (Data_Boolean.otherwise) {
                  return parseContainers(new Data_List_Types.Cons(new CText(v.value0), acc))(v.value1);
              };
          };
          throw new Error("Failed pattern match at Text.Markdown.SlamDown.Parser line 259, column 1 - line 259, column 42: " + [ acc.constructor.name, v.constructor.name ]);
      };
  };
  var parseMd = function (dictValue) {
      return function (s) {
          var lines = Data_List.fromFoldable(Data_Foldable.foldableArray)(Data_String.split("\x0a")(Data_String.replace("\x0d")("")(tabsToSpaces(s))));
          var ctrs = parseContainers(Data_Monoid.mempty(Data_List_Types.monoidList))(lines);
          var bs = parseBlocks(dictValue)(ctrs);
          return Data_Functor.map(Data_Either.functorEither)(Text_Markdown_SlamDown_Syntax.SlamDown.create)(bs);
      };
  };
  exports["parseMd"] = parseMd;
})(PS["Text.Markdown.SlamDown.Parser"] = PS["Text.Markdown.SlamDown.Parser"] || {});
(function(exports) {
  // Generated by purs version 0.11.3
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad_Aff = PS["Control.Monad.Aff"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_Eff_Class = PS["Control.Monad.Eff.Class"];
  var Control_Monad_Eff_Console = PS["Control.Monad.Eff.Console"];
  var Control_Monad_Eff_Exception = PS["Control.Monad.Eff.Exception"];
  var DOM = PS["DOM"];
  var Data_Argonaut = PS["Data.Argonaut"];
  var Data_Argonaut_Core = PS["Data.Argonaut.Core"];
  var Data_Argonaut_Decode_Class = PS["Data.Argonaut.Decode.Class"];
  var Data_Either = PS["Data.Either"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_List_Types = PS["Data.List.Types"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_StrMap = PS["Data.StrMap"];
  var Data_Tuple = PS["Data.Tuple"];
  var Flare = PS["Flare"];
  var Network_HTTP_Affjax = PS["Network.HTTP.Affjax"];
  var Network_HTTP_Affjax_Response = PS["Network.HTTP.Affjax.Response"];
  var Partial_Unsafe = PS["Partial.Unsafe"];
  var Prelude = PS["Prelude"];
  var Signal_Channel = PS["Signal.Channel"];
  var Test_FlareCheck = PS["Test.FlareCheck"];
  var Text_Markdown_SlamDown = PS["Text.Markdown.SlamDown"];
  var Text_Markdown_SlamDown_Parser = PS["Text.Markdown.SlamDown.Parser"];
  var Text_Markdown_SlamDown_Syntax = PS["Text.Markdown.SlamDown.Syntax"];
  var Text_Markdown_SlamDown_Syntax_Block = PS["Text.Markdown.SlamDown.Syntax.Block"];
  var Text_Markdown_SlamDown_Syntax_Inline = PS["Text.Markdown.SlamDown.Syntax.Inline"];
  var Text_Markdown_SlamDown_Syntax_Value = PS["Text.Markdown.SlamDown.Syntax.Value"];        
  var Declaration = (function () {
      function Declaration(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Declaration.create = function (value0) {
          return function (value1) {
              return new Declaration(value0, value1);
          };
      };
      return Declaration;
  })();
  var Module = (function () {
      function Module(value0) {
          this.value0 = value0;
      };
      Module.create = function (value0) {
          return new Module(value0);
      };
      return Module;
  })();
  var Package = (function () {
      function Package(value0) {
          this.value0 = value0;
      };
      Package.create = function (value0) {
          return new Package(value0);
      };
      return Package;
  })();
  var render = function (dictPartial) {
      return function (v) {
          var inline = function (v1) {
              var __unused = function (dictPartial1) {
                  return function ($dollar20) {
                      return $dollar20;
                  };
              };
              return __unused(dictPartial)((function () {
                  if (v1 instanceof Text_Markdown_SlamDown_Syntax_Inline.Str) {
                      return v1.value0;
                  };
                  if (v1 instanceof Text_Markdown_SlamDown_Syntax_Inline.Space) {
                      return " ";
                  };
                  if (v1 instanceof Text_Markdown_SlamDown_Syntax_Inline.Code) {
                      return "<code>" + (v1.value1 + "</code>");
                  };
                  if (v1 instanceof Text_Markdown_SlamDown_Syntax_Inline.SoftBreak) {
                      return " ";
                  };
                  throw new Error("Failed pattern match at Test.FlareDoc line 114, column 5 - line 114, column 28: " + [ v1.constructor.name ]);
              })());
          };
          var block = function (v1) {
              var __unused = function (dictPartial1) {
                  return function ($dollar22) {
                      return $dollar22;
                  };
              };
              return __unused(dictPartial)((function () {
                  if (v1 instanceof Text_Markdown_SlamDown_Syntax_Block.Paragraph) {
                      return "<p>" + (Data_Foldable.foldMap(Data_List_Types.foldableList)(Data_Monoid.monoidString)(inline)(v1.value0) + "</p>");
                  };
                  if (v1 instanceof Text_Markdown_SlamDown_Syntax_Block.CodeBlock) {
                      return "<pre>" + (Data_Foldable.foldMap(Data_List_Types.foldableList)(Data_Monoid.monoidString)(function (v2) {
                          return v2 + "\x0a";
                      })(v1.value1) + "</pre>");
                  };
                  throw new Error("Failed pattern match at Test.FlareDoc line 110, column 5 - line 111, column 5: " + [ v1.constructor.name ]);
              })());
          };
          return Data_Foldable.foldMap(Data_List_Types.foldableList)(Data_Monoid.monoidString)(block)(v.value0);
      };
  };
  var name = function (v) {
      return v.value0.name;
  };                                                                                                            
  var flareDoc$prime = function (dictInteractive) {
      return function (parentId) {
          return function (docMap) {
              return function (moduleName) {
                  return function (functionName) {
                      return function (x) {
                          var docString = Control_Bind.bind(Data_Maybe.bindMaybe)(Data_StrMap.lookup(moduleName)(docMap))(function (v) {
                              return Control_Bind.bind(Data_Maybe.bindMaybe)(Data_StrMap.lookup(functionName)(v))(function (v1) {
                                  return Control_Bind.bind(Data_Maybe.bindMaybe)(v1)(function (v2) {
                                      var parsed = Text_Markdown_SlamDown_Parser.parseMd(Text_Markdown_SlamDown_Syntax_Value.valueString)(v2);
                                      if (parsed instanceof Data_Either.Left) {
                                          return Control_Applicative.pure(Data_Maybe.applicativeMaybe)("Markdown parse error: " + parsed.value0);
                                      };
                                      if (parsed instanceof Data_Either.Right) {
                                          return Control_Applicative.pure(Data_Maybe.applicativeMaybe)(render()(parsed.value0));
                                      };
                                      throw new Error("Failed pattern match at Test.FlareDoc line 145, column 9 - line 147, column 55: " + [ parsed.constructor.name ]);
                                  });
                              });
                          });
                          return Test_FlareCheck["flareDoc'"](dictInteractive)(parentId)(functionName)(docString)(x);
                      };
                  };
              };
          };
      };
  };
  var comb = function (v) {
      return function (v1) {
          if (v instanceof Data_Maybe.Just) {
              return new Data_Either.Right(v.value0);
          };
          return Data_Either.Left.create("Couldn't decode " + v1);
      };
  };
  var decodeDeclaration = new Data_Argonaut_Decode_Class.DecodeJson(function (json) {
      return Control_Bind.bind(Data_Either.bindEither)(comb(Data_Argonaut_Core.toObject(json))("declaration"))(function (obj) {
          return Control_Bind.bind(Data_Either.bindEither)(Control_Bind.bind(Data_Either.bindEither)(comb(Data_StrMap.lookup("title")(obj))("title"))(Data_Argonaut_Decode_Class.decodeJson(Data_Argonaut_Decode_Class.decodeJsonString)))(function (v) {
              return Control_Bind.bind(Data_Either.bindEither)(Control_Bind.bind(Data_Either.bindEither)(comb(Data_StrMap.lookup("comments")(obj))("comments"))(Data_Argonaut_Decode_Class.decodeJson(Data_Argonaut_Decode_Class.decodeJsonMaybe(Data_Argonaut_Decode_Class.decodeJsonString))))(function (v1) {
                  return Control_Applicative.pure(Data_Either.applicativeEither)(new Declaration(v, v1));
              });
          });
      });
  });
  var decodeModule = new Data_Argonaut_Decode_Class.DecodeJson(function (json) {
      return Control_Bind.bind(Data_Either.bindEither)(comb(Data_Argonaut_Core.toObject(json))("module"))(function (obj) {
          return Control_Bind.bind(Data_Either.bindEither)(Control_Bind.bind(Data_Either.bindEither)(comb(Data_StrMap.lookup("name")(obj))("name"))(Data_Argonaut_Decode_Class.decodeJson(Data_Argonaut_Decode_Class.decodeJsonString)))(function (v) {
              return Control_Bind.bind(Data_Either.bindEither)(Control_Bind.bind(Data_Either.bindEither)(comb(Data_StrMap.lookup("declarations")(obj))("declarations"))(Data_Argonaut_Decode_Class.decodeJson(Data_Argonaut_Decode_Class.decodeArray(decodeDeclaration))))(function (v1) {
                  return Control_Applicative.pure(Data_Either.applicativeEither)(new Module({
                      name: v, 
                      declarations: v1
                  }));
              });
          });
      });
  });
  var decodePackage = new Data_Argonaut_Decode_Class.DecodeJson(function (json) {
      return Control_Bind.bind(Data_Either.bindEither)(comb(Data_Argonaut_Core.toObject(json))("package"))(function (obj) {
          return Control_Bind.bind(Data_Either.bindEither)(Control_Bind.bind(Data_Either.bindEither)(comb(Data_StrMap.lookup("modules")(obj))("modules"))(Data_Argonaut_Decode_Class.decodeJson(Data_Argonaut_Decode_Class.decodeArray(decodeModule))))(function (v) {
              return Control_Applicative.pure(Data_Either.applicativeEither)(new Package(v));
          });
      });
  });
  var parseModuleJSON = function (json) {
      var declTuple = function (v) {
          return new Data_Tuple.Tuple(v.value0, v.value1);
      };
      var declarationsStrMap = function (decls) {
          return Data_StrMap.fromFoldable(Data_Foldable.foldableArray)(Data_Functor.map(Data_Functor.functorArray)(declTuple)(decls));
      };
      var modTuple = function (v) {
          return new Data_Tuple.Tuple(v.value0.name, declarationsStrMap(v.value0.declarations));
      };
      return Control_Bind.bind(Data_Either.bindEither)(Data_Argonaut_Decode_Class.decodeJson(decodePackage)(json))(function (v) {
          return Control_Applicative.pure(Data_Either.applicativeEither)(Data_StrMap.fromFoldable(Data_Foldable.foldableArray)(Data_Functor.map(Data_Functor.functorArray)(modTuple)(v.value0)));
      });
  };
  var withPackage = function (packageDescription) {
      return function (run) {
          return Data_Functor["void"](Control_Monad_Eff.functorEff)(Control_Monad_Aff.launchAff(Control_Bind.bind(Control_Monad_Aff.bindAff)(Network_HTTP_Affjax.get(Network_HTTP_Affjax_Response.responsableJson)(packageDescription))(function (v) {
              var v1 = parseModuleJSON(v.response);
              if (v1 instanceof Data_Either.Left) {
                  return Control_Monad_Eff_Class.liftEff(Control_Monad_Aff.monadEffAff)(Control_Monad_Eff_Console.log(v1.value0));
              };
              if (v1 instanceof Data_Either.Right) {
                  return Control_Monad_Eff_Class.liftEff(Control_Monad_Aff.monadEffAff)(run(v1.value0));
              };
              throw new Error("Failed pattern match at Test.FlareDoc line 125, column 3 - line 129, column 34: " + [ v1.constructor.name ]);
          })));
      };
  };
  exports["flareDoc'"] = flareDoc$prime;
  exports["withPackage"] = withPackage;
})(PS["Test.FlareDoc"] = PS["Test.FlareDoc"] || {});
(function(exports) {
  // Generated by purs version 0.11.3
  "use strict";
  var Color = PS["Color"];
  var Color_Blending = PS["Color.Blending"];
  var Color_Scale = PS["Color.Scale"];
  var Color_Scale_Perceptual = PS["Color.Scale.Perceptual"];
  var Color_Scheme_Clrs = PS["Color.Scheme.Clrs"];
  var Color_Scheme_Harmonic = PS["Color.Scheme.Harmonic"];
  var Color_Scheme_MaterialDesign = PS["Color.Scheme.MaterialDesign"];
  var Color_Scheme_X11 = PS["Color.Scheme.X11"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Category = PS["Control.Category"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Array = PS["Data.Array"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_List = PS["Data.List"];
  var Data_List_Types = PS["Data.List.Types"];
  var Data_NonEmpty = PS["Data.NonEmpty"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var Data_Tuple = PS["Data.Tuple"];
  var Flare = PS["Flare"];
  var Flare_Smolder = PS["Flare.Smolder"];
  var Prelude = PS["Prelude"];
  var Test_FlareCheck = PS["Test.FlareCheck"];
  var Test_FlareDoc = PS["Test.FlareDoc"];
  var Text_Smolder_HTML = PS["Text.Smolder.HTML"];
  var Text_Smolder_HTML_Attributes = PS["Text.Smolder.HTML.Attributes"];
  var Text_Smolder_Markup = PS["Text.Smolder.Markup"];        
  var TColorSpace = function (x) {
      return x;
  };
  var TColorScale = function (x) {
      return x;
  };
  var TColor = function (x) {
      return x;
  };
  var TBlendMode = function (x) {
      return x;
  };
  var Int255 = function (x) {
      return x;
  };
  var ColorList = (function () {
      function ColorList(value0) {
          this.value0 = value0;
      };
      ColorList.create = function (value0) {
          return new ColorList(value0);
      };
      return ColorList;
  })();
  var Grayscale = (function () {
      function Grayscale() {

      };
      Grayscale.value = new Grayscale();
      return Grayscale;
  })();
  var Spectrum = (function () {
      function Spectrum() {

      };
      Spectrum.value = new Spectrum();
      return Spectrum;
  })();
  var SpectrumLCh = (function () {
      function SpectrumLCh() {

      };
      SpectrumLCh.value = new SpectrumLCh();
      return SpectrumLCh;
  })();
  var BlueToRed = (function () {
      function BlueToRed() {

      };
      BlueToRed.value = new BlueToRed();
      return BlueToRed;
  })();
  var YellowToRed = (function () {
      function YellowToRed() {

      };
      YellowToRed.value = new YellowToRed();
      return YellowToRed;
  })();
  var Hot = (function () {
      function Hot() {

      };
      Hot.value = new Hot();
      return Hot;
  })();
  var Cool = (function () {
      function Cool() {

      };
      Cool.value = new Cool();
      return Cool;
  })();
  var Magma = (function () {
      function Magma() {

      };
      Magma.value = new Magma();
      return Magma;
  })();
  var Inferno = (function () {
      function Inferno() {

      };
      Inferno.value = new Inferno();
      return Inferno;
  })();
  var Plasma = (function () {
      function Plasma() {

      };
      Plasma.value = new Plasma();
      return Plasma;
  })();
  var Viridis = (function () {
      function Viridis() {

      };
      Viridis.value = new Viridis();
      return Viridis;
  })();
  var textReadable = function (bgColor) {
      return function (textColor) {
          var ratio = Color.contrast(bgColor)(textColor);
          var width = Data_Show.show(Data_Show.showNumber)((ratio - 1.0) * 20.0);
          var isRead = Color.isReadable(bgColor)(textColor);
          var css = "background-color: " + (Color.cssStringHSLA(bgColor) + (";" + ("width: 380px; height: 50px;" + ("border: 1px solid black;" + ("padding: 10px; color: " + Color.cssStringHSLA(textColor))))));
          var barFg = Color.cssStringHSLA((function () {
              if (isRead) {
                  return Color_Scheme_X11.green;
              };
              return Color_Scheme_X11.red;
          })());
          var barBg = Color.cssStringHSLA(Color.black);
          var answ = (function () {
              if (isRead) {
                  return "yes";
              };
              return "no";
          })();
          return Control_Bind.discard(Control_Bind.discardUnit)(Text_Smolder_Markup.bindMarkupM)(Text_Smolder_Markup["with"](Text_Smolder_Markup.attributableMarkupMF)(Text_Smolder_HTML.div)(Text_Smolder_HTML_Attributes.style(css))(Text_Smolder_Markup.text("Is this text well readable?")))(function () {
              return Control_Bind.discard(Control_Bind.discardUnit)(Text_Smolder_Markup.bindMarkupM)(Text_Smolder_HTML.p(Data_Semigroup.append(Text_Smolder_Markup.semigroupMarkupM)(Text_Smolder_Markup.text("WCAG says: "))(Text_Smolder_HTML.b(Text_Smolder_Markup.text(answ)))))(function () {
                  return Text_Smolder_Markup["with"](Text_Smolder_Markup.attributableMarkupMF)(Text_Smolder_HTML.div)(Text_Smolder_HTML_Attributes.style("width: 400px; height: 15px; background-color: " + barBg))(Text_Smolder_Markup["with"](Text_Smolder_Markup.attributableMarkupMF)(Text_Smolder_HTML.div)(Text_Smolder_HTML_Attributes.style("width: " + (width + ("px; height: 15px;" + ("background-color: " + barFg)))))(Text_Smolder_Markup.text("")));
              });
          });
      };
  };
  var runTColor = function (v) {
      return v;
  };
  var modeToString = function (v) {
      if (v instanceof Color_Blending.Multiply) {
          return "Multiply";
      };
      if (v instanceof Color_Blending.Screen) {
          return "Screen";
      };
      if (v instanceof Color_Blending.Overlay) {
          return "Overlay";
      };
      throw new Error("Failed pattern match at Main line 62, column 1 - line 63, column 1: " + [ v.constructor.name ]);
  };
  var mapX11 = [ new Data_Tuple.Tuple("black", Color.black), new Data_Tuple.Tuple("white", Color.white), new Data_Tuple.Tuple("aliceblue", Color_Scheme_X11.aliceblue), new Data_Tuple.Tuple("antiquewhite", Color_Scheme_X11.antiquewhite), new Data_Tuple.Tuple("aqua", Color_Scheme_X11.aqua), new Data_Tuple.Tuple("aquamarine", Color_Scheme_X11.aquamarine), new Data_Tuple.Tuple("azure", Color_Scheme_X11.azure), new Data_Tuple.Tuple("beige", Color_Scheme_X11.beige), new Data_Tuple.Tuple("bisque", Color_Scheme_X11.bisque), new Data_Tuple.Tuple("blanchedalmond", Color_Scheme_X11.blanchedalmond), new Data_Tuple.Tuple("blue", Color_Scheme_X11.blue), new Data_Tuple.Tuple("blueviolet", Color_Scheme_X11.blueviolet), new Data_Tuple.Tuple("brown", Color_Scheme_X11.brown), new Data_Tuple.Tuple("burlywood", Color_Scheme_X11.burlywood), new Data_Tuple.Tuple("cadetblue", Color_Scheme_X11.cadetblue), new Data_Tuple.Tuple("chartreuse", Color_Scheme_X11.chartreuse), new Data_Tuple.Tuple("chocolate", Color_Scheme_X11.chocolate), new Data_Tuple.Tuple("coral", Color_Scheme_X11.coral), new Data_Tuple.Tuple("cornflowerblue", Color_Scheme_X11.cornflowerblue), new Data_Tuple.Tuple("cornsilk", Color_Scheme_X11.cornsilk), new Data_Tuple.Tuple("crimson", Color_Scheme_X11.crimson), new Data_Tuple.Tuple("cyan", Color_Scheme_X11.cyan), new Data_Tuple.Tuple("darkblue", Color_Scheme_X11.darkblue), new Data_Tuple.Tuple("darkcyan", Color_Scheme_X11.darkcyan), new Data_Tuple.Tuple("darkgoldenrod", Color_Scheme_X11.darkgoldenrod), new Data_Tuple.Tuple("darkgray", Color_Scheme_X11.darkgray), new Data_Tuple.Tuple("darkgreen", Color_Scheme_X11.darkgreen), new Data_Tuple.Tuple("darkgrey", Color_Scheme_X11.darkgrey), new Data_Tuple.Tuple("darkkhaki", Color_Scheme_X11.darkkhaki), new Data_Tuple.Tuple("darkmagenta", Color_Scheme_X11.darkmagenta), new Data_Tuple.Tuple("darkolivegreen", Color_Scheme_X11.darkolivegreen), new Data_Tuple.Tuple("darkorange", Color_Scheme_X11.darkorange), new Data_Tuple.Tuple("darkorchid", Color_Scheme_X11.darkorchid), new Data_Tuple.Tuple("darkred", Color_Scheme_X11.darkred), new Data_Tuple.Tuple("darksalmon", Color_Scheme_X11.darksalmon), new Data_Tuple.Tuple("darkseagreen", Color_Scheme_X11.darkseagreen), new Data_Tuple.Tuple("darkslateblue", Color_Scheme_X11.darkslateblue), new Data_Tuple.Tuple("darkslategray", Color_Scheme_X11.darkslategray), new Data_Tuple.Tuple("darkslategrey", Color_Scheme_X11.darkslategrey), new Data_Tuple.Tuple("darkturquoise", Color_Scheme_X11.darkturquoise), new Data_Tuple.Tuple("darkviolet", Color_Scheme_X11.darkviolet), new Data_Tuple.Tuple("deeppink", Color_Scheme_X11.deeppink), new Data_Tuple.Tuple("deepskyblue", Color_Scheme_X11.deepskyblue), new Data_Tuple.Tuple("dimgray", Color_Scheme_X11.dimgray), new Data_Tuple.Tuple("dimgrey", Color_Scheme_X11.dimgrey), new Data_Tuple.Tuple("dodgerblue", Color_Scheme_X11.dodgerblue), new Data_Tuple.Tuple("firebrick", Color_Scheme_X11.firebrick), new Data_Tuple.Tuple("floralwhite", Color_Scheme_X11.floralwhite), new Data_Tuple.Tuple("forestgreen", Color_Scheme_X11.forestgreen), new Data_Tuple.Tuple("fuchsia", Color_Scheme_X11.fuchsia), new Data_Tuple.Tuple("gainsboro", Color_Scheme_X11.gainsboro), new Data_Tuple.Tuple("ghostwhite", Color_Scheme_X11.ghostwhite), new Data_Tuple.Tuple("gold", Color_Scheme_X11.gold), new Data_Tuple.Tuple("goldenrod", Color_Scheme_X11.goldenrod), new Data_Tuple.Tuple("gray", Color_Scheme_X11.gray), new Data_Tuple.Tuple("green", Color_Scheme_X11.green), new Data_Tuple.Tuple("greenyellow", Color_Scheme_X11.greenyellow), new Data_Tuple.Tuple("grey", Color_Scheme_X11.grey), new Data_Tuple.Tuple("honeydew", Color_Scheme_X11.honeydew), new Data_Tuple.Tuple("hotpink", Color_Scheme_X11.hotpink), new Data_Tuple.Tuple("indianred", Color_Scheme_X11.indianred), new Data_Tuple.Tuple("indigo", Color_Scheme_X11.indigo), new Data_Tuple.Tuple("ivory", Color_Scheme_X11.ivory), new Data_Tuple.Tuple("khaki", Color_Scheme_X11.khaki), new Data_Tuple.Tuple("lavender", Color_Scheme_X11.lavender), new Data_Tuple.Tuple("lavenderblush", Color_Scheme_X11.lavenderblush), new Data_Tuple.Tuple("lawngreen", Color_Scheme_X11.lawngreen), new Data_Tuple.Tuple("lemonchiffon", Color_Scheme_X11.lemonchiffon), new Data_Tuple.Tuple("lightblue", Color_Scheme_X11.lightblue), new Data_Tuple.Tuple("lightcoral", Color_Scheme_X11.lightcoral), new Data_Tuple.Tuple("lightcyan", Color_Scheme_X11.lightcyan), new Data_Tuple.Tuple("lightgoldenrodyellow", Color_Scheme_X11.lightgoldenrodyellow), new Data_Tuple.Tuple("lightgray", Color_Scheme_X11.lightgray), new Data_Tuple.Tuple("lightgreen", Color_Scheme_X11.lightgreen), new Data_Tuple.Tuple("lightgrey", Color_Scheme_X11.lightgrey), new Data_Tuple.Tuple("lightpink", Color_Scheme_X11.lightpink), new Data_Tuple.Tuple("lightsalmon", Color_Scheme_X11.lightsalmon), new Data_Tuple.Tuple("lightseagreen", Color_Scheme_X11.lightseagreen), new Data_Tuple.Tuple("lightskyblue", Color_Scheme_X11.lightskyblue), new Data_Tuple.Tuple("lightslategray", Color_Scheme_X11.lightslategray), new Data_Tuple.Tuple("lightslategrey", Color_Scheme_X11.lightslategrey), new Data_Tuple.Tuple("lightsteelblue", Color_Scheme_X11.lightsteelblue), new Data_Tuple.Tuple("lightyellow", Color_Scheme_X11.lightyellow), new Data_Tuple.Tuple("lime", Color_Scheme_X11.lime), new Data_Tuple.Tuple("limegreen", Color_Scheme_X11.limegreen), new Data_Tuple.Tuple("linen", Color_Scheme_X11.linen), new Data_Tuple.Tuple("magenta", Color_Scheme_X11.magenta), new Data_Tuple.Tuple("maroon", Color_Scheme_X11.maroon), new Data_Tuple.Tuple("mediumaquamarine", Color_Scheme_X11.mediumaquamarine), new Data_Tuple.Tuple("mediumblue", Color_Scheme_X11.mediumblue), new Data_Tuple.Tuple("mediumorchid", Color_Scheme_X11.mediumorchid), new Data_Tuple.Tuple("mediumpurple", Color_Scheme_X11.mediumpurple), new Data_Tuple.Tuple("mediumseagreen", Color_Scheme_X11.mediumseagreen), new Data_Tuple.Tuple("mediumslateblue", Color_Scheme_X11.mediumslateblue), new Data_Tuple.Tuple("mediumspringgreen", Color_Scheme_X11.mediumspringgreen), new Data_Tuple.Tuple("mediumturquoise", Color_Scheme_X11.mediumturquoise), new Data_Tuple.Tuple("mediumvioletred", Color_Scheme_X11.mediumvioletred), new Data_Tuple.Tuple("midnightblue", Color_Scheme_X11.midnightblue), new Data_Tuple.Tuple("mintcream", Color_Scheme_X11.mintcream), new Data_Tuple.Tuple("mistyrose", Color_Scheme_X11.mistyrose), new Data_Tuple.Tuple("moccasin", Color_Scheme_X11.moccasin), new Data_Tuple.Tuple("navajowhite", Color_Scheme_X11.navajowhite), new Data_Tuple.Tuple("navy", Color_Scheme_X11.navy), new Data_Tuple.Tuple("oldlace", Color_Scheme_X11.oldlace), new Data_Tuple.Tuple("olive", Color_Scheme_X11.olive), new Data_Tuple.Tuple("olivedrab", Color_Scheme_X11.olivedrab), new Data_Tuple.Tuple("orange", Color_Scheme_X11.orange), new Data_Tuple.Tuple("orangered", Color_Scheme_X11.orangered), new Data_Tuple.Tuple("orchid", Color_Scheme_X11.orchid), new Data_Tuple.Tuple("palegoldenrod", Color_Scheme_X11.palegoldenrod), new Data_Tuple.Tuple("palegreen", Color_Scheme_X11.palegreen), new Data_Tuple.Tuple("paleturquoise", Color_Scheme_X11.paleturquoise), new Data_Tuple.Tuple("palevioletred", Color_Scheme_X11.palevioletred), new Data_Tuple.Tuple("papayawhip", Color_Scheme_X11.papayawhip), new Data_Tuple.Tuple("peachpuff", Color_Scheme_X11.peachpuff), new Data_Tuple.Tuple("peru", Color_Scheme_X11.peru), new Data_Tuple.Tuple("pink", Color_Scheme_X11.pink), new Data_Tuple.Tuple("plum", Color_Scheme_X11.plum), new Data_Tuple.Tuple("powderblue", Color_Scheme_X11.powderblue), new Data_Tuple.Tuple("purple", Color_Scheme_X11.purple), new Data_Tuple.Tuple("red", Color_Scheme_X11.red), new Data_Tuple.Tuple("rosybrown", Color_Scheme_X11.rosybrown), new Data_Tuple.Tuple("royalblue", Color_Scheme_X11.royalblue), new Data_Tuple.Tuple("saddlebrown", Color_Scheme_X11.saddlebrown), new Data_Tuple.Tuple("salmon", Color_Scheme_X11.salmon), new Data_Tuple.Tuple("sandybrown", Color_Scheme_X11.sandybrown), new Data_Tuple.Tuple("seagreen", Color_Scheme_X11.seagreen), new Data_Tuple.Tuple("seashell", Color_Scheme_X11.seashell), new Data_Tuple.Tuple("sienna", Color_Scheme_X11.sienna), new Data_Tuple.Tuple("silver", Color_Scheme_X11.silver), new Data_Tuple.Tuple("skyblue", Color_Scheme_X11.skyblue), new Data_Tuple.Tuple("slateblue", Color_Scheme_X11.slateblue), new Data_Tuple.Tuple("slategray", Color_Scheme_X11.slategray), new Data_Tuple.Tuple("slategrey", Color_Scheme_X11.slategrey), new Data_Tuple.Tuple("snow", Color_Scheme_X11.snow), new Data_Tuple.Tuple("springgreen", Color_Scheme_X11.springgreen), new Data_Tuple.Tuple("steelblue", Color_Scheme_X11.steelblue), new Data_Tuple.Tuple("tan", Color_Scheme_X11.tan), new Data_Tuple.Tuple("teal", Color_Scheme_X11.teal), new Data_Tuple.Tuple("thistle", Color_Scheme_X11.thistle), new Data_Tuple.Tuple("tomato", Color_Scheme_X11.tomato), new Data_Tuple.Tuple("turquoise", Color_Scheme_X11.turquoise), new Data_Tuple.Tuple("violet", Color_Scheme_X11.violet), new Data_Tuple.Tuple("wheat", Color_Scheme_X11.wheat), new Data_Tuple.Tuple("whitesmoke", Color_Scheme_X11.whitesmoke), new Data_Tuple.Tuple("yellow", Color_Scheme_X11.yellow), new Data_Tuple.Tuple("yellowgreen", Color_Scheme_X11.yellowgreen) ];
  var nameColor = function (color) {
      var toCell = function (v) {
          var css = "background-color: " + (Color.cssStringHSLA(v.value1) + (";" + ("width: 260px; height: 50px; display: inline-block; font-size: 13px;" + ("margin-top: 10px; margin-right: 10px; border: 1px solid black;" + ("padding: 5px; color: " + Color.cssStringHSLA(Color.textColor(v.value1)))))));
          return Text_Smolder_Markup["with"](Text_Smolder_Markup.attributableMarkupMF)(Text_Smolder_HTML.div)(Text_Smolder_HTML_Attributes.style(css))(Text_Smolder_HTML.code(Text_Smolder_Markup.text(v.value0)));
      };
      var distC = function (v) {
          return Color.distance(color)(v.value1);
      };
      var closest = Data_Array.take(3)(Data_Array.sortBy(Data_Ord.comparing(Data_Ord.ordNumber)(distC))(mapX11));
      return Text_Smolder_HTML.div(Data_Foldable.foldMap(Data_Foldable.foldableArray)(Text_Smolder_Markup.monoidMarkup)(toCell)(closest));
  };
  var interactiveTColorScale = new Test_FlareCheck.Interactive(function (ui) {
      var css = function (scale) {
          return "background: linear-gradient(to right, " + (Color_Scale.cssColorStops(scale) + (");" + "width: 100%; height: 30px;"));
      };
      var pretty = function (v) {
          return Text_Smolder_Markup["with"](Text_Smolder_Markup.attributableMarkupMF)(Text_Smolder_HTML.div)(Text_Smolder_HTML_Attributes.style(css(v)))(Text_Smolder_Markup.text(""));
      };
      return Data_Functor.map(Flare.functorUI)(function ($128) {
          return Test_FlareCheck.SetHTML.create(pretty($128));
      })(ui);
  });
  var flare4 = Data_Functor.map(Flare.functorUI)(nameColor)(Flare.color("Input color")(Color_Scheme_X11.salmon));
  var flare1 = Control_Apply.apply(Flare.applyUI)(Data_Functor.map(Flare.functorUI)(textReadable)(Flare.color("Background")(Color_Scheme_X11.mediumvioletred)))(Flare.color("Text")(Color.black));
  var flammableTColorScale = new Test_FlareCheck.Flammable((function () {
      var toString = function (v) {
          if (v instanceof Grayscale) {
              return "grayscale";
          };
          if (v instanceof Spectrum) {
              return "spectrum";
          };
          if (v instanceof SpectrumLCh) {
              return "spectrumLCh";
          };
          if (v instanceof BlueToRed) {
              return "blueToRed";
          };
          if (v instanceof YellowToRed) {
              return "yellowToRed";
          };
          if (v instanceof Hot) {
              return "hot";
          };
          if (v instanceof Cool) {
              return "cool";
          };
          if (v instanceof Magma) {
              return "magma";
          };
          if (v instanceof Inferno) {
              return "inferno";
          };
          if (v instanceof Plasma) {
              return "plasma";
          };
          if (v instanceof Viridis) {
              return "viridis";
          };
          throw new Error("Failed pattern match at Main line 117, column 7 - line 117, column 43: " + [ v.constructor.name ]);
      };
      var toColorScale = function (v) {
          if (v instanceof Grayscale) {
              return Color_Scale.grayscale;
          };
          if (v instanceof Spectrum) {
              return Color_Scale.spectrum;
          };
          if (v instanceof SpectrumLCh) {
              return Color_Scale.spectrumLCh;
          };
          if (v instanceof BlueToRed) {
              return Color_Scale.blueToRed;
          };
          if (v instanceof YellowToRed) {
              return Color_Scale.yellowToRed;
          };
          if (v instanceof Hot) {
              return Color_Scale.hot;
          };
          if (v instanceof Cool) {
              return Color_Scale.cool;
          };
          if (v instanceof Magma) {
              return Color_Scale_Perceptual.magma;
          };
          if (v instanceof Inferno) {
              return Color_Scale_Perceptual.inferno;
          };
          if (v instanceof Plasma) {
              return Color_Scale_Perceptual.plasma;
          };
          if (v instanceof Viridis) {
              return Color_Scale_Perceptual.viridis;
          };
          throw new Error("Failed pattern match at Main line 99, column 11 - line 127, column 41: " + [ v.constructor.name ]);
      };
      return Data_Functor.map(Flare.functorUI)(function ($129) {
          return TColorScale(toColorScale($129));
      })(Flare.fieldset("ColorScale")(Flare.select(Data_Foldable.foldableArray)("Choose")(new Data_NonEmpty.NonEmpty(Grayscale.value, [ Spectrum.value, SpectrumLCh.value, BlueToRed.value, YellowToRed.value, Hot.value, Cool.value, Magma.value, Inferno.value, Plasma.value, Viridis.value ]))(toString)));
  })());
  var flammableTColor = new Test_FlareCheck.Flammable(Data_Functor.map(Flare.functorUI)(TColor)(Flare.fieldset("Color")(Control_Apply.apply(Flare.applyUI)(Control_Apply.apply(Flare.applyUI)(Data_Functor.map(Flare.functorUI)(Color.hsl)(Flare.numberSlider("Hue")(0.0)(360.0)(0.1)(231.0)))(Flare.numberSlider("Saturation")(0.0)(1.0)(1.0e-3)(0.48)))(Flare.numberSlider("Lightness")(0.0)(1.0)(1.0e-3)(0.48)))));
  var flammableTBlendMode = new Test_FlareCheck.Flammable(Data_Functor.map(Flare.functorUI)(TBlendMode)(Flare.select(Data_Foldable.foldableArray)("BlendMode")(new Data_NonEmpty.NonEmpty(Color_Blending.Multiply.value, [ Color_Blending.Screen.value, Color_Blending.Overlay.value ]))(modeToString)));
  var flammableInt255 = new Test_FlareCheck.Flammable(Data_Functor.map(Flare.functorUI)(Int255)(Flare.intSlider("Int")(0)(255)(100)));
  var cubehelix$prime = function (b) {
      return function (e) {
          return function (gamma) {
              var gen = function (v) {
                  return Color.mixCubehelix(gamma)(b)(e);
              };
              return Color_Scale.cssColorStopsRGB(Color_Scale.minColorStops(100)(gen)(new Color_Scale.ColorStops(b, Data_List_Types.Nil.value, e)));
          };
      };
  };
  var csToString = function (v) {
      if (v instanceof Color.RGB) {
          return "RGB";
      };
      if (v instanceof Color.HSL) {
          return "HSL";
      };
      if (v instanceof Color.LCh) {
          return "LCh";
      };
      if (v instanceof Color.Lab) {
          return "Lab";
      };
      throw new Error("Failed pattern match at Main line 71, column 1 - line 72, column 1: " + [ v.constructor.name ]);
  };
  var flammableTColorSpace = new Test_FlareCheck.Flammable(Data_Functor.map(Flare.functorUI)(TColorSpace)(Flare.select(Data_Foldable.foldableArray)("ColorSpace")(new Data_NonEmpty.NonEmpty(Color.HSL.value, [ Color.RGB.value, Color.LCh.value, Color.Lab.value ]))(csToString)));
  var palettes = function (c1) {
      return function (c2) {
          return function (n) {
              var scale = function (mode) {
                  return Color_Scale.uniformScale(Data_List_Types.foldableList)(mode)(c1)(Data_List_Types.Nil.value)(c2);
              };
              var css = function (col) {
                  return "width: 50px; height: 50px; background-color: " + Color.cssStringHSLA(col);
              };
              var cell = function (col) {
                  return Text_Smolder_Markup["with"](Text_Smolder_Markup.attributableMarkupMF)(Text_Smolder_HTML.td)(Text_Smolder_HTML_Attributes.style(css(col)))(Text_Smolder_Markup.text(""));
              };
              var row = function (mode) {
                  return Text_Smolder_HTML.tr(Data_Semigroup.append(Text_Smolder_Markup.semigroupMarkupM)(Text_Smolder_HTML.td(Text_Smolder_Markup.text(csToString(mode))))(Data_Foldable.foldMap(Data_List_Types.foldableList)(Text_Smolder_Markup.monoidMarkup)(cell)(Color_Scale.colors(scale(mode))(n))));
              };
              return Text_Smolder_HTML.table(Data_Foldable.foldMap(Data_Foldable.foldableArray)(Text_Smolder_Markup.monoidMarkup)(row)([ Color.HSL.value, Color.RGB.value, Color.Lab.value, Color.LCh.value ]));
          };
      };
  };
  var flare3 = Control_Apply.apply(Flare.applyUI)(Control_Apply.apply(Flare.applyUI)(Data_Functor.map(Flare.functorUI)(palettes)(Flare.color("From")(Color.fromInt(16119518))))(Flare.color("To")(Color.fromInt(1901867))))(Flare.intSlider("Number")(4)(10)(6));
  var colorScaleDiv = function (stops) {
      var css = "background: linear-gradient(to right, " + (stops + (");" + "width: 100%; height: 30px;"));
      return Text_Smolder_Markup["with"](Text_Smolder_Markup.attributableMarkupMF)(Text_Smolder_HTML.div)(Text_Smolder_HTML_Attributes.style(css))(Text_Smolder_Markup.text(""));
  };
  var flare5 = (function () {
      var hslPick = function (title) {
          return function (h) {
              return function (l) {
                  return Flare.fieldset(title)(Control_Apply.apply(Flare.applyUI)(Control_Apply.apply(Flare.applyUI)(Data_Functor.map(Flare.functorUI)(Color.hsl)(Flare.numberSlider("Hue (-360\xb0 .. 720\xb0)")(-360.0)(720.0)(0.1)(h)))(Flare.numberSlider("Saturation")(0.0)(1.0)(1.0e-2)(1.0)))(Control_Applicative.pure(Flare.applicativeUI)(l)));
              };
          };
      };
      return Data_Functor.map(Flare.functorUI)(colorScaleDiv)(Control_Apply.apply(Flare.applyUI)(Control_Apply.apply(Flare.applyUI)(Data_Functor.map(Flare.functorUI)(cubehelix$prime)(hslPick("First color")(360.0)(0.0)))(hslPick("Last color")(-240.0)(1.0)))(Flare.numberSlider("Gamma (0.5 .. 3.0)")(0.5)(3.0)(0.1)(1.0)));
  })();
  var colorBox = function (c) {
      var repr = Color.cssStringHSLA(c);
      var css = "background-color: " + (repr + (";" + ("width: 260px; height: 50px; display: inline-block; font-size: 13px;" + ("margin-top: 10px; margin-right: 10px; border: 1px solid black;" + ("padding: 5px; color: " + Color.cssStringHSLA(Color.textColor(c)))))));
      return Text_Smolder_Markup["with"](Text_Smolder_Markup.attributableMarkupMF)(Text_Smolder_HTML.div)(Text_Smolder_HTML_Attributes.style(css))(Text_Smolder_HTML.code(Text_Smolder_Markup.text(repr)));
  };
  var interactiveColorList = new Test_FlareCheck.Interactive(function (ui) {
      var pretty = function (v) {
          return Data_Foldable.foldMap(Data_Foldable.foldableArray)(Text_Smolder_Markup.monoidMarkup)(colorBox)(v.value0);
      };
      return Data_Functor.map(Flare.functorUI)(function ($130) {
          return Test_FlareCheck.SetHTML.create(pretty($130));
      })(ui);
  });
  var interactiveTColor = new Test_FlareCheck.Interactive(function (ui) {
      return Data_Functor.map(Flare.functorUI)(function ($131) {
          return Test_FlareCheck.SetHTML.create(colorBox(runTColor($131)));
      })(ui);
  });
  var blendUI = function (c1) {
      return function (c2) {
          return function (mode) {
              var css3 = "background-color: " + (Color.cssStringHSLA(Color_Blending.blend(mode)(c1)(c2)) + (";" + ("width: 50px; height: 50px; border: 1px solid black;" + "position: absolute; top: 50px; left: 50px;")));
              var css2 = "background-color: " + (Color.cssStringHSLA(c2) + (";" + ("width: 100px; height: 100px; border: 1px solid black;" + "position: absolute; top: 50px; left: 50px;")));
              var css1 = "background-color: " + (Color.cssStringHSLA(c1) + (";" + ("width: 100px; height: 100px; border: 1px solid black;" + "position: absolute; top: 0px; left: 0px;")));
              return Control_Bind.discard(Control_Bind.discardUnit)(Text_Smolder_Markup.bindMarkupM)(Text_Smolder_HTML.p(Text_Smolder_Markup.text("These are three separate divs (no transparency):")))(function () {
                  return Text_Smolder_Markup["with"](Text_Smolder_Markup.attributableMarkupMF)(Text_Smolder_HTML.div)(Text_Smolder_HTML_Attributes.style("position: relative; height: 150px;"))(Control_Bind.discard(Control_Bind.discardUnit)(Text_Smolder_Markup.bindMarkupM)(Text_Smolder_Markup["with"](Text_Smolder_Markup.attributableMarkupMF)(Text_Smolder_HTML.div)(Text_Smolder_HTML_Attributes.style(css1))(Text_Smolder_Markup.text("")))(function () {
                      return Control_Bind.discard(Control_Bind.discardUnit)(Text_Smolder_Markup.bindMarkupM)(Text_Smolder_Markup["with"](Text_Smolder_Markup.attributableMarkupMF)(Text_Smolder_HTML.div)(Text_Smolder_HTML_Attributes.style(css2))(Text_Smolder_Markup.text("")))(function () {
                          return Text_Smolder_Markup["with"](Text_Smolder_Markup.attributableMarkupMF)(Text_Smolder_HTML.div)(Text_Smolder_HTML_Attributes.style(css3))(Text_Smolder_Markup.text(""));
                      });
                  }));
              });
          };
      };
  };
  var flare2 = Control_Apply.apply(Flare.applyUI)(Control_Apply.apply(Flare.applyUI)(Data_Functor.map(Flare.functorUI)(blendUI)(Flare.color("Background")(Color_Scheme_X11.royalblue)))(Flare.color("Foreground")(Color_Scheme_X11.gold)))(Flare.select(Data_Foldable.foldableArray)("BlendMode")(new Data_NonEmpty.NonEmpty(Color_Blending.Multiply.value, [ Color_Blending.Screen.value, Color_Blending.Overlay.value ]))(modeToString));
  var main = function __do() {
      Test_FlareDoc.withPackage("purescript-colors.json")(function (dict) {
          var doc = function (dictInteractive) {
              return Test_FlareDoc["flareDoc'"](dictInteractive)("doc-color")(dict)("Color");
          };
          return function __do() {
              doc(Test_FlareCheck.interactiveFunction(flammableTColor)(interactiveTColor))("hsl")(Control_Category.id(Control_Category.categoryFn))();
              doc(Test_FlareCheck.interactiveFunction(flammableInt255)(Test_FlareCheck.interactiveFunction(flammableInt255)(Test_FlareCheck.interactiveFunction(flammableInt255)(interactiveTColor))))("rgb")(function (v) {
                  return function (v1) {
                      return function (v2) {
                          return Color.rgb(v)(v1)(v2);
                      };
                  };
              })();
              doc(Test_FlareCheck.interactiveFunction(flammableTColor)(Test_FlareCheck.interactiveString))("toHexString")(function (v) {
                  return Color.toHexString(v);
              })();
              doc(Test_FlareCheck.interactiveFunction(flammableTColor)(Test_FlareCheck.interactiveString))("cssStringHSLA")(function (v) {
                  return Color.cssStringHSLA(v);
              })();
              doc(interactiveTColor)("black")(Color.black)();
              doc(interactiveTColor)("white")(Color.white)();
              doc(Test_FlareCheck.interactiveFunction(Test_FlareCheck.flammableSmallNumber)(interactiveTColor))("graytone")(function (v) {
                  return Color.graytone(v);
              })();
              doc(Test_FlareCheck.interactiveFunction(flammableTColor)(interactiveColorList))("complementary")(function (v) {
                  return new ColorList([ v, Color.complementary(v) ]);
              })();
              doc(Test_FlareCheck.interactiveFunction(Test_FlareCheck.flammableSmallNumber)(Test_FlareCheck.interactiveFunction(flammableTColor)(interactiveColorList)))("lighten")(function (v) {
                  return function (v1) {
                      return new ColorList([ v1, Color.lighten(v)(v1) ]);
                  };
              })();
              doc(Test_FlareCheck.interactiveFunction(Test_FlareCheck.flammableSmallNumber)(Test_FlareCheck.interactiveFunction(flammableTColor)(interactiveColorList)))("darken")(function (v) {
                  return function (v1) {
                      return new ColorList([ v1, Color.darken(v)(v1) ]);
                  };
              })();
              doc(Test_FlareCheck.interactiveFunction(Test_FlareCheck.flammableSmallNumber)(Test_FlareCheck.interactiveFunction(flammableTColor)(interactiveColorList)))("saturate")(function (v) {
                  return function (v1) {
                      return new ColorList([ v1, Color.saturate(v)(v1) ]);
                  };
              })();
              doc(Test_FlareCheck.interactiveFunction(Test_FlareCheck.flammableSmallNumber)(Test_FlareCheck.interactiveFunction(flammableTColor)(interactiveColorList)))("desaturate")(function (v) {
                  return function (v1) {
                      return new ColorList([ v1, Color.desaturate(v)(v1) ]);
                  };
              })();
              doc(Test_FlareCheck.interactiveFunction(flammableTColorSpace)(Test_FlareCheck.interactiveFunction(flammableTColor)(Test_FlareCheck.interactiveFunction(flammableTColor)(Test_FlareCheck.interactiveFunction(Test_FlareCheck.flammableSmallNumber)(interactiveColorList)))))("mix")(function (v) {
                  return function (v1) {
                      return function (v2) {
                          return function (v3) {
                              return new ColorList([ v1, v2, Color.mix(v)(v1)(v2)(v3) ]);
                          };
                      };
                  };
              })();
              doc(Test_FlareCheck.interactiveFunction(Test_FlareCheck.flammableNumber)(Test_FlareCheck.interactiveFunction(flammableTColor)(Test_FlareCheck.interactiveFunction(flammableTColor)(Test_FlareCheck.interactiveFunction(Test_FlareCheck.flammableSmallNumber)(interactiveColorList)))))("mixCubehelix")(function (gamma) {
                  return function (v) {
                      return function (v1) {
                          return function (v2) {
                              return new ColorList([ v, v1, Color.mixCubehelix(gamma)(v)(v1)(v2) ]);
                          };
                      };
                  };
              })();
              doc(Test_FlareCheck.interactiveFunction(flammableTColor)(Test_FlareCheck.interactiveNumber))("brightness")(function (v) {
                  return Color.brightness(v);
              })();
              doc(Test_FlareCheck.interactiveFunction(flammableTColor)(Test_FlareCheck.interactiveNumber))("luminance")(function (v) {
                  return Color.luminance(v);
              })();
              doc(Test_FlareCheck.interactiveFunction(flammableTColor)(interactiveColorList))("textColor")(function (v) {
                  return new ColorList([ v, Color.textColor(v) ]);
              })();
              var docblend = function (dictInteractive) {
                  return Test_FlareDoc["flareDoc'"](dictInteractive)("doc-blending")(dict)("Color.Blending");
              };
              docblend(Test_FlareCheck.interactiveFunction(flammableTBlendMode)(Test_FlareCheck.interactiveFunction(flammableTColor)(Test_FlareCheck.interactiveFunction(flammableTColor)(interactiveColorList))))("blend")(function (v) {
                  return function (v1) {
                      return function (v2) {
                          return new ColorList([ v1, v2, Color_Blending.blend(v)(v1)(v2) ]);
                      };
                  };
              })();
              var docscale = function (dictInteractive) {
                  return Test_FlareDoc["flareDoc'"](dictInteractive)("doc-scale")(dict)("Color.Scale");
              };
              docscale(Test_FlareCheck.interactiveFunction(flammableTColorSpace)(Test_FlareCheck.interactiveFunction(flammableTColor)(Test_FlareCheck.interactiveFunction(flammableTColor)(interactiveTColorScale))))("colorScale")(function (v) {
                  return function (v1) {
                      return function (v2) {
                          return TColorScale(Color_Scale.colorScale(v)(v1)(Data_List_Types.Nil.value)(v2));
                      };
                  };
              })();
              docscale(Test_FlareCheck.interactiveFunction(flammableTColorScale)(Test_FlareCheck.interactiveFunction(Test_FlareCheck.flammableSmallNumber)(Test_FlareCheck.interactiveFunction(flammableTColor)(interactiveTColorScale))))("addStop")(function (v) {
                  return function (v1) {
                      return function (v2) {
                          return TColorScale(Color_Scale.addStop(v)(v2)(v1));
                      };
                  };
              })();
              docscale(Test_FlareCheck.interactiveFunction(flammableTColorScale)(Test_FlareCheck.interactiveFunction(Test_FlareCheck.flammableSmallNumber)(interactiveTColor)))("sample")(function (v) {
                  return function (v1) {
                      return Color_Scale.sample(v)(v1);
                  };
              })();
              docscale(Test_FlareCheck.interactiveFunction(flammableTColorScale)(Test_FlareCheck.interactiveFunction(Test_FlareCheck.flammableSmallInt)(interactiveColorList)))("colors")(function (v) {
                  return function (v1) {
                      return new ColorList(Data_Array.fromFoldable(Data_List_Types.foldableList)(Color_Scale.colors(v)(v1)));
                  };
              })();
              docscale(interactiveTColorScale)("grayscale")(Color_Scale.grayscale)();
              docscale(interactiveTColorScale)("spectrum")(Color_Scale.spectrum)();
              docscale(interactiveTColorScale)("spectrumLCh")(Color_Scale.spectrumLCh)();
              docscale(interactiveTColorScale)("blueToRed")(Color_Scale.blueToRed)();
              docscale(interactiveTColorScale)("yellowToRed")(Color_Scale.yellowToRed)();
              docscale(interactiveTColorScale)("hot")(Color_Scale.hot)();
              docscale(interactiveTColorScale)("cool")(Color_Scale.cool)();
              docscale(interactiveTColorScale)("cubehelix")(Color_Scale.cubehelix)();
              docscale(Test_FlareCheck.interactiveFunction(flammableTColorSpace)(Test_FlareCheck.interactiveFunction(flammableTColor)(Test_FlareCheck.interactiveFunction(flammableTColor)(Test_FlareCheck.interactiveString))))("cssColorStops")(function (v) {
                  return function (v1) {
                      return function (v2) {
                          return Color_Scale.cssColorStops(Color_Scale.colorScale(v)(v1)(Data_List_Types.Nil.value)(v2));
                      };
                  };
              })();
              docscale(Test_FlareCheck.interactiveFunction(flammableTColorScale)(interactiveTColorScale))("modify (here: modify (const toGray))")(function (v) {
                  return Color_Scale.modify(Data_Function["const"](Color.toGray))(v);
              })();
              var docscaleperc = function (dictInteractive) {
                  return Test_FlareDoc["flareDoc'"](dictInteractive)("doc-scale-perc")(dict)("Color.Scale.Perceptual");
              };
              docscaleperc(interactiveTColorScale)("magma")(Color_Scale_Perceptual.magma)();
              docscaleperc(interactiveTColorScale)("inferno")(Color_Scale_Perceptual.inferno)();
              docscaleperc(interactiveTColorScale)("plasma")(Color_Scale_Perceptual.plasma)();
              docscaleperc(interactiveTColorScale)("viridis")(Color_Scale_Perceptual.viridis)();
              var docharm = function (dictInteractive) {
                  return Test_FlareDoc["flareDoc'"](dictInteractive)("doc-scheme-harm")(dict)("Color.Scheme.Harmonic");
              };
              docharm(Test_FlareCheck.interactiveFunction(flammableTColor)(interactiveColorList))("analogous")(function (v) {
                  return ColorList.create(Color_Scheme_Harmonic.analogous(v));
              })();
              docharm(Test_FlareCheck.interactiveFunction(flammableTColor)(interactiveColorList))("triad")(function (v) {
                  return ColorList.create(Color_Scheme_Harmonic.triad(v));
              })();
              docharm(Test_FlareCheck.interactiveFunction(flammableTColor)(interactiveColorList))("splitComplementary")(function (v) {
                  return ColorList.create(Color_Scheme_Harmonic.splitComplementary(v));
              })();
              docharm(Test_FlareCheck.interactiveFunction(flammableTColor)(interactiveColorList))("shades")(function (v) {
                  return ColorList.create(Color_Scheme_Harmonic.shades(v));
              })();
              docharm(Test_FlareCheck.interactiveFunction(flammableTColor)(interactiveColorList))("tetrad")(function (v) {
                  return ColorList.create(Color_Scheme_Harmonic.tetrad(v));
              })();
              var docmd = function (dictInteractive) {
                  return Test_FlareDoc["flareDoc'"](dictInteractive)("doc-scheme-md")(dict)("Color.Scheme.MaterialDesign");
              };
              docmd(interactiveTColor)("red")(Color_Scheme_MaterialDesign.red)();
              docmd(interactiveTColor)("pink")(Color_Scheme_MaterialDesign.pink)();
              docmd(interactiveTColor)("purple")(Color_Scheme_MaterialDesign.purple)();
              docmd(interactiveTColor)("deepPurple")(Color_Scheme_MaterialDesign.deepPurple)();
              docmd(interactiveTColor)("indigo")(Color_Scheme_MaterialDesign.indigo)();
              docmd(interactiveTColor)("blue")(Color_Scheme_MaterialDesign.blue)();
              docmd(interactiveTColor)("lightBlue")(Color_Scheme_MaterialDesign.lightBlue)();
              docmd(interactiveTColor)("cyan")(Color_Scheme_MaterialDesign.cyan)();
              docmd(interactiveTColor)("teal")(Color_Scheme_MaterialDesign.teal)();
              docmd(interactiveTColor)("green")(Color_Scheme_MaterialDesign.green)();
              docmd(interactiveTColor)("lightGreen")(Color_Scheme_MaterialDesign.lightGreen)();
              docmd(interactiveTColor)("lime")(Color_Scheme_MaterialDesign.lime)();
              docmd(interactiveTColor)("yellow")(Color_Scheme_MaterialDesign.yellow)();
              docmd(interactiveTColor)("amber")(Color_Scheme_MaterialDesign.amber)();
              docmd(interactiveTColor)("orange")(Color_Scheme_MaterialDesign.orange)();
              docmd(interactiveTColor)("deepOrange")(Color_Scheme_MaterialDesign.deepOrange)();
              docmd(interactiveTColor)("brown")(Color_Scheme_MaterialDesign.brown)();
              docmd(interactiveTColor)("grey")(Color_Scheme_MaterialDesign.grey)();
              docmd(interactiveTColor)("blueGrey")(Color_Scheme_MaterialDesign.blueGrey)();
              var docx11 = function (dictInteractive) {
                  return Test_FlareDoc["flareDoc'"](dictInteractive)("doc-scheme-x11")(dict)("Color.Scheme.X11");
              };
              docx11(interactiveTColor)("aliceblue")(Color_Scheme_X11.aliceblue)();
              docx11(interactiveTColor)("antiquewhite")(Color_Scheme_X11.antiquewhite)();
              docx11(interactiveTColor)("aqua")(Color_Scheme_X11.aqua)();
              docx11(interactiveTColor)("aquamarine")(Color_Scheme_X11.aquamarine)();
              docx11(interactiveTColor)("azure")(Color_Scheme_X11.azure)();
              docx11(interactiveTColor)("beige")(Color_Scheme_X11.beige)();
              docx11(interactiveTColor)("bisque")(Color_Scheme_X11.bisque)();
              docx11(interactiveTColor)("blanchedalmond")(Color_Scheme_X11.blanchedalmond)();
              docx11(interactiveTColor)("blue")(Color_Scheme_X11.blue)();
              docx11(interactiveTColor)("blueviolet")(Color_Scheme_X11.blueviolet)();
              docx11(interactiveTColor)("brown")(Color_Scheme_X11.brown)();
              docx11(interactiveTColor)("burlywood")(Color_Scheme_X11.burlywood)();
              docx11(interactiveTColor)("cadetblue")(Color_Scheme_X11.cadetblue)();
              docx11(interactiveTColor)("chartreuse")(Color_Scheme_X11.chartreuse)();
              docx11(interactiveTColor)("chocolate")(Color_Scheme_X11.chocolate)();
              docx11(interactiveTColor)("coral")(Color_Scheme_X11.coral)();
              docx11(interactiveTColor)("cornflowerblue")(Color_Scheme_X11.cornflowerblue)();
              docx11(interactiveTColor)("cornsilk")(Color_Scheme_X11.cornsilk)();
              docx11(interactiveTColor)("crimson")(Color_Scheme_X11.crimson)();
              docx11(interactiveTColor)("cyan")(Color_Scheme_X11.cyan)();
              docx11(interactiveTColor)("darkblue")(Color_Scheme_X11.darkblue)();
              docx11(interactiveTColor)("darkcyan")(Color_Scheme_X11.darkcyan)();
              docx11(interactiveTColor)("darkgoldenrod")(Color_Scheme_X11.darkgoldenrod)();
              docx11(interactiveTColor)("darkgray")(Color_Scheme_X11.darkgray)();
              docx11(interactiveTColor)("darkgreen")(Color_Scheme_X11.darkgreen)();
              docx11(interactiveTColor)("darkgrey")(Color_Scheme_X11.darkgrey)();
              docx11(interactiveTColor)("darkkhaki")(Color_Scheme_X11.darkkhaki)();
              docx11(interactiveTColor)("darkmagenta")(Color_Scheme_X11.darkmagenta)();
              docx11(interactiveTColor)("darkolivegreen")(Color_Scheme_X11.darkolivegreen)();
              docx11(interactiveTColor)("darkorange")(Color_Scheme_X11.darkorange)();
              docx11(interactiveTColor)("darkorchid")(Color_Scheme_X11.darkorchid)();
              docx11(interactiveTColor)("darkred")(Color_Scheme_X11.darkred)();
              docx11(interactiveTColor)("darksalmon")(Color_Scheme_X11.darksalmon)();
              docx11(interactiveTColor)("darkseagreen")(Color_Scheme_X11.darkseagreen)();
              docx11(interactiveTColor)("darkslateblue")(Color_Scheme_X11.darkslateblue)();
              docx11(interactiveTColor)("darkslategray")(Color_Scheme_X11.darkslategray)();
              docx11(interactiveTColor)("darkslategrey")(Color_Scheme_X11.darkslategrey)();
              docx11(interactiveTColor)("darkturquoise")(Color_Scheme_X11.darkturquoise)();
              docx11(interactiveTColor)("darkviolet")(Color_Scheme_X11.darkviolet)();
              docx11(interactiveTColor)("deeppink")(Color_Scheme_X11.deeppink)();
              docx11(interactiveTColor)("deepskyblue")(Color_Scheme_X11.deepskyblue)();
              docx11(interactiveTColor)("dimgray")(Color_Scheme_X11.dimgray)();
              docx11(interactiveTColor)("dimgrey")(Color_Scheme_X11.dimgrey)();
              docx11(interactiveTColor)("dodgerblue")(Color_Scheme_X11.dodgerblue)();
              docx11(interactiveTColor)("firebrick")(Color_Scheme_X11.firebrick)();
              docx11(interactiveTColor)("floralwhite")(Color_Scheme_X11.floralwhite)();
              docx11(interactiveTColor)("forestgreen")(Color_Scheme_X11.forestgreen)();
              docx11(interactiveTColor)("fuchsia")(Color_Scheme_X11.fuchsia)();
              docx11(interactiveTColor)("gainsboro")(Color_Scheme_X11.gainsboro)();
              docx11(interactiveTColor)("ghostwhite")(Color_Scheme_X11.ghostwhite)();
              docx11(interactiveTColor)("gold")(Color_Scheme_X11.gold)();
              docx11(interactiveTColor)("goldenrod")(Color_Scheme_X11.goldenrod)();
              docx11(interactiveTColor)("gray")(Color_Scheme_X11.gray)();
              docx11(interactiveTColor)("green")(Color_Scheme_X11.green)();
              docx11(interactiveTColor)("greenyellow")(Color_Scheme_X11.greenyellow)();
              docx11(interactiveTColor)("grey")(Color_Scheme_X11.grey)();
              docx11(interactiveTColor)("honeydew")(Color_Scheme_X11.honeydew)();
              docx11(interactiveTColor)("hotpink")(Color_Scheme_X11.hotpink)();
              docx11(interactiveTColor)("indianred")(Color_Scheme_X11.indianred)();
              docx11(interactiveTColor)("indigo")(Color_Scheme_X11.indigo)();
              docx11(interactiveTColor)("ivory")(Color_Scheme_X11.ivory)();
              docx11(interactiveTColor)("khaki")(Color_Scheme_X11.khaki)();
              docx11(interactiveTColor)("lavender")(Color_Scheme_X11.lavender)();
              docx11(interactiveTColor)("lavenderblush")(Color_Scheme_X11.lavenderblush)();
              docx11(interactiveTColor)("lawngreen")(Color_Scheme_X11.lawngreen)();
              docx11(interactiveTColor)("lemonchiffon")(Color_Scheme_X11.lemonchiffon)();
              docx11(interactiveTColor)("lightblue")(Color_Scheme_X11.lightblue)();
              docx11(interactiveTColor)("lightcoral")(Color_Scheme_X11.lightcoral)();
              docx11(interactiveTColor)("lightcyan")(Color_Scheme_X11.lightcyan)();
              docx11(interactiveTColor)("lightgoldenrodyellow")(Color_Scheme_X11.lightgoldenrodyellow)();
              docx11(interactiveTColor)("lightgray")(Color_Scheme_X11.lightgray)();
              docx11(interactiveTColor)("lightgreen")(Color_Scheme_X11.lightgreen)();
              docx11(interactiveTColor)("lightgrey")(Color_Scheme_X11.lightgrey)();
              docx11(interactiveTColor)("lightpink")(Color_Scheme_X11.lightpink)();
              docx11(interactiveTColor)("lightsalmon")(Color_Scheme_X11.lightsalmon)();
              docx11(interactiveTColor)("lightseagreen")(Color_Scheme_X11.lightseagreen)();
              docx11(interactiveTColor)("lightskyblue")(Color_Scheme_X11.lightskyblue)();
              docx11(interactiveTColor)("lightslategray")(Color_Scheme_X11.lightslategray)();
              docx11(interactiveTColor)("lightslategrey")(Color_Scheme_X11.lightslategrey)();
              docx11(interactiveTColor)("lightsteelblue")(Color_Scheme_X11.lightsteelblue)();
              docx11(interactiveTColor)("lightyellow")(Color_Scheme_X11.lightyellow)();
              docx11(interactiveTColor)("lime")(Color_Scheme_X11.lime)();
              docx11(interactiveTColor)("limegreen")(Color_Scheme_X11.limegreen)();
              docx11(interactiveTColor)("linen")(Color_Scheme_X11.linen)();
              docx11(interactiveTColor)("magenta")(Color_Scheme_X11.magenta)();
              docx11(interactiveTColor)("maroon")(Color_Scheme_X11.maroon)();
              docx11(interactiveTColor)("mediumaquamarine")(Color_Scheme_X11.mediumaquamarine)();
              docx11(interactiveTColor)("mediumblue")(Color_Scheme_X11.mediumblue)();
              docx11(interactiveTColor)("mediumorchid")(Color_Scheme_X11.mediumorchid)();
              docx11(interactiveTColor)("mediumpurple")(Color_Scheme_X11.mediumpurple)();
              docx11(interactiveTColor)("mediumseagreen")(Color_Scheme_X11.mediumseagreen)();
              docx11(interactiveTColor)("mediumslateblue")(Color_Scheme_X11.mediumslateblue)();
              docx11(interactiveTColor)("mediumspringgreen")(Color_Scheme_X11.mediumspringgreen)();
              docx11(interactiveTColor)("mediumturquoise")(Color_Scheme_X11.mediumturquoise)();
              docx11(interactiveTColor)("mediumvioletred")(Color_Scheme_X11.mediumvioletred)();
              docx11(interactiveTColor)("midnightblue")(Color_Scheme_X11.midnightblue)();
              docx11(interactiveTColor)("mintcream")(Color_Scheme_X11.mintcream)();
              docx11(interactiveTColor)("mistyrose")(Color_Scheme_X11.mistyrose)();
              docx11(interactiveTColor)("moccasin")(Color_Scheme_X11.moccasin)();
              docx11(interactiveTColor)("navajowhite")(Color_Scheme_X11.navajowhite)();
              docx11(interactiveTColor)("navy")(Color_Scheme_X11.navy)();
              docx11(interactiveTColor)("oldlace")(Color_Scheme_X11.oldlace)();
              docx11(interactiveTColor)("olive")(Color_Scheme_X11.olive)();
              docx11(interactiveTColor)("olivedrab")(Color_Scheme_X11.olivedrab)();
              docx11(interactiveTColor)("orange")(Color_Scheme_X11.orange)();
              docx11(interactiveTColor)("orangered")(Color_Scheme_X11.orangered)();
              docx11(interactiveTColor)("orchid")(Color_Scheme_X11.orchid)();
              docx11(interactiveTColor)("palegoldenrod")(Color_Scheme_X11.palegoldenrod)();
              docx11(interactiveTColor)("palegreen")(Color_Scheme_X11.palegreen)();
              docx11(interactiveTColor)("paleturquoise")(Color_Scheme_X11.paleturquoise)();
              docx11(interactiveTColor)("palevioletred")(Color_Scheme_X11.palevioletred)();
              docx11(interactiveTColor)("papayawhip")(Color_Scheme_X11.papayawhip)();
              docx11(interactiveTColor)("peachpuff")(Color_Scheme_X11.peachpuff)();
              docx11(interactiveTColor)("peru")(Color_Scheme_X11.peru)();
              docx11(interactiveTColor)("pink")(Color_Scheme_X11.pink)();
              docx11(interactiveTColor)("plum")(Color_Scheme_X11.plum)();
              docx11(interactiveTColor)("powderblue")(Color_Scheme_X11.powderblue)();
              docx11(interactiveTColor)("purple")(Color_Scheme_X11.purple)();
              docx11(interactiveTColor)("red")(Color_Scheme_X11.red)();
              docx11(interactiveTColor)("rosybrown")(Color_Scheme_X11.rosybrown)();
              docx11(interactiveTColor)("royalblue")(Color_Scheme_X11.royalblue)();
              docx11(interactiveTColor)("saddlebrown")(Color_Scheme_X11.saddlebrown)();
              docx11(interactiveTColor)("salmon")(Color_Scheme_X11.salmon)();
              docx11(interactiveTColor)("sandybrown")(Color_Scheme_X11.sandybrown)();
              docx11(interactiveTColor)("seagreen")(Color_Scheme_X11.seagreen)();
              docx11(interactiveTColor)("seashell")(Color_Scheme_X11.seashell)();
              docx11(interactiveTColor)("sienna")(Color_Scheme_X11.sienna)();
              docx11(interactiveTColor)("silver")(Color_Scheme_X11.silver)();
              docx11(interactiveTColor)("skyblue")(Color_Scheme_X11.skyblue)();
              docx11(interactiveTColor)("slateblue")(Color_Scheme_X11.slateblue)();
              docx11(interactiveTColor)("slategray")(Color_Scheme_X11.slategray)();
              docx11(interactiveTColor)("slategrey")(Color_Scheme_X11.slategrey)();
              docx11(interactiveTColor)("snow")(Color_Scheme_X11.snow)();
              docx11(interactiveTColor)("springgreen")(Color_Scheme_X11.springgreen)();
              docx11(interactiveTColor)("steelblue")(Color_Scheme_X11.steelblue)();
              docx11(interactiveTColor)("tan")(Color_Scheme_X11.tan)();
              docx11(interactiveTColor)("teal")(Color_Scheme_X11.teal)();
              docx11(interactiveTColor)("thistle")(Color_Scheme_X11.thistle)();
              docx11(interactiveTColor)("tomato")(Color_Scheme_X11.tomato)();
              docx11(interactiveTColor)("turquoise")(Color_Scheme_X11.turquoise)();
              docx11(interactiveTColor)("violet")(Color_Scheme_X11.violet)();
              docx11(interactiveTColor)("wheat")(Color_Scheme_X11.wheat)();
              docx11(interactiveTColor)("whitesmoke")(Color_Scheme_X11.whitesmoke)();
              docx11(interactiveTColor)("yellow")(Color_Scheme_X11.yellow)();
              docx11(interactiveTColor)("yellowgreen")(Color_Scheme_X11.yellowgreen)();
              var docClrs = function (dictInteractive) {
                  return Test_FlareDoc["flareDoc'"](dictInteractive)("doc-scheme-clrs")(dict)("Color.Scheme.Clrs");
              };
              docClrs(interactiveTColor)("navy")(Color_Scheme_Clrs.navy)();
              docClrs(interactiveTColor)("blue")(Color_Scheme_Clrs.blue)();
              docClrs(interactiveTColor)("aqua")(Color_Scheme_Clrs.aqua)();
              docClrs(interactiveTColor)("teal")(Color_Scheme_Clrs.teal)();
              docClrs(interactiveTColor)("olive")(Color_Scheme_Clrs.olive)();
              docClrs(interactiveTColor)("green")(Color_Scheme_Clrs.green)();
              docClrs(interactiveTColor)("lime")(Color_Scheme_Clrs.lime)();
              docClrs(interactiveTColor)("yellow")(Color_Scheme_Clrs.yellow)();
              docClrs(interactiveTColor)("orange")(Color_Scheme_Clrs.orange)();
              docClrs(interactiveTColor)("red")(Color_Scheme_Clrs.red)();
              docClrs(interactiveTColor)("maroon")(Color_Scheme_Clrs.maroon)();
              docClrs(interactiveTColor)("fuchsia")(Color_Scheme_Clrs.fuchsia)();
              docClrs(interactiveTColor)("purple")(Color_Scheme_Clrs.purple)();
              docClrs(interactiveTColor)("black'")(Color_Scheme_Clrs["black'"])();
              docClrs(interactiveTColor)("gray")(Color_Scheme_Clrs.gray)();
              return docClrs(interactiveTColor)("silver")(Color_Scheme_Clrs.silver)();
          };
      })();
      Flare_Smolder.runFlareHTML("input1")("output1")(flare1)();
      Flare_Smolder.runFlareHTML("input2")("output2")(flare2)();
      Flare_Smolder.runFlareHTML("input3")("output3")(flare3)();
      Flare_Smolder.runFlareHTML("input4")("output4")(flare4)();
      return Flare_Smolder.runFlareHTML("input5")("output5")(flare5)();
  };
  exports["main"] = main;
})(PS["Main"] = PS["Main"] || {});
PS["Main"].main();
